//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var web3, BigNumber, require;

(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
// packages/ethereum:web3/dist/web3.js                                                                                //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                      //
require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*                                                                                                                    // 2
    This file is part of ethereum.js.                                                                                 // 3
                                                                                                                      // 4
    ethereum.js is free software: you can redistribute it and/or modify                                               // 5
    it under the terms of the GNU Lesser General Public License as published by                                       // 6
    the Free Software Foundation, either version 3 of the License, or                                                 // 7
    (at your option) any later version.                                                                               // 8
                                                                                                                      // 9
    ethereum.js is distributed in the hope that it will be useful,                                                    // 10
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 11
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 12
    GNU Lesser General Public License for more details.                                                               // 13
                                                                                                                      // 14
    You should have received a copy of the GNU Lesser General Public License                                          // 15
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 16
*/                                                                                                                    // 17
/**                                                                                                                   // 18
 * @file abi.js                                                                                                       // 19
 * @author Marek Kotewicz <marek@ethdev.com>                                                                          // 20
 * @author Gav Wood <g@ethdev.com>                                                                                    // 21
 * @date 2014                                                                                                         // 22
 */                                                                                                                   // 23
                                                                                                                      // 24
var utils = require('../utils/utils');                                                                                // 25
var c = require('../utils/config');                                                                                   // 26
var types = require('./types');                                                                                       // 27
var f = require('./formatters');                                                                                      // 28
var solUtils = require('./utils');                                                                                    // 29
                                                                                                                      // 30
/**                                                                                                                   // 31
 * throw incorrect type error                                                                                         // 32
 *                                                                                                                    // 33
 * @method throwTypeError                                                                                             // 34
 * @param {String} type                                                                                               // 35
 * @throws incorrect type error                                                                                       // 36
 */                                                                                                                   // 37
var throwTypeError = function (type) {                                                                                // 38
    throw new Error('parser does not support type: ' + type);                                                         // 39
};                                                                                                                    // 40
                                                                                                                      // 41
/** This method should be called if we want to check if givent type is an array type                                  // 42
 *                                                                                                                    // 43
 * @method isArrayType                                                                                                // 44
 * @param {String} type name                                                                                          // 45
 * @returns {Boolean} true if it is, otherwise false                                                                  // 46
 */                                                                                                                   // 47
var isArrayType = function (type) {                                                                                   // 48
    return type.slice(-2) === '[]';                                                                                   // 49
};                                                                                                                    // 50
                                                                                                                      // 51
/**                                                                                                                   // 52
 * This method should be called to return dynamic type length in hex                                                  // 53
 *                                                                                                                    // 54
 * @method dynamicTypeBytes                                                                                           // 55
 * @param {String} type                                                                                               // 56
 * @param {String|Array} dynamic type                                                                                 // 57
 * @return {String} length of dynamic type in hex or empty string if type is not dynamic                              // 58
 */                                                                                                                   // 59
var dynamicTypeBytes = function (type, value) {                                                                       // 60
    // TODO: decide what to do with array of strings                                                                  // 61
    if (isArrayType(type) || type === 'bytes')                                                                        // 62
        return f.formatInputInt(value.length);                                                                        // 63
    return "";                                                                                                        // 64
};                                                                                                                    // 65
                                                                                                                      // 66
var inputTypes = types.inputTypes();                                                                                  // 67
                                                                                                                      // 68
/**                                                                                                                   // 69
 * Formats input params to bytes                                                                                      // 70
 *                                                                                                                    // 71
 * @method formatInput                                                                                                // 72
 * @param {Array} abi inputs of method                                                                                // 73
 * @param {Array} params that will be formatted to bytes                                                              // 74
 * @returns bytes representation of input params                                                                      // 75
 */                                                                                                                   // 76
var formatInput = function (inputs, params) {                                                                         // 77
    var bytes = "";                                                                                                   // 78
    var toAppendConstant = "";                                                                                        // 79
    var toAppendArrayContent = "";                                                                                    // 80
                                                                                                                      // 81
    /// first we iterate in search for dynamic                                                                        // 82
    inputs.forEach(function (input, index) {                                                                          // 83
        bytes += dynamicTypeBytes(input.type, params[index]);                                                         // 84
    });                                                                                                               // 85
                                                                                                                      // 86
    inputs.forEach(function (input, i) {                                                                              // 87
        /*jshint maxcomplexity:5 */                                                                                   // 88
        var typeMatch = false;                                                                                        // 89
        for (var j = 0; j < inputTypes.length && !typeMatch; j++) {                                                   // 90
            typeMatch = inputTypes[j].type(inputs[i].type, params[i]);                                                // 91
        }                                                                                                             // 92
        if (!typeMatch) {                                                                                             // 93
            throwTypeError(inputs[i].type);                                                                           // 94
        }                                                                                                             // 95
                                                                                                                      // 96
        var formatter = inputTypes[j - 1].format;                                                                     // 97
                                                                                                                      // 98
        if (isArrayType(inputs[i].type))                                                                              // 99
            toAppendArrayContent += params[i].reduce(function (acc, curr) {                                           // 100
                return acc + formatter(curr);                                                                         // 101
            }, "");                                                                                                   // 102
        else if (inputs[i].type === 'bytes')                                                                          // 103
            toAppendArrayContent += formatter(params[i]);                                                             // 104
        else                                                                                                          // 105
            toAppendConstant += formatter(params[i]);                                                                 // 106
    });                                                                                                               // 107
                                                                                                                      // 108
    bytes += toAppendConstant + toAppendArrayContent;                                                                 // 109
                                                                                                                      // 110
    return bytes;                                                                                                     // 111
};                                                                                                                    // 112
                                                                                                                      // 113
/**                                                                                                                   // 114
 * This method should be called to predict the length of dynamic type                                                 // 115
 *                                                                                                                    // 116
 * @method dynamicBytesLength                                                                                         // 117
 * @param {String} type                                                                                               // 118
 * @returns {Number} length of dynamic type, 0 or multiplication of ETH_PADDING (32)                                  // 119
 */                                                                                                                   // 120
var dynamicBytesLength = function (type) {                                                                            // 121
    if (isArrayType(type) || type === 'bytes')                                                                        // 122
        return c.ETH_PADDING * 2;                                                                                     // 123
    return 0;                                                                                                         // 124
};                                                                                                                    // 125
                                                                                                                      // 126
var outputTypes = types.outputTypes();                                                                                // 127
                                                                                                                      // 128
/**                                                                                                                   // 129
 * Formats output bytes back to param list                                                                            // 130
 *                                                                                                                    // 131
 * @method formatOutput                                                                                               // 132
 * @param {Array} abi outputs of method                                                                               // 133
 * @param {String} bytes represention of output                                                                       // 134
 * @returns {Array} output params                                                                                     // 135
 */                                                                                                                   // 136
var formatOutput = function (outs, output) {                                                                          // 137
                                                                                                                      // 138
    output = output.slice(2);                                                                                         // 139
    var result = [];                                                                                                  // 140
    var padding = c.ETH_PADDING * 2;                                                                                  // 141
                                                                                                                      // 142
    var dynamicPartLength = outs.reduce(function (acc, curr) {                                                        // 143
        return acc + dynamicBytesLength(curr.type);                                                                   // 144
    }, 0);                                                                                                            // 145
                                                                                                                      // 146
    var dynamicPart = output.slice(0, dynamicPartLength);                                                             // 147
    output = output.slice(dynamicPartLength);                                                                         // 148
                                                                                                                      // 149
    outs.forEach(function (out, i) {                                                                                  // 150
        /*jshint maxcomplexity:6 */                                                                                   // 151
        var typeMatch = false;                                                                                        // 152
        for (var j = 0; j < outputTypes.length && !typeMatch; j++) {                                                  // 153
            typeMatch = outputTypes[j].type(outs[i].type);                                                            // 154
        }                                                                                                             // 155
                                                                                                                      // 156
        if (!typeMatch) {                                                                                             // 157
            throwTypeError(outs[i].type);                                                                             // 158
        }                                                                                                             // 159
                                                                                                                      // 160
        var formatter = outputTypes[j - 1].format;                                                                    // 161
        if (isArrayType(outs[i].type)) {                                                                              // 162
            var size = f.formatOutputUInt(dynamicPart.slice(0, padding));                                             // 163
            dynamicPart = dynamicPart.slice(padding);                                                                 // 164
            var array = [];                                                                                           // 165
            for (var k = 0; k < size; k++) {                                                                          // 166
                array.push(formatter(output.slice(0, padding)));                                                      // 167
                output = output.slice(padding);                                                                       // 168
            }                                                                                                         // 169
            result.push(array);                                                                                       // 170
        }                                                                                                             // 171
        else if (types.prefixedType('bytes')(outs[i].type)) {                                                         // 172
            dynamicPart = dynamicPart.slice(padding);                                                                 // 173
            result.push(formatter(output.slice(0, padding)));                                                         // 174
            output = output.slice(padding);                                                                           // 175
        } else {                                                                                                      // 176
            result.push(formatter(output.slice(0, padding)));                                                         // 177
            output = output.slice(padding);                                                                           // 178
        }                                                                                                             // 179
    });                                                                                                               // 180
                                                                                                                      // 181
    return result;                                                                                                    // 182
};                                                                                                                    // 183
                                                                                                                      // 184
/**                                                                                                                   // 185
 * Should be called to create input parser for contract with given abi                                                // 186
 *                                                                                                                    // 187
 * @method inputParser                                                                                                // 188
 * @param {Array} contract abi                                                                                        // 189
 * @returns {Object} input parser object for given json abi                                                           // 190
 * TODO: refactor creating the parser, do not double logic from contract                                              // 191
 */                                                                                                                   // 192
var inputParser = function (json) {                                                                                   // 193
    var parser = {};                                                                                                  // 194
    json.forEach(function (method) {                                                                                  // 195
        var displayName = utils.extractDisplayName(method.name);                                                      // 196
        var typeName = utils.extractTypeName(method.name);                                                            // 197
                                                                                                                      // 198
        var impl = function () {                                                                                      // 199
            var params = Array.prototype.slice.call(arguments);                                                       // 200
            return formatInput(method.inputs, params);                                                                // 201
        };                                                                                                            // 202
                                                                                                                      // 203
        if (parser[displayName] === undefined) {                                                                      // 204
            parser[displayName] = impl;                                                                               // 205
        }                                                                                                             // 206
                                                                                                                      // 207
        parser[displayName][typeName] = impl;                                                                         // 208
    });                                                                                                               // 209
                                                                                                                      // 210
    return parser;                                                                                                    // 211
};                                                                                                                    // 212
                                                                                                                      // 213
/**                                                                                                                   // 214
 * Should be called to create output parser for contract with given abi                                               // 215
 *                                                                                                                    // 216
 * @method outputParser                                                                                               // 217
 * @param {Array} contract abi                                                                                        // 218
 * @returns {Object} output parser for given json abi                                                                 // 219
 */                                                                                                                   // 220
var outputParser = function (json) {                                                                                  // 221
    var parser = {};                                                                                                  // 222
    json.forEach(function (method) {                                                                                  // 223
                                                                                                                      // 224
        var displayName = utils.extractDisplayName(method.name);                                                      // 225
        var typeName = utils.extractTypeName(method.name);                                                            // 226
                                                                                                                      // 227
        var impl = function (output) {                                                                                // 228
            return formatOutput(method.outputs, output);                                                              // 229
        };                                                                                                            // 230
                                                                                                                      // 231
        if (parser[displayName] === undefined) {                                                                      // 232
            parser[displayName] = impl;                                                                               // 233
        }                                                                                                             // 234
                                                                                                                      // 235
        parser[displayName][typeName] = impl;                                                                         // 236
    });                                                                                                               // 237
                                                                                                                      // 238
    return parser;                                                                                                    // 239
};                                                                                                                    // 240
                                                                                                                      // 241
var formatConstructorParams = function (abi, params) {                                                                // 242
    var constructor = solUtils.getConstructor(abi, params.length);                                                    // 243
    if (!constructor) {                                                                                               // 244
        if (params.length > 0) {                                                                                      // 245
            console.warn("didn't found matching constructor, using default one");                                     // 246
        }                                                                                                             // 247
        return '';                                                                                                    // 248
    }                                                                                                                 // 249
    return formatInput(constructor.inputs, params);                                                                   // 250
};                                                                                                                    // 251
                                                                                                                      // 252
module.exports = {                                                                                                    // 253
    inputParser: inputParser,                                                                                         // 254
    outputParser: outputParser,                                                                                       // 255
    formatInput: formatInput,                                                                                         // 256
    formatOutput: formatOutput,                                                                                       // 257
    formatConstructorParams: formatConstructorParams                                                                  // 258
};                                                                                                                    // 259
                                                                                                                      // 260
},{"../utils/config":6,"../utils/utils":7,"./formatters":2,"./types":3,"./utils":4}],2:[function(require,module,exports){
/*                                                                                                                    // 262
    This file is part of ethereum.js.                                                                                 // 263
                                                                                                                      // 264
    ethereum.js is free software: you can redistribute it and/or modify                                               // 265
    it under the terms of the GNU Lesser General Public License as published by                                       // 266
    the Free Software Foundation, either version 3 of the License, or                                                 // 267
    (at your option) any later version.                                                                               // 268
                                                                                                                      // 269
    ethereum.js is distributed in the hope that it will be useful,                                                    // 270
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 271
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 272
    GNU Lesser General Public License for more details.                                                               // 273
                                                                                                                      // 274
    You should have received a copy of the GNU Lesser General Public License                                          // 275
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 276
*/                                                                                                                    // 277
/** @file formatters.js                                                                                               // 278
 * @authors:                                                                                                          // 279
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 280
 * @date 2015                                                                                                         // 281
 */                                                                                                                   // 282
                                                                                                                      // 283
var BigNumber = require('bignumber.js');                                                                              // 284
var utils = require('../utils/utils');                                                                                // 285
var c = require('../utils/config');                                                                                   // 286
                                                                                                                      // 287
/**                                                                                                                   // 288
 * Formats input value to byte representation of int                                                                  // 289
 * If value is negative, return it's two's complement                                                                 // 290
 * If the value is floating point, round it down                                                                      // 291
 *                                                                                                                    // 292
 * @method formatInputInt                                                                                             // 293
 * @param {String|Number|BigNumber} value that needs to be formatted                                                  // 294
 * @returns {String} right-aligned byte representation of int                                                         // 295
 */                                                                                                                   // 296
var formatInputInt = function (value) {                                                                               // 297
    var padding = c.ETH_PADDING * 2;                                                                                  // 298
    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);                                                                  // 299
    return utils.padLeft(utils.toTwosComplement(value).round().toString(16), padding);                                // 300
};                                                                                                                    // 301
                                                                                                                      // 302
/**                                                                                                                   // 303
 * Formats input value to byte representation of string                                                               // 304
 *                                                                                                                    // 305
 * @method formatInputString                                                                                          // 306
 * @param {String}                                                                                                    // 307
 * @returns {String} left-algined byte representation of string                                                       // 308
 */                                                                                                                   // 309
var formatInputString = function (value) {                                                                            // 310
    return utils.fromAscii(value, c.ETH_PADDING).substr(2);                                                           // 311
};                                                                                                                    // 312
                                                                                                                      // 313
/**                                                                                                                   // 314
 * Formats input value to byte representation of bool                                                                 // 315
 *                                                                                                                    // 316
 * @method formatInputBool                                                                                            // 317
 * @param {Boolean}                                                                                                   // 318
 * @returns {String} right-aligned byte representation bool                                                           // 319
 */                                                                                                                   // 320
var formatInputBool = function (value) {                                                                              // 321
    return '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');                  // 322
};                                                                                                                    // 323
                                                                                                                      // 324
/**                                                                                                                   // 325
 * Formats input value to byte representation of real                                                                 // 326
 * Values are multiplied by 2^m and encoded as integers                                                               // 327
 *                                                                                                                    // 328
 * @method formatInputReal                                                                                            // 329
 * @param {String|Number|BigNumber}                                                                                   // 330
 * @returns {String} byte representation of real                                                                      // 331
 */                                                                                                                   // 332
var formatInputReal = function (value) {                                                                              // 333
    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));                                     // 334
};                                                                                                                    // 335
                                                                                                                      // 336
/**                                                                                                                   // 337
 * Check if input value is negative                                                                                   // 338
 *                                                                                                                    // 339
 * @method signedIsNegative                                                                                           // 340
 * @param {String} value is hex format                                                                                // 341
 * @returns {Boolean} true if it is negative, otherwise false                                                         // 342
 */                                                                                                                   // 343
var signedIsNegative = function (value) {                                                                             // 344
    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';                                  // 345
};                                                                                                                    // 346
                                                                                                                      // 347
/**                                                                                                                   // 348
 * Formats right-aligned output bytes to int                                                                          // 349
 *                                                                                                                    // 350
 * @method formatOutputInt                                                                                            // 351
 * @param {String} bytes                                                                                              // 352
 * @returns {BigNumber} right-aligned output bytes formatted to big number                                            // 353
 */                                                                                                                   // 354
var formatOutputInt = function (value) {                                                                              // 355
                                                                                                                      // 356
    value = value || "0";                                                                                             // 357
                                                                                                                      // 358
    // check if it's negative number                                                                                  // 359
    // it it is, return two's complement                                                                              // 360
    if (signedIsNegative(value)) {                                                                                    // 361
        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);
    }                                                                                                                 // 363
    return new BigNumber(value, 16);                                                                                  // 364
};                                                                                                                    // 365
                                                                                                                      // 366
/**                                                                                                                   // 367
 * Formats right-aligned output bytes to uint                                                                         // 368
 *                                                                                                                    // 369
 * @method formatOutputUInt                                                                                           // 370
 * @param {String} bytes                                                                                              // 371
 * @returns {BigNumeber} right-aligned output bytes formatted to uint                                                 // 372
 */                                                                                                                   // 373
var formatOutputUInt = function (value) {                                                                             // 374
    value = value || "0";                                                                                             // 375
    return new BigNumber(value, 16);                                                                                  // 376
};                                                                                                                    // 377
                                                                                                                      // 378
/**                                                                                                                   // 379
 * Formats right-aligned output bytes to real                                                                         // 380
 *                                                                                                                    // 381
 * @method formatOutputReal                                                                                           // 382
 * @param {String}                                                                                                    // 383
 * @returns {BigNumber} input bytes formatted to real                                                                 // 384
 */                                                                                                                   // 385
var formatOutputReal = function (value) {                                                                             // 386
    return formatOutputInt(value).dividedBy(new BigNumber(2).pow(128));                                               // 387
};                                                                                                                    // 388
                                                                                                                      // 389
/**                                                                                                                   // 390
 * Formats right-aligned output bytes to ureal                                                                        // 391
 *                                                                                                                    // 392
 * @method formatOutputUReal                                                                                          // 393
 * @param {String}                                                                                                    // 394
 * @returns {BigNumber} input bytes formatted to ureal                                                                // 395
 */                                                                                                                   // 396
var formatOutputUReal = function (value) {                                                                            // 397
    return formatOutputUInt(value).dividedBy(new BigNumber(2).pow(128));                                              // 398
};                                                                                                                    // 399
                                                                                                                      // 400
/**                                                                                                                   // 401
 * Should be used to format output hash                                                                               // 402
 *                                                                                                                    // 403
 * @method formatOutputHash                                                                                           // 404
 * @param {String}                                                                                                    // 405
 * @returns {String} right-aligned output bytes formatted to hex                                                      // 406
 */                                                                                                                   // 407
var formatOutputHash = function (value) {                                                                             // 408
    return "0x" + value;                                                                                              // 409
};                                                                                                                    // 410
                                                                                                                      // 411
/**                                                                                                                   // 412
 * Should be used to format output bool                                                                               // 413
 *                                                                                                                    // 414
 * @method formatOutputBool                                                                                           // 415
 * @param {String}                                                                                                    // 416
 * @returns {Boolean} right-aligned input bytes formatted to bool                                                     // 417
 */                                                                                                                   // 418
var formatOutputBool = function (value) {                                                                             // 419
    return value === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;               // 420
};                                                                                                                    // 421
                                                                                                                      // 422
/**                                                                                                                   // 423
 * Should be used to format output string                                                                             // 424
 *                                                                                                                    // 425
 * @method formatOutputString                                                                                         // 426
 * @param {Sttring} left-aligned hex representation of string                                                         // 427
 * @returns {String} ascii string                                                                                     // 428
 */                                                                                                                   // 429
var formatOutputString = function (value) {                                                                           // 430
    return utils.toAscii(value);                                                                                      // 431
};                                                                                                                    // 432
                                                                                                                      // 433
/**                                                                                                                   // 434
 * Should be used to format output address                                                                            // 435
 *                                                                                                                    // 436
 * @method formatOutputAddress                                                                                        // 437
 * @param {String} right-aligned input bytes                                                                          // 438
 * @returns {String} address                                                                                          // 439
 */                                                                                                                   // 440
var formatOutputAddress = function (value) {                                                                          // 441
    return "0x" + value.slice(value.length - 40, value.length);                                                       // 442
};                                                                                                                    // 443
                                                                                                                      // 444
module.exports = {                                                                                                    // 445
    formatInputInt: formatInputInt,                                                                                   // 446
    formatInputString: formatInputString,                                                                             // 447
    formatInputBool: formatInputBool,                                                                                 // 448
    formatInputReal: formatInputReal,                                                                                 // 449
    formatOutputInt: formatOutputInt,                                                                                 // 450
    formatOutputUInt: formatOutputUInt,                                                                               // 451
    formatOutputReal: formatOutputReal,                                                                               // 452
    formatOutputUReal: formatOutputUReal,                                                                             // 453
    formatOutputHash: formatOutputHash,                                                                               // 454
    formatOutputBool: formatOutputBool,                                                                               // 455
    formatOutputString: formatOutputString,                                                                           // 456
    formatOutputAddress: formatOutputAddress                                                                          // 457
};                                                                                                                    // 458
                                                                                                                      // 459
                                                                                                                      // 460
},{"../utils/config":6,"../utils/utils":7,"bignumber.js":"bignumber.js"}],3:[function(require,module,exports){        // 461
/*                                                                                                                    // 462
    This file is part of ethereum.js.                                                                                 // 463
                                                                                                                      // 464
    ethereum.js is free software: you can redistribute it and/or modify                                               // 465
    it under the terms of the GNU Lesser General Public License as published by                                       // 466
    the Free Software Foundation, either version 3 of the License, or                                                 // 467
    (at your option) any later version.                                                                               // 468
                                                                                                                      // 469
    ethereum.js is distributed in the hope that it will be useful,                                                    // 470
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 471
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 472
    GNU Lesser General Public License for more details.                                                               // 473
                                                                                                                      // 474
    You should have received a copy of the GNU Lesser General Public License                                          // 475
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 476
*/                                                                                                                    // 477
/** @file types.js                                                                                                    // 478
 * @authors:                                                                                                          // 479
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 480
 * @date 2015                                                                                                         // 481
 */                                                                                                                   // 482
                                                                                                                      // 483
var f = require('./formatters');                                                                                      // 484
                                                                                                                      // 485
/// @param expected type prefix (string)                                                                              // 486
/// @returns function which checks if type has matching prefix. if yes, returns true, otherwise false                 // 487
var prefixedType = function (prefix) {                                                                                // 488
    return function (type) {                                                                                          // 489
        return type.indexOf(prefix) === 0;                                                                            // 490
    };                                                                                                                // 491
};                                                                                                                    // 492
                                                                                                                      // 493
/// @param expected type name (string)                                                                                // 494
/// @returns function which checks if type is matching expected one. if yes, returns true, otherwise false            // 495
var namedType = function (name) {                                                                                     // 496
    return function (type) {                                                                                          // 497
        return name === type;                                                                                         // 498
    };                                                                                                                // 499
};                                                                                                                    // 500
                                                                                                                      // 501
/// Setups input formatters for solidity types                                                                        // 502
/// @returns an array of input formatters                                                                             // 503
var inputTypes = function () {                                                                                        // 504
                                                                                                                      // 505
    return [                                                                                                          // 506
        { type: prefixedType('uint'), format: f.formatInputInt },                                                     // 507
        { type: prefixedType('int'), format: f.formatInputInt },                                                      // 508
        { type: prefixedType('bytes'), format: f.formatInputString },                                                 // 509
        { type: prefixedType('real'), format: f.formatInputReal },                                                    // 510
        { type: prefixedType('ureal'), format: f.formatInputReal },                                                   // 511
        { type: namedType('address'), format: f.formatInputInt },                                                     // 512
        { type: namedType('bool'), format: f.formatInputBool }                                                        // 513
    ];                                                                                                                // 514
};                                                                                                                    // 515
                                                                                                                      // 516
/// Setups output formaters for solidity types                                                                        // 517
/// @returns an array of output formatters                                                                            // 518
var outputTypes = function () {                                                                                       // 519
                                                                                                                      // 520
    return [                                                                                                          // 521
        { type: prefixedType('uint'), format: f.formatOutputUInt },                                                   // 522
        { type: prefixedType('int'), format: f.formatOutputInt },                                                     // 523
        { type: prefixedType('bytes'), format: f.formatOutputString },                                                // 524
        { type: prefixedType('real'), format: f.formatOutputReal },                                                   // 525
        { type: prefixedType('ureal'), format: f.formatOutputUReal },                                                 // 526
        { type: namedType('address'), format: f.formatOutputAddress },                                                // 527
        { type: namedType('bool'), format: f.formatOutputBool }                                                       // 528
    ];                                                                                                                // 529
};                                                                                                                    // 530
                                                                                                                      // 531
module.exports = {                                                                                                    // 532
    prefixedType: prefixedType,                                                                                       // 533
    namedType: namedType,                                                                                             // 534
    inputTypes: inputTypes,                                                                                           // 535
    outputTypes: outputTypes                                                                                          // 536
};                                                                                                                    // 537
                                                                                                                      // 538
                                                                                                                      // 539
},{"./formatters":2}],4:[function(require,module,exports){                                                            // 540
/*                                                                                                                    // 541
    This file is part of ethereum.js.                                                                                 // 542
                                                                                                                      // 543
    ethereum.js is free software: you can redistribute it and/or modify                                               // 544
    it under the terms of the GNU Lesser General Public License as published by                                       // 545
    the Free Software Foundation, either version 3 of the License, or                                                 // 546
    (at your option) any later version.                                                                               // 547
                                                                                                                      // 548
    ethereum.js is distributed in the hope that it will be useful,                                                    // 549
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 550
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 551
    GNU Lesser General Public License for more details.                                                               // 552
                                                                                                                      // 553
    You should have received a copy of the GNU Lesser General Public License                                          // 554
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 555
*/                                                                                                                    // 556
/**                                                                                                                   // 557
 * @file utils.js                                                                                                     // 558
 * @author Marek Kotewicz <marek@ethdev.com>                                                                          // 559
 * @date 2015                                                                                                         // 560
 */                                                                                                                   // 561
                                                                                                                      // 562
/**                                                                                                                   // 563
 * Returns the contstructor with matching number of arguments                                                         // 564
 *                                                                                                                    // 565
 * @method getConstructor                                                                                             // 566
 * @param {Array} abi                                                                                                 // 567
 * @param {Number} numberOfArgs                                                                                       // 568
 * @returns {Object} constructor function abi                                                                         // 569
 */                                                                                                                   // 570
var getConstructor = function (abi, numberOfArgs) {                                                                   // 571
    return abi.filter(function (f) {                                                                                  // 572
        return f.type === 'constructor' && f.inputs.length === numberOfArgs;                                          // 573
    })[0];                                                                                                            // 574
};                                                                                                                    // 575
                                                                                                                      // 576
/**                                                                                                                   // 577
 * Filters all functions from input abi                                                                               // 578
 *                                                                                                                    // 579
 * @method filterFunctions                                                                                            // 580
 * @param {Array} abi                                                                                                 // 581
 * @returns {Array} abi array with filtered objects of type 'function'                                                // 582
 */                                                                                                                   // 583
var filterFunctions = function (json) {                                                                               // 584
    return json.filter(function (current) {                                                                           // 585
        return current.type === 'function';                                                                           // 586
    });                                                                                                               // 587
};                                                                                                                    // 588
                                                                                                                      // 589
/**                                                                                                                   // 590
 * Filters all events from input abi                                                                                  // 591
 *                                                                                                                    // 592
 * @method filterEvents                                                                                               // 593
 * @param {Array} abi                                                                                                 // 594
 * @returns {Array} abi array with filtered objects of type 'event'                                                   // 595
 */                                                                                                                   // 596
var filterEvents = function (json) {                                                                                  // 597
    return json.filter(function (current) {                                                                           // 598
        return current.type === 'event';                                                                              // 599
    });                                                                                                               // 600
};                                                                                                                    // 601
                                                                                                                      // 602
module.exports = {                                                                                                    // 603
    getConstructor: getConstructor,                                                                                   // 604
    filterFunctions: filterFunctions,                                                                                 // 605
    filterEvents: filterEvents                                                                                        // 606
};                                                                                                                    // 607
                                                                                                                      // 608
                                                                                                                      // 609
},{}],5:[function(require,module,exports){                                                                            // 610
'use strict';                                                                                                         // 611
                                                                                                                      // 612
// go env doesn't have and need XMLHttpRequest                                                                        // 613
if (typeof XMLHttpRequest === 'undefined') {                                                                          // 614
    exports.XMLHttpRequest = {};                                                                                      // 615
} else {                                                                                                              // 616
    exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line                                                    // 617
}                                                                                                                     // 618
                                                                                                                      // 619
                                                                                                                      // 620
},{}],6:[function(require,module,exports){                                                                            // 621
/*                                                                                                                    // 622
    This file is part of ethereum.js.                                                                                 // 623
                                                                                                                      // 624
    ethereum.js is free software: you can redistribute it and/or modify                                               // 625
    it under the terms of the GNU Lesser General Public License as published by                                       // 626
    the Free Software Foundation, either version 3 of the License, or                                                 // 627
    (at your option) any later version.                                                                               // 628
                                                                                                                      // 629
    ethereum.js is distributed in the hope that it will be useful,                                                    // 630
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 631
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 632
    GNU Lesser General Public License for more details.                                                               // 633
                                                                                                                      // 634
    You should have received a copy of the GNU Lesser General Public License                                          // 635
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 636
*/                                                                                                                    // 637
/** @file config.js                                                                                                   // 638
 * @authors:                                                                                                          // 639
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 640
 * @date 2015                                                                                                         // 641
 */                                                                                                                   // 642
                                                                                                                      // 643
/**                                                                                                                   // 644
 * Utils                                                                                                              // 645
 *                                                                                                                    // 646
 * @module utils                                                                                                      // 647
 */                                                                                                                   // 648
                                                                                                                      // 649
/**                                                                                                                   // 650
 * Utility functions                                                                                                  // 651
 *                                                                                                                    // 652
 * @class [utils] config                                                                                              // 653
 * @constructor                                                                                                       // 654
 */                                                                                                                   // 655
                                                                                                                      // 656
/// required to define ETH_BIGNUMBER_ROUNDING_MODE                                                                    // 657
var BigNumber = require('bignumber.js');                                                                              // 658
                                                                                                                      // 659
var ETH_UNITS = [                                                                                                     // 660
    'wei',                                                                                                            // 661
    'Kwei',                                                                                                           // 662
    'Mwei',                                                                                                           // 663
    'Gwei',                                                                                                           // 664
    'szabo',                                                                                                          // 665
    'finney',                                                                                                         // 666
    'ether',                                                                                                          // 667
    'grand',                                                                                                          // 668
    'Mether',                                                                                                         // 669
    'Gether',                                                                                                         // 670
    'Tether',                                                                                                         // 671
    'Pether',                                                                                                         // 672
    'Eether',                                                                                                         // 673
    'Zether',                                                                                                         // 674
    'Yether',                                                                                                         // 675
    'Nether',                                                                                                         // 676
    'Dether',                                                                                                         // 677
    'Vether',                                                                                                         // 678
    'Uether'                                                                                                          // 679
];                                                                                                                    // 680
                                                                                                                      // 681
module.exports = {                                                                                                    // 682
    ETH_PADDING: 32,                                                                                                  // 683
    ETH_SIGNATURE_LENGTH: 4,                                                                                          // 684
    ETH_UNITS: ETH_UNITS,                                                                                             // 685
    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },                                             // 686
    ETH_POLLING_TIMEOUT: 1000,                                                                                        // 687
    ETH_DEFAULTBLOCK: 'latest'                                                                                        // 688
};                                                                                                                    // 689
                                                                                                                      // 690
                                                                                                                      // 691
},{"bignumber.js":"bignumber.js"}],7:[function(require,module,exports){                                               // 692
/*                                                                                                                    // 693
    This file is part of ethereum.js.                                                                                 // 694
                                                                                                                      // 695
    ethereum.js is free software: you can redistribute it and/or modify                                               // 696
    it under the terms of the GNU Lesser General Public License as published by                                       // 697
    the Free Software Foundation, either version 3 of the License, or                                                 // 698
    (at your option) any later version.                                                                               // 699
                                                                                                                      // 700
    ethereum.js is distributed in the hope that it will be useful,                                                    // 701
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 702
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 703
    GNU Lesser General Public License for more details.                                                               // 704
                                                                                                                      // 705
    You should have received a copy of the GNU Lesser General Public License                                          // 706
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 707
*/                                                                                                                    // 708
/** @file utils.js                                                                                                    // 709
 * @authors:                                                                                                          // 710
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 711
 * @date 2015                                                                                                         // 712
 */                                                                                                                   // 713
                                                                                                                      // 714
/**                                                                                                                   // 715
 * Utils                                                                                                              // 716
 *                                                                                                                    // 717
 * @module utils                                                                                                      // 718
 */                                                                                                                   // 719
                                                                                                                      // 720
/**                                                                                                                   // 721
 * Utility functions                                                                                                  // 722
 *                                                                                                                    // 723
 * @class [utils] utils                                                                                               // 724
 * @constructor                                                                                                       // 725
 */                                                                                                                   // 726
                                                                                                                      // 727
var BigNumber = require('bignumber.js');                                                                              // 728
                                                                                                                      // 729
var unitMap = {                                                                                                       // 730
    'wei':      '1',                                                                                                  // 731
    'kwei':     '1000',                                                                                               // 732
    'ada':      '1000',                                                                                               // 733
    'mwei':     '1000000',                                                                                            // 734
    'babbage':  '1000000',                                                                                            // 735
    'gwei':     '1000000000',                                                                                         // 736
    'shannon':  '1000000000',                                                                                         // 737
    'szabo':    '1000000000000',                                                                                      // 738
    'finney':   '1000000000000000',                                                                                   // 739
    'ether':    '1000000000000000000',                                                                                // 740
    'kether':   '1000000000000000000000',                                                                             // 741
    'grand':    '1000000000000000000000',                                                                             // 742
    'einstein': '1000000000000000000000',                                                                             // 743
    'mether':   '1000000000000000000000000',                                                                          // 744
    'gether':   '1000000000000000000000000000',                                                                       // 745
    'tether':   '1000000000000000000000000000000'                                                                     // 746
};                                                                                                                    // 747
                                                                                                                      // 748
/**                                                                                                                   // 749
 * Should be called to pad string to expected length                                                                  // 750
 *                                                                                                                    // 751
 * @method padLeft                                                                                                    // 752
 * @param {String} string to be padded                                                                                // 753
 * @param {Number} characters that result string should have                                                          // 754
 * @param {String} sign, by default 0                                                                                 // 755
 * @returns {String} right aligned string                                                                             // 756
 */                                                                                                                   // 757
var padLeft = function (string, chars, sign) {                                                                        // 758
    return new Array(chars - string.length + 1).join(sign ? sign : "0") + string;                                     // 759
};                                                                                                                    // 760
                                                                                                                      // 761
/** Finds first index of array element matching pattern                                                               // 762
 *                                                                                                                    // 763
 * @method findIndex                                                                                                  // 764
 * @param {Array}                                                                                                     // 765
 * @param {Function} pattern                                                                                          // 766
 * @returns {Number} index of element                                                                                 // 767
 */                                                                                                                   // 768
var findIndex = function (array, callback) {                                                                          // 769
    var end = false;                                                                                                  // 770
    var i = 0;                                                                                                        // 771
    for (; i < array.length && !end; i++) {                                                                           // 772
        end = callback(array[i]);                                                                                     // 773
    }                                                                                                                 // 774
    return end ? i - 1 : -1;                                                                                          // 775
};                                                                                                                    // 776
                                                                                                                      // 777
/**                                                                                                                   // 778
 * Should be called to get sting from it's hex representation                                                         // 779
 *                                                                                                                    // 780
 * @method toAscii                                                                                                    // 781
 * @param {String} string in hex                                                                                      // 782
 * @returns {String} ascii string representation of hex value                                                         // 783
 */                                                                                                                   // 784
var toAscii = function(hex) {                                                                                         // 785
// Find termination                                                                                                   // 786
    var str = "";                                                                                                     // 787
    var i = 0, l = hex.length;                                                                                        // 788
    if (hex.substring(0, 2) === '0x') {                                                                               // 789
        i = 2;                                                                                                        // 790
    }                                                                                                                 // 791
    for (; i < l; i+=2) {                                                                                             // 792
        var code = parseInt(hex.substr(i, 2), 16);                                                                    // 793
        if (code === 0) {                                                                                             // 794
            break;                                                                                                    // 795
        }                                                                                                             // 796
                                                                                                                      // 797
        str += String.fromCharCode(code);                                                                             // 798
    }                                                                                                                 // 799
                                                                                                                      // 800
    return str;                                                                                                       // 801
};                                                                                                                    // 802
                                                                                                                      // 803
/**                                                                                                                   // 804
 * Shold be called to get hex representation (prefixed by 0x) of ascii string                                         // 805
 *                                                                                                                    // 806
 * @method toHexNative                                                                                                // 807
 * @param {String} string                                                                                             // 808
 * @returns {String} hex representation of input string                                                               // 809
 */                                                                                                                   // 810
var toHexNative = function(str) {                                                                                     // 811
    var hex = "";                                                                                                     // 812
    for(var i = 0; i < str.length; i++) {                                                                             // 813
        var n = str.charCodeAt(i).toString(16);                                                                       // 814
        hex += n.length < 2 ? '0' + n : n;                                                                            // 815
    }                                                                                                                 // 816
                                                                                                                      // 817
    return hex;                                                                                                       // 818
};                                                                                                                    // 819
                                                                                                                      // 820
/**                                                                                                                   // 821
 * Shold be called to get hex representation (prefixed by 0x) of ascii string                                         // 822
 *                                                                                                                    // 823
 * @method fromAscii                                                                                                  // 824
 * @param {String} string                                                                                             // 825
 * @param {Number} optional padding                                                                                   // 826
 * @returns {String} hex representation of input string                                                               // 827
 */                                                                                                                   // 828
var fromAscii = function(str, pad) {                                                                                  // 829
    pad = pad === undefined ? 0 : pad;                                                                                // 830
    var hex = toHexNative(str);                                                                                       // 831
    while (hex.length < pad*2)                                                                                        // 832
        hex += "00";                                                                                                  // 833
    return "0x" + hex;                                                                                                // 834
};                                                                                                                    // 835
                                                                                                                      // 836
/**                                                                                                                   // 837
 * Should be called to get display name of contract function                                                          // 838
 *                                                                                                                    // 839
 * @method extractDisplayName                                                                                         // 840
 * @param {String} name of function/event                                                                             // 841
 * @returns {String} display name for function/event eg. multiply(uint256) -> multiply                                // 842
 */                                                                                                                   // 843
var extractDisplayName = function (name) {                                                                            // 844
    var length = name.indexOf('(');                                                                                   // 845
    return length !== -1 ? name.substr(0, length) : name;                                                             // 846
};                                                                                                                    // 847
                                                                                                                      // 848
/// @returns overloaded part of function/event name                                                                   // 849
var extractTypeName = function (name) {                                                                               // 850
    /// TODO: make it invulnerable                                                                                    // 851
    var length = name.indexOf('(');                                                                                   // 852
    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : "";             // 853
};                                                                                                                    // 854
                                                                                                                      // 855
/**                                                                                                                   // 856
 * Converts value to it's decimal representation in string                                                            // 857
 *                                                                                                                    // 858
 * @method toDecimal                                                                                                  // 859
 * @param {String|Number|BigNumber}                                                                                   // 860
 * @return {String}                                                                                                   // 861
 */                                                                                                                   // 862
var toDecimal = function (value) {                                                                                    // 863
    return toBigNumber(value).toNumber();                                                                             // 864
};                                                                                                                    // 865
                                                                                                                      // 866
/**                                                                                                                   // 867
 * Converts value to it's hex representation                                                                          // 868
 *                                                                                                                    // 869
 * @method fromDecimal                                                                                                // 870
 * @param {String|Number|BigNumber}                                                                                   // 871
 * @return {String}                                                                                                   // 872
 */                                                                                                                   // 873
var fromDecimal = function (value) {                                                                                  // 874
    var number = toBigNumber(value);                                                                                  // 875
    var result = number.toString(16);                                                                                 // 876
                                                                                                                      // 877
    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;                                             // 878
};                                                                                                                    // 879
                                                                                                                      // 880
/**                                                                                                                   // 881
 * Auto converts any given value into it's hex representation.                                                        // 882
 *                                                                                                                    // 883
 * And even stringifys objects before.                                                                                // 884
 *                                                                                                                    // 885
 * @method toHex                                                                                                      // 886
 * @param {String|Number|BigNumber|Object}                                                                            // 887
 * @return {String}                                                                                                   // 888
 */                                                                                                                   // 889
var toHex = function (val) {                                                                                          // 890
    /*jshint maxcomplexity:7 */                                                                                       // 891
                                                                                                                      // 892
    if (isBoolean(val))                                                                                               // 893
        return fromDecimal(+val);                                                                                     // 894
                                                                                                                      // 895
    if (isBigNumber(val))                                                                                             // 896
        return fromDecimal(val);                                                                                      // 897
                                                                                                                      // 898
    if (isObject(val))                                                                                                // 899
        return fromAscii(JSON.stringify(val));                                                                        // 900
                                                                                                                      // 901
    // if its a negative number, pass it through fromDecimal                                                          // 902
    if (isString(val)) {                                                                                              // 903
        if (val.indexOf('-0x') === 0)                                                                                 // 904
           return fromDecimal(val);                                                                                   // 905
        else if (!isFinite(val))                                                                                      // 906
            return fromAscii(val);                                                                                    // 907
    }                                                                                                                 // 908
                                                                                                                      // 909
    return fromDecimal(val);                                                                                          // 910
};                                                                                                                    // 911
                                                                                                                      // 912
/**                                                                                                                   // 913
 * Returns value of unit in Wei                                                                                       // 914
 *                                                                                                                    // 915
 * @method getValueOfUnit                                                                                             // 916
 * @param {String} unit the unit to convert to, default ether                                                         // 917
 * @returns {BigNumber} value of the unit (in Wei)                                                                    // 918
 * @throws error if the unit is not correct:w                                                                         // 919
 */                                                                                                                   // 920
var getValueOfUnit = function (unit) {                                                                                // 921
    unit = unit ? unit.toLowerCase() : 'ether';                                                                       // 922
    var unitValue = unitMap[unit];                                                                                    // 923
    if (unitValue === undefined) {                                                                                    // 924
        throw new Error('This unit doesn\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));
    }                                                                                                                 // 926
    return new BigNumber(unitValue, 10);                                                                              // 927
};                                                                                                                    // 928
                                                                                                                      // 929
/**                                                                                                                   // 930
 * Takes a number of wei and converts it to any other ether unit.                                                     // 931
 *                                                                                                                    // 932
 * Possible units are:                                                                                                // 933
 * - kwei/ada                                                                                                         // 934
 * - mwei/babbage                                                                                                     // 935
 * - gwei/shannon                                                                                                     // 936
 * - szabo                                                                                                            // 937
 * - finney                                                                                                           // 938
 * - ether                                                                                                            // 939
 * - kether/grand/einstein                                                                                            // 940
 * - mether                                                                                                           // 941
 * - gether                                                                                                           // 942
 * - tether                                                                                                           // 943
 *                                                                                                                    // 944
 * @method fromWei                                                                                                    // 945
 * @param {Number|String} number can be a number, number string or a HEX of a decimal                                 // 946
 * @param {String} unit the unit to convert to, default ether                                                         // 947
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                   // 948
*/                                                                                                                    // 949
var fromWei = function(number, unit) {                                                                                // 950
    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));                                            // 951
                                                                                                                      // 952
    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                              // 953
};                                                                                                                    // 954
                                                                                                                      // 955
/**                                                                                                                   // 956
 * Takes a number of a unit and converts it to wei.                                                                   // 957
 *                                                                                                                    // 958
 * Possible units are:                                                                                                // 959
 * - kwei/ada                                                                                                         // 960
 * - mwei/babbage                                                                                                     // 961
 * - gwei/shannon                                                                                                     // 962
 * - szabo                                                                                                            // 963
 * - finney                                                                                                           // 964
 * - ether                                                                                                            // 965
 * - kether/grand/einstein                                                                                            // 966
 * - mether                                                                                                           // 967
 * - gether                                                                                                           // 968
 * - tether                                                                                                           // 969
 *                                                                                                                    // 970
 * @method toWei                                                                                                      // 971
 * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal                       // 972
 * @param {String} unit the unit to convert from, default ether                                                       // 973
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                   // 974
*/                                                                                                                    // 975
var toWei = function(number, unit) {                                                                                  // 976
    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));                                                // 977
                                                                                                                      // 978
    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                              // 979
};                                                                                                                    // 980
                                                                                                                      // 981
/**                                                                                                                   // 982
 * Takes an input and transforms it into an bignumber                                                                 // 983
 *                                                                                                                    // 984
 * @method toBigNumber                                                                                                // 985
 * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber                                         // 986
 * @return {BigNumber} BigNumber                                                                                      // 987
*/                                                                                                                    // 988
var toBigNumber = function(number) {                                                                                  // 989
    /*jshint maxcomplexity:5 */                                                                                       // 990
    number = number || 0;                                                                                             // 991
    if (isBigNumber(number))                                                                                          // 992
        return number;                                                                                                // 993
                                                                                                                      // 994
    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {                            // 995
        return new BigNumber(number.replace('0x',''), 16);                                                            // 996
    }                                                                                                                 // 997
                                                                                                                      // 998
    return new BigNumber(number.toString(10), 10);                                                                    // 999
};                                                                                                                    // 1000
                                                                                                                      // 1001
/**                                                                                                                   // 1002
 * Takes and input transforms it into bignumber and if it is negative value, into two's complement                    // 1003
 *                                                                                                                    // 1004
 * @method toTwosComplement                                                                                           // 1005
 * @param {Number|String|BigNumber}                                                                                   // 1006
 * @return {BigNumber}                                                                                                // 1007
 */                                                                                                                   // 1008
var toTwosComplement = function (number) {                                                                            // 1009
    var bigNumber = toBigNumber(number);                                                                              // 1010
    if (bigNumber.lessThan(0)) {                                                                                      // 1011
        return new BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).plus(bigNumber).plus(1);
    }                                                                                                                 // 1013
    return bigNumber;                                                                                                 // 1014
};                                                                                                                    // 1015
                                                                                                                      // 1016
/**                                                                                                                   // 1017
 * Checks if the given string is strictly an address                                                                  // 1018
 *                                                                                                                    // 1019
 * @method isStrictAddress                                                                                            // 1020
 * @param {String} address the given HEX adress                                                                       // 1021
 * @return {Boolean}                                                                                                  // 1022
*/                                                                                                                    // 1023
var isStrictAddress = function (address) {                                                                            // 1024
    return /^0x[0-9a-f]{40}$/.test(address);                                                                          // 1025
};                                                                                                                    // 1026
                                                                                                                      // 1027
/**                                                                                                                   // 1028
 * Checks if the given string is an address                                                                           // 1029
 *                                                                                                                    // 1030
 * @method isAddress                                                                                                  // 1031
 * @param {String} address the given HEX adress                                                                       // 1032
 * @return {Boolean}                                                                                                  // 1033
*/                                                                                                                    // 1034
var isAddress = function (address) {                                                                                  // 1035
    return /^(0x)?[0-9a-f]{40}$/.test(address);                                                                       // 1036
};                                                                                                                    // 1037
                                                                                                                      // 1038
/**                                                                                                                   // 1039
 * Transforms given string to valid 20 bytes-length addres with 0x prefix                                             // 1040
 *                                                                                                                    // 1041
 * @method toAddress                                                                                                  // 1042
 * @param {String} address                                                                                            // 1043
 * @return {String} formatted address                                                                                 // 1044
 */                                                                                                                   // 1045
var toAddress = function (address) {                                                                                  // 1046
    if (isStrictAddress(address)) {                                                                                   // 1047
        return address;                                                                                               // 1048
    }                                                                                                                 // 1049
                                                                                                                      // 1050
    if (/^[0-9a-f]{40}$/.test(address)) {                                                                             // 1051
        return '0x' + address;                                                                                        // 1052
    }                                                                                                                 // 1053
                                                                                                                      // 1054
    return '0x' + padLeft(toHex(address).substr(2), 40);                                                              // 1055
};                                                                                                                    // 1056
                                                                                                                      // 1057
/**                                                                                                                   // 1058
 * Returns true if object is BigNumber, otherwise false                                                               // 1059
 *                                                                                                                    // 1060
 * @method isBigNumber                                                                                                // 1061
 * @param {Object}                                                                                                    // 1062
 * @return {Boolean}                                                                                                  // 1063
 */                                                                                                                   // 1064
var isBigNumber = function (object) {                                                                                 // 1065
    return object instanceof BigNumber ||                                                                             // 1066
        (object && object.constructor && object.constructor.name === 'BigNumber');                                    // 1067
};                                                                                                                    // 1068
                                                                                                                      // 1069
/**                                                                                                                   // 1070
 * Returns true if object is string, otherwise false                                                                  // 1071
 *                                                                                                                    // 1072
 * @method isString                                                                                                   // 1073
 * @param {Object}                                                                                                    // 1074
 * @return {Boolean}                                                                                                  // 1075
 */                                                                                                                   // 1076
var isString = function (object) {                                                                                    // 1077
    return typeof object === 'string' ||                                                                              // 1078
        (object && object.constructor && object.constructor.name === 'String');                                       // 1079
};                                                                                                                    // 1080
                                                                                                                      // 1081
/**                                                                                                                   // 1082
 * Returns true if object is function, otherwise false                                                                // 1083
 *                                                                                                                    // 1084
 * @method isFunction                                                                                                 // 1085
 * @param {Object}                                                                                                    // 1086
 * @return {Boolean}                                                                                                  // 1087
 */                                                                                                                   // 1088
var isFunction = function (object) {                                                                                  // 1089
    return typeof object === 'function';                                                                              // 1090
};                                                                                                                    // 1091
                                                                                                                      // 1092
/**                                                                                                                   // 1093
 * Returns true if object is Objet, otherwise false                                                                   // 1094
 *                                                                                                                    // 1095
 * @method isObject                                                                                                   // 1096
 * @param {Object}                                                                                                    // 1097
 * @return {Boolean}                                                                                                  // 1098
 */                                                                                                                   // 1099
var isObject = function (object) {                                                                                    // 1100
    return typeof object === 'object';                                                                                // 1101
};                                                                                                                    // 1102
                                                                                                                      // 1103
/**                                                                                                                   // 1104
 * Returns true if object is boolean, otherwise false                                                                 // 1105
 *                                                                                                                    // 1106
 * @method isBoolean                                                                                                  // 1107
 * @param {Object}                                                                                                    // 1108
 * @return {Boolean}                                                                                                  // 1109
 */                                                                                                                   // 1110
var isBoolean = function (object) {                                                                                   // 1111
    return typeof object === 'boolean';                                                                               // 1112
};                                                                                                                    // 1113
                                                                                                                      // 1114
/**                                                                                                                   // 1115
 * Returns true if object is array, otherwise false                                                                   // 1116
 *                                                                                                                    // 1117
 * @method isArray                                                                                                    // 1118
 * @param {Object}                                                                                                    // 1119
 * @return {Boolean}                                                                                                  // 1120
 */                                                                                                                   // 1121
var isArray = function (object) {                                                                                     // 1122
    return object instanceof Array;                                                                                   // 1123
};                                                                                                                    // 1124
                                                                                                                      // 1125
/**                                                                                                                   // 1126
 * Returns true if given string is valid json object                                                                  // 1127
 *                                                                                                                    // 1128
 * @method isJson                                                                                                     // 1129
 * @param {String}                                                                                                    // 1130
 * @return {Boolean}                                                                                                  // 1131
 */                                                                                                                   // 1132
var isJson = function (str) {                                                                                         // 1133
    try {                                                                                                             // 1134
        return !!JSON.parse(str);                                                                                     // 1135
    } catch (e) {                                                                                                     // 1136
        return false;                                                                                                 // 1137
    }                                                                                                                 // 1138
};                                                                                                                    // 1139
                                                                                                                      // 1140
module.exports = {                                                                                                    // 1141
    padLeft: padLeft,                                                                                                 // 1142
    findIndex: findIndex,                                                                                             // 1143
    toHex: toHex,                                                                                                     // 1144
    toDecimal: toDecimal,                                                                                             // 1145
    fromDecimal: fromDecimal,                                                                                         // 1146
    toAscii: toAscii,                                                                                                 // 1147
    fromAscii: fromAscii,                                                                                             // 1148
    extractDisplayName: extractDisplayName,                                                                           // 1149
    extractTypeName: extractTypeName,                                                                                 // 1150
    toWei: toWei,                                                                                                     // 1151
    fromWei: fromWei,                                                                                                 // 1152
    toBigNumber: toBigNumber,                                                                                         // 1153
    toTwosComplement: toTwosComplement,                                                                               // 1154
    toAddress: toAddress,                                                                                             // 1155
    isBigNumber: isBigNumber,                                                                                         // 1156
    isStrictAddress: isStrictAddress,                                                                                 // 1157
    isAddress: isAddress,                                                                                             // 1158
    isFunction: isFunction,                                                                                           // 1159
    isString: isString,                                                                                               // 1160
    isObject: isObject,                                                                                               // 1161
    isBoolean: isBoolean,                                                                                             // 1162
    isArray: isArray,                                                                                                 // 1163
    isJson: isJson                                                                                                    // 1164
};                                                                                                                    // 1165
                                                                                                                      // 1166
                                                                                                                      // 1167
},{"bignumber.js":"bignumber.js"}],8:[function(require,module,exports){                                               // 1168
module.exports={                                                                                                      // 1169
    "version": "0.2.8"                                                                                                // 1170
}                                                                                                                     // 1171
                                                                                                                      // 1172
},{}],9:[function(require,module,exports){                                                                            // 1173
/*                                                                                                                    // 1174
    This file is part of ethereum.js.                                                                                 // 1175
                                                                                                                      // 1176
    ethereum.js is free software: you can redistribute it and/or modify                                               // 1177
    it under the terms of the GNU Lesser General Public License as published by                                       // 1178
    the Free Software Foundation, either version 3 of the License, or                                                 // 1179
    (at your option) any later version.                                                                               // 1180
                                                                                                                      // 1181
    ethereum.js is distributed in the hope that it will be useful,                                                    // 1182
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 1183
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 1184
    GNU Lesser General Public License for more details.                                                               // 1185
                                                                                                                      // 1186
    You should have received a copy of the GNU Lesser General Public License                                          // 1187
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 1188
*/                                                                                                                    // 1189
/** @file web3.js                                                                                                     // 1190
 * @authors:                                                                                                          // 1191
 *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                 // 1192
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 1193
 *   Marian Oancea <marian@ethdev.com>                                                                                // 1194
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                          // 1195
 *   Gav Wood <g@ethdev.com>                                                                                          // 1196
 * @date 2014                                                                                                         // 1197
 */                                                                                                                   // 1198
                                                                                                                      // 1199
var version = require('./version.json');                                                                              // 1200
var net = require('./web3/net');                                                                                      // 1201
var eth = require('./web3/eth');                                                                                      // 1202
var db = require('./web3/db');                                                                                        // 1203
var shh = require('./web3/shh');                                                                                      // 1204
var watches = require('./web3/watches');                                                                              // 1205
var Filter = require('./web3/filter');                                                                                // 1206
var utils = require('./utils/utils');                                                                                 // 1207
var formatters = require('./web3/formatters');                                                                        // 1208
var RequestManager = require('./web3/requestmanager');                                                                // 1209
var c = require('./utils/config');                                                                                    // 1210
var Method = require('./web3/method');                                                                                // 1211
var Property = require('./web3/property');                                                                            // 1212
                                                                                                                      // 1213
var web3Methods = [                                                                                                   // 1214
    new Method({                                                                                                      // 1215
        name: 'sha3',                                                                                                 // 1216
        call: 'web3_sha3',                                                                                            // 1217
        params: 1                                                                                                     // 1218
    })                                                                                                                // 1219
];                                                                                                                    // 1220
                                                                                                                      // 1221
var web3Properties = [                                                                                                // 1222
    new Property({                                                                                                    // 1223
        name: 'version.client',                                                                                       // 1224
        getter: 'web3_clientVersion'                                                                                  // 1225
    }),                                                                                                               // 1226
    new Property({                                                                                                    // 1227
        name: 'version.network',                                                                                      // 1228
        getter: 'net_version',                                                                                        // 1229
        inputFormatter: utils.toDecimal                                                                               // 1230
    }),                                                                                                               // 1231
    new Property({                                                                                                    // 1232
        name: 'version.ethereum',                                                                                     // 1233
        getter: 'eth_protocolVersion',                                                                                // 1234
        inputFormatter: utils.toDecimal                                                                               // 1235
    }),                                                                                                               // 1236
    new Property({                                                                                                    // 1237
        name: 'version.whisper',                                                                                      // 1238
        getter: 'shh_version',                                                                                        // 1239
        inputFormatter: utils.toDecimal                                                                               // 1240
    })                                                                                                                // 1241
];                                                                                                                    // 1242
                                                                                                                      // 1243
/// creates methods in a given object based on method description on input                                            // 1244
/// setups api calls for these methods                                                                                // 1245
var setupMethods = function (obj, methods) {                                                                          // 1246
    methods.forEach(function (method) {                                                                               // 1247
        method.attachToObject(obj);                                                                                   // 1248
    });                                                                                                               // 1249
};                                                                                                                    // 1250
                                                                                                                      // 1251
/// creates properties in a given object based on properties description on input                                     // 1252
/// setups api calls for these properties                                                                             // 1253
var setupProperties = function (obj, properties) {                                                                    // 1254
    properties.forEach(function (property) {                                                                          // 1255
        property.attachToObject(obj);                                                                                 // 1256
    });                                                                                                               // 1257
};                                                                                                                    // 1258
                                                                                                                      // 1259
/// setups web3 object, and it's in-browser executed methods                                                          // 1260
var web3 = {};                                                                                                        // 1261
web3.providers = {};                                                                                                  // 1262
web3.version = {};                                                                                                    // 1263
web3.version.api = version.version;                                                                                   // 1264
web3.eth = {};                                                                                                        // 1265
                                                                                                                      // 1266
/*jshint maxparams:4 */                                                                                               // 1267
web3.eth.filter = function (fil, eventParams, options, formatter) {                                                   // 1268
                                                                                                                      // 1269
    // if its event, treat it differently                                                                             // 1270
    // TODO: simplify and remove                                                                                      // 1271
    if (fil._isEvent) {                                                                                               // 1272
        return fil(eventParams, options);                                                                             // 1273
    }                                                                                                                 // 1274
                                                                                                                      // 1275
    // what outputLogFormatter? that's wrong                                                                          // 1276
    //return new Filter(fil, watches.eth(), formatters.outputLogFormatter);                                           // 1277
    return new Filter(fil, watches.eth(), formatter || formatters.outputLogFormatter);                                // 1278
};                                                                                                                    // 1279
/*jshint maxparams:3 */                                                                                               // 1280
                                                                                                                      // 1281
web3.shh = {};                                                                                                        // 1282
web3.shh.filter = function (fil) {                                                                                    // 1283
    return new Filter(fil, watches.shh(), formatters.outputPostFormatter);                                            // 1284
};                                                                                                                    // 1285
web3.net = {};                                                                                                        // 1286
web3.db = {};                                                                                                         // 1287
web3.setProvider = function (provider) {                                                                              // 1288
    RequestManager.getInstance().setProvider(provider);                                                               // 1289
};                                                                                                                    // 1290
web3.reset = function () {                                                                                            // 1291
    RequestManager.getInstance().reset();                                                                             // 1292
};                                                                                                                    // 1293
web3.toHex = utils.toHex;                                                                                             // 1294
web3.toAscii = utils.toAscii;                                                                                         // 1295
web3.fromAscii = utils.fromAscii;                                                                                     // 1296
web3.toDecimal = utils.toDecimal;                                                                                     // 1297
web3.fromDecimal = utils.fromDecimal;                                                                                 // 1298
web3.toBigNumber = utils.toBigNumber;                                                                                 // 1299
web3.toWei = utils.toWei;                                                                                             // 1300
web3.fromWei = utils.fromWei;                                                                                         // 1301
web3.isAddress = utils.isAddress;                                                                                     // 1302
                                                                                                                      // 1303
// ADD defaultblock                                                                                                   // 1304
Object.defineProperty(web3.eth, 'defaultBlock', {                                                                     // 1305
    get: function () {                                                                                                // 1306
        return c.ETH_DEFAULTBLOCK;                                                                                    // 1307
    },                                                                                                                // 1308
    set: function (val) {                                                                                             // 1309
        c.ETH_DEFAULTBLOCK = val;                                                                                     // 1310
        return c.ETH_DEFAULTBLOCK;                                                                                    // 1311
    }                                                                                                                 // 1312
});                                                                                                                   // 1313
                                                                                                                      // 1314
                                                                                                                      // 1315
/// setups all api methods                                                                                            // 1316
setupMethods(web3, web3Methods);                                                                                      // 1317
setupProperties(web3, web3Properties);                                                                                // 1318
setupMethods(web3.net, net.methods);                                                                                  // 1319
setupProperties(web3.net, net.properties);                                                                            // 1320
setupMethods(web3.eth, eth.methods);                                                                                  // 1321
setupProperties(web3.eth, eth.properties);                                                                            // 1322
setupMethods(web3.db, db.methods);                                                                                    // 1323
setupMethods(web3.shh, shh.methods);                                                                                  // 1324
                                                                                                                      // 1325
module.exports = web3;                                                                                                // 1326
                                                                                                                      // 1327
                                                                                                                      // 1328
},{"./utils/config":6,"./utils/utils":7,"./version.json":8,"./web3/db":11,"./web3/eth":13,"./web3/filter":15,"./web3/formatters":16,"./web3/method":19,"./web3/net":20,"./web3/property":21,"./web3/requestmanager":23,"./web3/shh":24,"./web3/watches":26}],10:[function(require,module,exports){
/*                                                                                                                    // 1330
    This file is part of ethereum.js.                                                                                 // 1331
                                                                                                                      // 1332
    ethereum.js is free software: you can redistribute it and/or modify                                               // 1333
    it under the terms of the GNU Lesser General Public License as published by                                       // 1334
    the Free Software Foundation, either version 3 of the License, or                                                 // 1335
    (at your option) any later version.                                                                               // 1336
                                                                                                                      // 1337
    ethereum.js is distributed in the hope that it will be useful,                                                    // 1338
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 1339
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 1340
    GNU Lesser General Public License for more details.                                                               // 1341
                                                                                                                      // 1342
    You should have received a copy of the GNU Lesser General Public License                                          // 1343
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 1344
*/                                                                                                                    // 1345
/** @file contract.js                                                                                                 // 1346
 * @authors:                                                                                                          // 1347
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 1348
 * @date 2014                                                                                                         // 1349
 */                                                                                                                   // 1350
                                                                                                                      // 1351
var web3 = require('../web3');                                                                                        // 1352
var solAbi = require('../solidity/abi');                                                                              // 1353
var utils = require('../utils/utils');                                                                                // 1354
var solUtils = require('../solidity/utils');                                                                          // 1355
var eventImpl = require('./event');                                                                                   // 1356
var signature = require('./signature');                                                                               // 1357
                                                                                                                      // 1358
var addFunctionRelatedPropertiesToContract = function (contract) {                                                    // 1359
                                                                                                                      // 1360
    contract.call = function (options) {                                                                              // 1361
        contract._isTransaction = false;                                                                              // 1362
        contract._options = options;                                                                                  // 1363
        return contract;                                                                                              // 1364
    };                                                                                                                // 1365
                                                                                                                      // 1366
    contract.sendTransaction = function (options) {                                                                   // 1367
        contract._isTransaction = true;                                                                               // 1368
        contract._options = options;                                                                                  // 1369
        return contract;                                                                                              // 1370
    };                                                                                                                // 1371
};                                                                                                                    // 1372
                                                                                                                      // 1373
var addFunctionsToContract = function (contract, desc, address) {                                                     // 1374
    var inputParser = solAbi.inputParser(desc);                                                                       // 1375
    var outputParser = solAbi.outputParser(desc);                                                                     // 1376
                                                                                                                      // 1377
    // create contract functions                                                                                      // 1378
    solUtils.filterFunctions(desc).forEach(function (method) {                                                        // 1379
                                                                                                                      // 1380
        var displayName = utils.extractDisplayName(method.name);                                                      // 1381
        var typeName = utils.extractTypeName(method.name);                                                            // 1382
                                                                                                                      // 1383
        var impl = function () {                                                                                      // 1384
            /*jshint maxcomplexity:7 */                                                                               // 1385
            var params = Array.prototype.slice.call(arguments);                                                       // 1386
            var sign = signature.functionSignatureFromAscii(method.name);                                             // 1387
            var parsed = inputParser[displayName][typeName].apply(null, params);                                      // 1388
                                                                                                                      // 1389
            var options = contract._options || {};                                                                    // 1390
            options.to = address;                                                                                     // 1391
            options.data = sign + parsed;                                                                             // 1392
                                                                                                                      // 1393
            var isTransaction = contract._isTransaction === true || (contract._isTransaction !== false && !method.constant);
            var collapse = options.collapse !== false;                                                                // 1395
                                                                                                                      // 1396
            // reset                                                                                                  // 1397
            contract._options = {};                                                                                   // 1398
            contract._isTransaction = null;                                                                           // 1399
                                                                                                                      // 1400
            if (isTransaction) {                                                                                      // 1401
                                                                                                                      // 1402
                // transactions do not have any output, cause we do not know, when they will be processed             // 1403
                web3.eth.sendTransaction(options);                                                                    // 1404
                return;                                                                                               // 1405
            }                                                                                                         // 1406
                                                                                                                      // 1407
            var output = web3.eth.call(options);                                                                      // 1408
            var ret = outputParser[displayName][typeName](output);                                                    // 1409
            if (collapse)                                                                                             // 1410
            {                                                                                                         // 1411
                if (ret.length === 1)                                                                                 // 1412
                    ret = ret[0];                                                                                     // 1413
                else if (ret.length === 0)                                                                            // 1414
                    ret = null;                                                                                       // 1415
            }                                                                                                         // 1416
            return ret;                                                                                               // 1417
        };                                                                                                            // 1418
                                                                                                                      // 1419
        if (contract[displayName] === undefined) {                                                                    // 1420
            contract[displayName] = impl;                                                                             // 1421
        }                                                                                                             // 1422
                                                                                                                      // 1423
        contract[displayName][typeName] = impl;                                                                       // 1424
    });                                                                                                               // 1425
};                                                                                                                    // 1426
                                                                                                                      // 1427
var addEventRelatedPropertiesToContract = function (contract, desc, address) {                                        // 1428
    contract.address = address;                                                                                       // 1429
    contract._onWatchEventResult = function (data) {                                                                  // 1430
        var matchingEvent = event.getMatchingEvent(solUtils.filterEvents(desc));                                      // 1431
        var parser = eventImpl.outputParser(matchingEvent);                                                           // 1432
        return parser(data);                                                                                          // 1433
    };                                                                                                                // 1434
                                                                                                                      // 1435
    Object.defineProperty(contract, 'topics', {                                                                       // 1436
        get: function() {                                                                                             // 1437
            return solUtils.filterEvents(desc).map(function (e) {                                                     // 1438
                return signature.eventSignatureFromAscii(e.name);                                                     // 1439
            });                                                                                                       // 1440
        }                                                                                                             // 1441
    });                                                                                                               // 1442
                                                                                                                      // 1443
};                                                                                                                    // 1444
                                                                                                                      // 1445
var addEventsToContract = function (contract, desc, address) {                                                        // 1446
    // create contract events                                                                                         // 1447
    solUtils.filterEvents(desc).forEach(function (e) {                                                                // 1448
                                                                                                                      // 1449
        var impl = function () {                                                                                      // 1450
            var params = Array.prototype.slice.call(arguments);                                                       // 1451
            var sign = signature.eventSignatureFromAscii(e.name);                                                     // 1452
            var event = eventImpl.inputParser(address, sign, e);                                                      // 1453
            var o = event.apply(null, params);                                                                        // 1454
            var outputFormatter = function (data) {                                                                   // 1455
                var parser = eventImpl.outputParser(e);                                                               // 1456
                return parser(data);                                                                                  // 1457
            };                                                                                                        // 1458
            return web3.eth.filter(o, undefined, undefined, outputFormatter);                                         // 1459
        };                                                                                                            // 1460
                                                                                                                      // 1461
        // this property should be used by eth.filter to check if object is an event                                  // 1462
        impl._isEvent = true;                                                                                         // 1463
                                                                                                                      // 1464
        var displayName = utils.extractDisplayName(e.name);                                                           // 1465
        var typeName = utils.extractTypeName(e.name);                                                                 // 1466
                                                                                                                      // 1467
        if (contract[displayName] === undefined) {                                                                    // 1468
            contract[displayName] = impl;                                                                             // 1469
        }                                                                                                             // 1470
                                                                                                                      // 1471
        contract[displayName][typeName] = impl;                                                                       // 1472
                                                                                                                      // 1473
    });                                                                                                               // 1474
};                                                                                                                    // 1475
                                                                                                                      // 1476
                                                                                                                      // 1477
/**                                                                                                                   // 1478
 * This method should be called when we want to call / transact some solidity method from javascript                  // 1479
 * it returns an object which has same methods available as solidity contract description                             // 1480
 * usage example:                                                                                                     // 1481
 *                                                                                                                    // 1482
 * var abi = [{                                                                                                       // 1483
 *      name: 'myMethod',                                                                                             // 1484
 *      inputs: [{ name: 'a', type: 'string' }],                                                                      // 1485
 *      outputs: [{name: 'd', type: 'string' }]                                                                       // 1486
 * }];  // contract abi                                                                                               // 1487
 *                                                                                                                    // 1488
 * var MyContract = web3.eth.contract(abi); // creation of contract prototype                                         // 1489
 *                                                                                                                    // 1490
 * var contractInstance = new MyContract('0x0123123121');                                                             // 1491
 *                                                                                                                    // 1492
 * contractInstance.myMethod('this is test string param for call'); // myMethod call (implicit, default)              // 1493
 * contractInstance.call().myMethod('this is test string param for call'); // myMethod call (explicit)                // 1494
 * contractInstance.sendTransaction().myMethod('this is test string param for transact'); // myMethod sendTransaction // 1495
 *                                                                                                                    // 1496
 * @param abi - abi json description of the contract, which is being created                                          // 1497
 * @returns contract object                                                                                           // 1498
 */                                                                                                                   // 1499
var contract = function (abi) {                                                                                       // 1500
                                                                                                                      // 1501
    // return prototype                                                                                               // 1502
    return Contract.bind(null, abi);                                                                                  // 1503
};                                                                                                                    // 1504
                                                                                                                      // 1505
function Contract(abi, options) {                                                                                     // 1506
                                                                                                                      // 1507
    // workaround for invalid assumption that method.name is the full anonymous prototype of the method.              // 1508
    // it's not. it's just the name. the rest of the code assumes it's actually the anonymous                         // 1509
    // prototype, so we make it so as a workaround.                                                                   // 1510
    // TODO: we may not want to modify input params, maybe use copy instead?                                          // 1511
    abi.forEach(function (method) {                                                                                   // 1512
        if (method.name.indexOf('(') === -1) {                                                                        // 1513
            var displayName = method.name;                                                                            // 1514
            var typeName = method.inputs.map(function(i){return i.type; }).join();                                    // 1515
            method.name = displayName + '(' + typeName + ')';                                                         // 1516
        }                                                                                                             // 1517
    });                                                                                                               // 1518
                                                                                                                      // 1519
    var address = '';                                                                                                 // 1520
    if (utils.isAddress(options)) {                                                                                   // 1521
        address = options;                                                                                            // 1522
    } else { // is a source code!                                                                                     // 1523
        // TODO, parse the rest of the args                                                                           // 1524
        var code = options;                                                                                           // 1525
        var args = Array.prototype.slice.call(arguments, 2);                                                          // 1526
        var bytes = solAbi.formatConstructorParams(abi, args);                                                        // 1527
        address = web3.eth.sendTransaction({data: code + bytes});                                                     // 1528
    }                                                                                                                 // 1529
                                                                                                                      // 1530
    var result = {};                                                                                                  // 1531
    addFunctionRelatedPropertiesToContract(result);                                                                   // 1532
    addFunctionsToContract(result, abi, address);                                                                     // 1533
    addEventRelatedPropertiesToContract(result, abi, address);                                                        // 1534
    addEventsToContract(result, abi, address);                                                                        // 1535
                                                                                                                      // 1536
    return result;                                                                                                    // 1537
}                                                                                                                     // 1538
                                                                                                                      // 1539
module.exports = contract;                                                                                            // 1540
                                                                                                                      // 1541
                                                                                                                      // 1542
},{"../solidity/abi":1,"../solidity/utils":4,"../utils/utils":7,"../web3":9,"./event":14,"./signature":25}],11:[function(require,module,exports){
/*                                                                                                                    // 1544
    This file is part of ethereum.js.                                                                                 // 1545
                                                                                                                      // 1546
    ethereum.js is free software: you can redistribute it and/or modify                                               // 1547
    it under the terms of the GNU Lesser General Public License as published by                                       // 1548
    the Free Software Foundation, either version 3 of the License, or                                                 // 1549
    (at your option) any later version.                                                                               // 1550
                                                                                                                      // 1551
    ethereum.js is distributed in the hope that it will be useful,                                                    // 1552
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 1553
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 1554
    GNU Lesser General Public License for more details.                                                               // 1555
                                                                                                                      // 1556
    You should have received a copy of the GNU Lesser General Public License                                          // 1557
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 1558
*/                                                                                                                    // 1559
/** @file db.js                                                                                                       // 1560
 * @authors:                                                                                                          // 1561
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 1562
 * @date 2015                                                                                                         // 1563
 */                                                                                                                   // 1564
                                                                                                                      // 1565
var Method = require('./method');                                                                                     // 1566
                                                                                                                      // 1567
var putString = new Method({                                                                                          // 1568
    name: 'putString',                                                                                                // 1569
    call: 'db_putString',                                                                                             // 1570
    params: 3                                                                                                         // 1571
});                                                                                                                   // 1572
                                                                                                                      // 1573
                                                                                                                      // 1574
var getString = new Method({                                                                                          // 1575
    name: 'getString',                                                                                                // 1576
    call: 'db_getString',                                                                                             // 1577
    params: 2                                                                                                         // 1578
});                                                                                                                   // 1579
                                                                                                                      // 1580
var putHex = new Method({                                                                                             // 1581
    name: 'putHex',                                                                                                   // 1582
    call: 'db_putHex',                                                                                                // 1583
    params: 3                                                                                                         // 1584
});                                                                                                                   // 1585
                                                                                                                      // 1586
var getHex = new Method({                                                                                             // 1587
    name: 'getHex',                                                                                                   // 1588
    call: 'db_getHex',                                                                                                // 1589
    params: 2                                                                                                         // 1590
});                                                                                                                   // 1591
                                                                                                                      // 1592
var methods = [                                                                                                       // 1593
    putString, getString, putHex, getHex                                                                              // 1594
];                                                                                                                    // 1595
                                                                                                                      // 1596
module.exports = {                                                                                                    // 1597
    methods: methods                                                                                                  // 1598
};                                                                                                                    // 1599
                                                                                                                      // 1600
},{"./method":19}],12:[function(require,module,exports){                                                              // 1601
/*                                                                                                                    // 1602
    This file is part of ethereum.js.                                                                                 // 1603
                                                                                                                      // 1604
    ethereum.js is free software: you can redistribute it and/or modify                                               // 1605
    it under the terms of the GNU Lesser General Public License as published by                                       // 1606
    the Free Software Foundation, either version 3 of the License, or                                                 // 1607
    (at your option) any later version.                                                                               // 1608
                                                                                                                      // 1609
    ethereum.js is distributed in the hope that it will be useful,                                                    // 1610
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 1611
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 1612
    GNU Lesser General Public License for more details.                                                               // 1613
                                                                                                                      // 1614
    You should have received a copy of the GNU Lesser General Public License                                          // 1615
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 1616
*/                                                                                                                    // 1617
/**                                                                                                                   // 1618
 * @file errors.js                                                                                                    // 1619
 * @author Marek Kotewicz <marek@ethdev.com>                                                                          // 1620
 * @date 2015                                                                                                         // 1621
 */                                                                                                                   // 1622
                                                                                                                      // 1623
module.exports = {                                                                                                    // 1624
    InvalidNumberOfParams: function () {                                                                              // 1625
        return new Error('Invalid number of input parameters');                                                       // 1626
    },                                                                                                                // 1627
    InvalidConnection: function (host){                                                                               // 1628
        return new Error('CONNECTION ERROR: Couldn\'t connect to node '+ host +', is it running?');                   // 1629
    },                                                                                                                // 1630
    InvalidProvider: function () {                                                                                    // 1631
        return new Error('Providor not set or invalid');                                                              // 1632
    },                                                                                                                // 1633
    InvalidResponse: function (result){                                                                               // 1634
        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response';
        return new Error(message);                                                                                    // 1636
    }                                                                                                                 // 1637
};                                                                                                                    // 1638
                                                                                                                      // 1639
                                                                                                                      // 1640
},{}],13:[function(require,module,exports){                                                                           // 1641
/*                                                                                                                    // 1642
    This file is part of ethereum.js.                                                                                 // 1643
                                                                                                                      // 1644
    ethereum.js is free software: you can redistribute it and/or modify                                               // 1645
    it under the terms of the GNU Lesser General Public License as published by                                       // 1646
    the Free Software Foundation, either version 3 of the License, or                                                 // 1647
    (at your option) any later version.                                                                               // 1648
                                                                                                                      // 1649
    ethereum.js is distributed in the hope that it will be useful,                                                    // 1650
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 1651
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 1652
    GNU Lesser General Public License for more details.                                                               // 1653
                                                                                                                      // 1654
    You should have received a copy of the GNU Lesser General Public License                                          // 1655
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 1656
*/                                                                                                                    // 1657
/**                                                                                                                   // 1658
 * @file eth.js                                                                                                       // 1659
 * @author Marek Kotewicz <marek@ethdev.com>                                                                          // 1660
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                    // 1661
 * @date 2015                                                                                                         // 1662
 */                                                                                                                   // 1663
                                                                                                                      // 1664
/**                                                                                                                   // 1665
 * Web3                                                                                                               // 1666
 *                                                                                                                    // 1667
 * @module web3                                                                                                       // 1668
 */                                                                                                                   // 1669
                                                                                                                      // 1670
/**                                                                                                                   // 1671
 * Eth methods and properties                                                                                         // 1672
 *                                                                                                                    // 1673
 * An example method object can look as follows:                                                                      // 1674
 *                                                                                                                    // 1675
 *      {                                                                                                             // 1676
 *      name: 'getBlock',                                                                                             // 1677
 *      call: blockCall,                                                                                              // 1678
 *      params: 2,                                                                                                    // 1679
 *      outputFormatter: formatters.outputBlockFormatter,                                                             // 1680
 *      inputFormatter: [ // can be a formatter funciton or an array of functions. Where each item in the array will be used for one parameter
 *           utils.toHex, // formats paramter 1                                                                       // 1682
 *           function(param){ return !!param; } // formats paramter 2                                                 // 1683
 *         ]                                                                                                          // 1684
 *       },                                                                                                           // 1685
 *                                                                                                                    // 1686
 * @class [web3] eth                                                                                                  // 1687
 * @constructor                                                                                                       // 1688
 */                                                                                                                   // 1689
                                                                                                                      // 1690
"use strict";                                                                                                         // 1691
                                                                                                                      // 1692
var formatters = require('./formatters');                                                                             // 1693
var utils = require('../utils/utils');                                                                                // 1694
var Method = require('./method');                                                                                     // 1695
var Property = require('./property');                                                                                 // 1696
                                                                                                                      // 1697
var blockCall = function (args) {                                                                                     // 1698
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";  // 1699
};                                                                                                                    // 1700
                                                                                                                      // 1701
var transactionFromBlockCall = function (args) {                                                                      // 1702
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
};                                                                                                                    // 1704
                                                                                                                      // 1705
var uncleCall = function (args) {                                                                                     // 1706
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
};                                                                                                                    // 1708
                                                                                                                      // 1709
var getBlockTransactionCountCall = function (args) {                                                                  // 1710
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
};                                                                                                                    // 1712
                                                                                                                      // 1713
var uncleCountCall = function (args) {                                                                                // 1714
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
};                                                                                                                    // 1716
                                                                                                                      // 1717
/// @returns an array of objects describing web3.eth api methods                                                      // 1718
                                                                                                                      // 1719
var getBalance = new Method({                                                                                         // 1720
    name: 'getBalance',                                                                                               // 1721
    call: 'eth_getBalance',                                                                                           // 1722
    params: 2,                                                                                                        // 1723
    inputFormatter: [utils.toAddress, formatters.inputDefaultBlockNumberFormatter],                                   // 1724
    outputFormatter: formatters.outputBigNumberFormatter                                                              // 1725
});                                                                                                                   // 1726
                                                                                                                      // 1727
var getStorageAt = new Method({                                                                                       // 1728
    name: 'getStorageAt',                                                                                             // 1729
    call: 'eth_getStorageAt',                                                                                         // 1730
    params: 3,                                                                                                        // 1731
    inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]                                  // 1732
});                                                                                                                   // 1733
                                                                                                                      // 1734
var getCode = new Method({                                                                                            // 1735
    name: 'getCode',                                                                                                  // 1736
    call: 'eth_getCode',                                                                                              // 1737
    params: 2,                                                                                                        // 1738
    inputFormatter: [utils.toAddress, formatters.inputDefaultBlockNumberFormatter]                                    // 1739
});                                                                                                                   // 1740
                                                                                                                      // 1741
var getBlock = new Method({                                                                                           // 1742
    name: 'getBlock',                                                                                                 // 1743
    call: blockCall,                                                                                                  // 1744
    params: 2,                                                                                                        // 1745
    inputFormatter: [utils.toHex, function (val) { return !!val; }],                                                  // 1746
    outputFormatter: formatters.outputBlockFormatter                                                                  // 1747
});                                                                                                                   // 1748
                                                                                                                      // 1749
var getUncle = new Method({                                                                                           // 1750
    name: 'getUncle',                                                                                                 // 1751
    call: uncleCall,                                                                                                  // 1752
    params: 2,                                                                                                        // 1753
    inputFormatter: [utils.toHex, utils.toHex],                                                                       // 1754
    outputFormatter: formatters.outputBlockFormatter,                                                                 // 1755
                                                                                                                      // 1756
});                                                                                                                   // 1757
                                                                                                                      // 1758
var getCompilers = new Method({                                                                                       // 1759
    name: 'getCompilers',                                                                                             // 1760
    call: 'eth_getCompilers',                                                                                         // 1761
    params: 0                                                                                                         // 1762
});                                                                                                                   // 1763
                                                                                                                      // 1764
var getBlockTransactionCount = new Method({                                                                           // 1765
    name: 'getBlockTransactionCount',                                                                                 // 1766
    call: getBlockTransactionCountCall,                                                                               // 1767
    params: 1,                                                                                                        // 1768
    inputFormatter: [formatters.inputBlockNumberFormatter],                                                           // 1769
    outputFormatter: utils.toDecimal                                                                                  // 1770
});                                                                                                                   // 1771
                                                                                                                      // 1772
var getBlockUncleCount = new Method({                                                                                 // 1773
    name: 'getBlockUncleCount',                                                                                       // 1774
    call: uncleCountCall,                                                                                             // 1775
    params: 1,                                                                                                        // 1776
    inputFormatter: [formatters.inputBlockNumberFormatter],                                                           // 1777
    outputFormatter: utils.toDecimal                                                                                  // 1778
});                                                                                                                   // 1779
                                                                                                                      // 1780
var getTransaction = new Method({                                                                                     // 1781
    name: 'getTransaction',                                                                                           // 1782
    call: 'eth_getTransactionByHash',                                                                                 // 1783
    params: 1,                                                                                                        // 1784
    outputFormatter: formatters.outputTransactionFormatter                                                            // 1785
});                                                                                                                   // 1786
                                                                                                                      // 1787
var getTransactionFromBlock = new Method({                                                                            // 1788
    name: 'getTransactionFromBlock',                                                                                  // 1789
    call: transactionFromBlockCall,                                                                                   // 1790
    params: 2,                                                                                                        // 1791
    inputFormatter: [utils.toHex, utils.toHex],                                                                       // 1792
    outputFormatter: formatters.outputTransactionFormatter                                                            // 1793
});                                                                                                                   // 1794
                                                                                                                      // 1795
var getTransactionCount = new Method({                                                                                // 1796
    name: 'getTransactionCount',                                                                                      // 1797
    call: 'eth_getTransactionCount',                                                                                  // 1798
    params: 2,                                                                                                        // 1799
    inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],                                              // 1800
    outputFormatter: utils.toDecimal                                                                                  // 1801
});                                                                                                                   // 1802
                                                                                                                      // 1803
var sendTransaction = new Method({                                                                                    // 1804
    name: 'sendTransaction',                                                                                          // 1805
    call: 'eth_sendTransaction',                                                                                      // 1806
    params: 1,                                                                                                        // 1807
    inputFormatter: [formatters.inputTransactionFormatter]                                                            // 1808
});                                                                                                                   // 1809
                                                                                                                      // 1810
var call = new Method({                                                                                               // 1811
    name: 'call',                                                                                                     // 1812
    call: 'eth_call',                                                                                                 // 1813
    params: 2,                                                                                                        // 1814
    inputFormatter: [formatters.inputTransactionFormatter, formatters.inputDefaultBlockNumberFormatter]               // 1815
});                                                                                                                   // 1816
                                                                                                                      // 1817
var compileSolidity = new Method({                                                                                    // 1818
    name: 'compile.solidity',                                                                                         // 1819
    call: 'eth_compileSolidity',                                                                                      // 1820
    params: 1                                                                                                         // 1821
});                                                                                                                   // 1822
                                                                                                                      // 1823
var compileLLL = new Method({                                                                                         // 1824
    name: 'compile.lll',                                                                                              // 1825
    call: 'eth_compileLLL',                                                                                           // 1826
    params: 1                                                                                                         // 1827
});                                                                                                                   // 1828
                                                                                                                      // 1829
var compileSerpent = new Method({                                                                                     // 1830
    name: 'compile.serpent',                                                                                          // 1831
    call: 'eth_compileSerpent',                                                                                       // 1832
    params: 1                                                                                                         // 1833
});                                                                                                                   // 1834
                                                                                                                      // 1835
var flush = new Method({                                                                                              // 1836
    name: 'flush',                                                                                                    // 1837
    call: 'eth_flush',                                                                                                // 1838
    params: 0                                                                                                         // 1839
});                                                                                                                   // 1840
                                                                                                                      // 1841
var methods = [                                                                                                       // 1842
    getBalance,                                                                                                       // 1843
    getStorageAt,                                                                                                     // 1844
    getCode,                                                                                                          // 1845
    getBlock,                                                                                                         // 1846
    getUncle,                                                                                                         // 1847
    getCompilers,                                                                                                     // 1848
    getBlockTransactionCount,                                                                                         // 1849
    getBlockUncleCount,                                                                                               // 1850
    getTransaction,                                                                                                   // 1851
    getTransactionFromBlock,                                                                                          // 1852
    getTransactionCount,                                                                                              // 1853
    call,                                                                                                             // 1854
    sendTransaction,                                                                                                  // 1855
    compileSolidity,                                                                                                  // 1856
    compileLLL,                                                                                                       // 1857
    compileSerpent,                                                                                                   // 1858
    flush                                                                                                             // 1859
];                                                                                                                    // 1860
                                                                                                                      // 1861
/// @returns an array of objects describing web3.eth api properties                                                   // 1862
                                                                                                                      // 1863
                                                                                                                      // 1864
                                                                                                                      // 1865
var properties = [                                                                                                    // 1866
    new Property({                                                                                                    // 1867
        name: 'coinbase',                                                                                             // 1868
        getter: 'eth_coinbase'                                                                                        // 1869
    }),                                                                                                               // 1870
    new Property({                                                                                                    // 1871
        name: 'mining',                                                                                               // 1872
        getter: 'eth_mining'                                                                                          // 1873
    }),                                                                                                               // 1874
    new Property({                                                                                                    // 1875
        name: 'gasPrice',                                                                                             // 1876
        getter: 'eth_gasPrice',                                                                                       // 1877
        outputFormatter: formatters.outputBigNumberFormatter                                                          // 1878
    }),                                                                                                               // 1879
    new Property({                                                                                                    // 1880
        name: 'accounts',                                                                                             // 1881
        getter: 'eth_accounts'                                                                                        // 1882
    }),                                                                                                               // 1883
    new Property({                                                                                                    // 1884
        name: 'blockNumber',                                                                                          // 1885
        getter: 'eth_blockNumber',                                                                                    // 1886
        outputFormatter: utils.toDecimal                                                                              // 1887
    })                                                                                                                // 1888
];                                                                                                                    // 1889
                                                                                                                      // 1890
module.exports = {                                                                                                    // 1891
    methods: methods,                                                                                                 // 1892
    properties: properties                                                                                            // 1893
};                                                                                                                    // 1894
                                                                                                                      // 1895
                                                                                                                      // 1896
},{"../utils/utils":7,"./formatters":16,"./method":19,"./property":21}],14:[function(require,module,exports){         // 1897
/*                                                                                                                    // 1898
    This file is part of ethereum.js.                                                                                 // 1899
                                                                                                                      // 1900
    ethereum.js is free software: you can redistribute it and/or modify                                               // 1901
    it under the terms of the GNU Lesser General Public License as published by                                       // 1902
    the Free Software Foundation, either version 3 of the License, or                                                 // 1903
    (at your option) any later version.                                                                               // 1904
                                                                                                                      // 1905
    ethereum.js is distributed in the hope that it will be useful,                                                    // 1906
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 1907
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 1908
    GNU Lesser General Public License for more details.                                                               // 1909
                                                                                                                      // 1910
    You should have received a copy of the GNU Lesser General Public License                                          // 1911
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 1912
*/                                                                                                                    // 1913
/** @file event.js                                                                                                    // 1914
 * @authors:                                                                                                          // 1915
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 1916
 * @date 2014                                                                                                         // 1917
 */                                                                                                                   // 1918
                                                                                                                      // 1919
var abi = require('../solidity/abi');                                                                                 // 1920
var utils = require('../utils/utils');                                                                                // 1921
var signature = require('./signature');                                                                               // 1922
                                                                                                                      // 1923
/// filter inputs array && returns only indexed (or not) inputs                                                       // 1924
/// @param inputs array                                                                                               // 1925
/// @param bool if result should be an array of indexed params on not                                                 // 1926
/// @returns array of (not?) indexed params                                                                           // 1927
var filterInputs = function (inputs, indexed) {                                                                       // 1928
    return inputs.filter(function (current) {                                                                         // 1929
        return current.indexed === indexed;                                                                           // 1930
    });                                                                                                               // 1931
};                                                                                                                    // 1932
                                                                                                                      // 1933
var inputWithName = function (inputs, name) {                                                                         // 1934
    var index = utils.findIndex(inputs, function (input) {                                                            // 1935
        return input.name === name;                                                                                   // 1936
    });                                                                                                               // 1937
                                                                                                                      // 1938
    if (index === -1) {                                                                                               // 1939
        console.error('indexed param with name ' + name + ' not found');                                              // 1940
        return undefined;                                                                                             // 1941
    }                                                                                                                 // 1942
    return inputs[index];                                                                                             // 1943
};                                                                                                                    // 1944
                                                                                                                      // 1945
var indexedParamsToTopics = function (event, indexed) {                                                               // 1946
    // sort keys?                                                                                                     // 1947
    return Object.keys(indexed).map(function (key) {                                                                  // 1948
        var inputs = [inputWithName(filterInputs(event.inputs, true), key)];                                          // 1949
                                                                                                                      // 1950
        var value = indexed[key];                                                                                     // 1951
        if (value instanceof Array) {                                                                                 // 1952
            return value.map(function (v) {                                                                           // 1953
                return abi.formatInput(inputs, [v]);                                                                  // 1954
            });                                                                                                       // 1955
        }                                                                                                             // 1956
        return '0x' + abi.formatInput(inputs, [value]);                                                               // 1957
    });                                                                                                               // 1958
};                                                                                                                    // 1959
                                                                                                                      // 1960
var inputParser = function (address, sign, event) {                                                                   // 1961
                                                                                                                      // 1962
    // valid options are 'earliest', 'latest', 'offset' and 'max', as defined for 'eth.filter'                        // 1963
    return function (indexed, options) {                                                                              // 1964
        var o = options || {};                                                                                        // 1965
        o.address = address;                                                                                          // 1966
        o.topics = [];                                                                                                // 1967
        o.topics.push(sign);                                                                                          // 1968
        if (indexed) {                                                                                                // 1969
            o.topics = o.topics.concat(indexedParamsToTopics(event, indexed));                                        // 1970
        }                                                                                                             // 1971
        return o;                                                                                                     // 1972
    };                                                                                                                // 1973
};                                                                                                                    // 1974
                                                                                                                      // 1975
var getArgumentsObject = function (inputs, indexed, notIndexed) {                                                     // 1976
    var indexedCopy = indexed.slice();                                                                                // 1977
    var notIndexedCopy = notIndexed.slice();                                                                          // 1978
    return inputs.reduce(function (acc, current) {                                                                    // 1979
        var value;                                                                                                    // 1980
        if (current.indexed)                                                                                          // 1981
            value = indexedCopy.splice(0, 1)[0];                                                                      // 1982
        else                                                                                                          // 1983
            value = notIndexedCopy.splice(0, 1)[0];                                                                   // 1984
                                                                                                                      // 1985
        acc[current.name] = value;                                                                                    // 1986
        return acc;                                                                                                   // 1987
    }, {});                                                                                                           // 1988
};                                                                                                                    // 1989
                                                                                                                      // 1990
var outputParser = function (event) {                                                                                 // 1991
                                                                                                                      // 1992
    return function (output) {                                                                                        // 1993
        var result = {                                                                                                // 1994
            event: utils.extractDisplayName(event.name),                                                              // 1995
            number: output.number,                                                                                    // 1996
            hash: output.hash,                                                                                        // 1997
            args: {}                                                                                                  // 1998
        };                                                                                                            // 1999
                                                                                                                      // 2000
        if (!output.topics) {                                                                                         // 2001
            return result;                                                                                            // 2002
        }                                                                                                             // 2003
        output.data = output.data || '';                                                                              // 2004
                                                                                                                      // 2005
        var indexedOutputs = filterInputs(event.inputs, true);                                                        // 2006
        var indexedData = "0x" + output.topics.slice(1, output.topics.length).map(function (topics) { return topics.slice(2); }).join("");
        var indexedRes = abi.formatOutput(indexedOutputs, indexedData);                                               // 2008
                                                                                                                      // 2009
        var notIndexedOutputs = filterInputs(event.inputs, false);                                                    // 2010
        var notIndexedRes = abi.formatOutput(notIndexedOutputs, output.data);                                         // 2011
                                                                                                                      // 2012
        result.args = getArgumentsObject(event.inputs, indexedRes, notIndexedRes);                                    // 2013
                                                                                                                      // 2014
        return result;                                                                                                // 2015
    };                                                                                                                // 2016
};                                                                                                                    // 2017
                                                                                                                      // 2018
var getMatchingEvent = function (events, payload) {                                                                   // 2019
    for (var i = 0; i < events.length; i++) {                                                                         // 2020
        var sign = signature.eventSignatureFromAscii(events[i].name);                                                 // 2021
        if (sign === payload.topics[0]) {                                                                             // 2022
            return events[i];                                                                                         // 2023
        }                                                                                                             // 2024
    }                                                                                                                 // 2025
    return undefined;                                                                                                 // 2026
};                                                                                                                    // 2027
                                                                                                                      // 2028
                                                                                                                      // 2029
module.exports = {                                                                                                    // 2030
    inputParser: inputParser,                                                                                         // 2031
    outputParser: outputParser,                                                                                       // 2032
    getMatchingEvent: getMatchingEvent                                                                                // 2033
};                                                                                                                    // 2034
                                                                                                                      // 2035
                                                                                                                      // 2036
},{"../solidity/abi":1,"../utils/utils":7,"./signature":25}],15:[function(require,module,exports){                    // 2037
/*                                                                                                                    // 2038
    This file is part of ethereum.js.                                                                                 // 2039
                                                                                                                      // 2040
    ethereum.js is free software: you can redistribute it and/or modify                                               // 2041
    it under the terms of the GNU Lesser General Public License as published by                                       // 2042
    the Free Software Foundation, either version 3 of the License, or                                                 // 2043
    (at your option) any later version.                                                                               // 2044
                                                                                                                      // 2045
    ethereum.js is distributed in the hope that it will be useful,                                                    // 2046
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 2047
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 2048
    GNU Lesser General Public License for more details.                                                               // 2049
                                                                                                                      // 2050
    You should have received a copy of the GNU Lesser General Public License                                          // 2051
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 2052
*/                                                                                                                    // 2053
/** @file filter.js                                                                                                   // 2054
 * @authors:                                                                                                          // 2055
 *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                 // 2056
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 2057
 *   Marian Oancea <marian@ethdev.com>                                                                                // 2058
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                          // 2059
 *   Gav Wood <g@ethdev.com>                                                                                          // 2060
 * @date 2014                                                                                                         // 2061
 */                                                                                                                   // 2062
                                                                                                                      // 2063
var RequestManager = require('./requestmanager');                                                                     // 2064
var formatters = require('./formatters');                                                                             // 2065
var utils = require('../utils/utils');                                                                                // 2066
                                                                                                                      // 2067
/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones         // 2068
/// @param should be string or object                                                                                 // 2069
/// @returns options string or object                                                                                 // 2070
var getOptions = function (options) {                                                                                 // 2071
                                                                                                                      // 2072
    if (utils.isString(options)) {                                                                                    // 2073
        return options;                                                                                               // 2074
    }                                                                                                                 // 2075
                                                                                                                      // 2076
    options = options || {};                                                                                          // 2077
                                                                                                                      // 2078
    // make sure topics, get converted to hex                                                                         // 2079
    options.topics = options.topics || [];                                                                            // 2080
    options.topics = options.topics.map(function(topic){                                                              // 2081
        return utils.toHex(topic);                                                                                    // 2082
    });                                                                                                               // 2083
                                                                                                                      // 2084
    // lazy load                                                                                                      // 2085
    return {                                                                                                          // 2086
        topics: options.topics,                                                                                       // 2087
        to: options.to,                                                                                               // 2088
        address: options.address,                                                                                     // 2089
        fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),                                           // 2090
        toBlock: formatters.inputBlockNumberFormatter(options.toBlock)                                                // 2091
    };                                                                                                                // 2092
};                                                                                                                    // 2093
                                                                                                                      // 2094
var Filter = function (options, methods, formatter) {                                                                 // 2095
    var implementation = {};                                                                                          // 2096
    methods.forEach(function (method) {                                                                               // 2097
        method.attachToObject(implementation);                                                                        // 2098
    });                                                                                                               // 2099
    this.options = getOptions(options);                                                                               // 2100
    this.implementation = implementation;                                                                             // 2101
    this.callbacks = [];                                                                                              // 2102
    this.formatter = formatter;                                                                                       // 2103
    this.filterId = this.implementation.newFilter(this.options);                                                      // 2104
};                                                                                                                    // 2105
                                                                                                                      // 2106
Filter.prototype.watch = function (callback) {                                                                        // 2107
    this.callbacks.push(callback);                                                                                    // 2108
    var self = this;                                                                                                  // 2109
                                                                                                                      // 2110
    var onMessage = function (error, messages) {                                                                      // 2111
        if (error) {                                                                                                  // 2112
            return self.callbacks.forEach(function (callback) {                                                       // 2113
                callback(error);                                                                                      // 2114
            });                                                                                                       // 2115
        }                                                                                                             // 2116
                                                                                                                      // 2117
        messages.forEach(function (message) {                                                                         // 2118
            message = self.formatter ? self.formatter(message) : message;                                             // 2119
            self.callbacks.forEach(function (callback) {                                                              // 2120
                callback(null, message);                                                                              // 2121
            });                                                                                                       // 2122
        });                                                                                                           // 2123
    };                                                                                                                // 2124
                                                                                                                      // 2125
    // call getFilterLogs on start                                                                                    // 2126
    if (!utils.isString(this.options)) {                                                                              // 2127
        this.get(function (err, messages) {                                                                           // 2128
            // don't send all the responses to all the watches again... just to this one                              // 2129
            if (err) {                                                                                                // 2130
                callback(err);                                                                                        // 2131
            }                                                                                                         // 2132
                                                                                                                      // 2133
            messages.forEach(function (message) {                                                                     // 2134
                callback(null, message);                                                                              // 2135
            });                                                                                                       // 2136
        });                                                                                                           // 2137
    }                                                                                                                 // 2138
                                                                                                                      // 2139
    RequestManager.getInstance().startPolling({                                                                       // 2140
        method: this.implementation.poll.call,                                                                        // 2141
        params: [this.filterId],                                                                                      // 2142
    }, this.filterId, onMessage, this.stopWatching.bind(this));                                                       // 2143
};                                                                                                                    // 2144
                                                                                                                      // 2145
Filter.prototype.stopWatching = function () {                                                                         // 2146
    RequestManager.getInstance().stopPolling(this.filterId);                                                          // 2147
    this.implementation.uninstallFilter(this.filterId);                                                               // 2148
    this.callbacks = [];                                                                                              // 2149
};                                                                                                                    // 2150
                                                                                                                      // 2151
Filter.prototype.get = function (callback) {                                                                          // 2152
    var self = this;                                                                                                  // 2153
    if (utils.isFunction(callback)) {                                                                                 // 2154
        this.implementation.getLogs(this.filterId, function(err, res){                                                // 2155
            if (err) {                                                                                                // 2156
                callback(err);                                                                                        // 2157
            } else {                                                                                                  // 2158
                callback(null, res.map(function (log) {                                                               // 2159
                    return self.formatter ? self.formatter(log) : log;                                                // 2160
                }));                                                                                                  // 2161
            }                                                                                                         // 2162
        });                                                                                                           // 2163
    } else {                                                                                                          // 2164
        var logs = this.implementation.getLogs(this.filterId);                                                        // 2165
        return logs.map(function (log) {                                                                              // 2166
            return self.formatter ? self.formatter(log) : log;                                                        // 2167
        });                                                                                                           // 2168
    }                                                                                                                 // 2169
};                                                                                                                    // 2170
                                                                                                                      // 2171
module.exports = Filter;                                                                                              // 2172
                                                                                                                      // 2173
                                                                                                                      // 2174
},{"../utils/utils":7,"./formatters":16,"./requestmanager":23}],16:[function(require,module,exports){                 // 2175
/*                                                                                                                    // 2176
    This file is part of ethereum.js.                                                                                 // 2177
                                                                                                                      // 2178
    ethereum.js is free software: you can redistribute it and/or modify                                               // 2179
    it under the terms of the GNU Lesser General Public License as published by                                       // 2180
    the Free Software Foundation, either version 3 of the License, or                                                 // 2181
    (at your option) any later version.                                                                               // 2182
                                                                                                                      // 2183
    ethereum.js is distributed in the hope that it will be useful,                                                    // 2184
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 2185
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 2186
    GNU Lesser General Public License for more details.                                                               // 2187
                                                                                                                      // 2188
    You should have received a copy of the GNU Lesser General Public License                                          // 2189
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 2190
*/                                                                                                                    // 2191
/**                                                                                                                   // 2192
 * @file formatters.js                                                                                                // 2193
 * @author Marek Kotewicz <marek@ethdev.com>                                                                          // 2194
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                    // 2195
 * @date 2015                                                                                                         // 2196
 */                                                                                                                   // 2197
                                                                                                                      // 2198
var utils = require('../utils/utils');                                                                                // 2199
var config = require('../utils/config');                                                                              // 2200
                                                                                                                      // 2201
/**                                                                                                                   // 2202
 * Should the format output to a big number                                                                           // 2203
 *                                                                                                                    // 2204
 * @method outputBigNumberFormatter                                                                                   // 2205
 * @param {String|Number|BigNumber}                                                                                   // 2206
 * @returns {BigNumber} object                                                                                        // 2207
 */                                                                                                                   // 2208
var outputBigNumberFormatter = function (number) {                                                                    // 2209
    return utils.toBigNumber(number);                                                                                 // 2210
};                                                                                                                    // 2211
                                                                                                                      // 2212
var isPredefinedBlockNumber = function (blockNumber) {                                                                // 2213
    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';                       // 2214
};                                                                                                                    // 2215
                                                                                                                      // 2216
var inputDefaultBlockNumberFormatter = function (blockNumber) {                                                       // 2217
    if (blockNumber === undefined) {                                                                                  // 2218
        return config.ETH_DEFAULTBLOCK;                                                                               // 2219
    }                                                                                                                 // 2220
    return inputBlockNumberFormatter(blockNumber);                                                                    // 2221
};                                                                                                                    // 2222
                                                                                                                      // 2223
var inputBlockNumberFormatter = function (blockNumber) {                                                              // 2224
    if (blockNumber === undefined) {                                                                                  // 2225
        return undefined;                                                                                             // 2226
    } else if (isPredefinedBlockNumber(blockNumber)) {                                                                // 2227
        return blockNumber;                                                                                           // 2228
    }                                                                                                                 // 2229
    return utils.toHex(blockNumber);                                                                                  // 2230
};                                                                                                                    // 2231
                                                                                                                      // 2232
/**                                                                                                                   // 2233
 * Formats the input of a transaction and converts all values to HEX                                                  // 2234
 *                                                                                                                    // 2235
 * @method inputTransactionFormatter                                                                                  // 2236
 * @param {Object} transaction options                                                                                // 2237
 * @returns object                                                                                                    // 2238
*/                                                                                                                    // 2239
var inputTransactionFormatter = function (options){                                                                   // 2240
                                                                                                                      // 2241
    // make code -> data                                                                                              // 2242
    if (options.code) {                                                                                               // 2243
        options.data = options.code;                                                                                  // 2244
        delete options.code;                                                                                          // 2245
    }                                                                                                                 // 2246
                                                                                                                      // 2247
    ['gasPrice', 'gas', 'value'].filter(function (key) {                                                              // 2248
        return options[key] !== undefined;                                                                            // 2249
    }).forEach(function(key){                                                                                         // 2250
        options[key] = utils.fromDecimal(options[key]);                                                               // 2251
    });                                                                                                               // 2252
                                                                                                                      // 2253
    return options;                                                                                                   // 2254
};                                                                                                                    // 2255
                                                                                                                      // 2256
/**                                                                                                                   // 2257
 * Formats the output of a transaction to its proper values                                                           // 2258
 *                                                                                                                    // 2259
 * @method outputTransactionFormatter                                                                                 // 2260
 * @param {Object} transaction                                                                                        // 2261
 * @returns {Object} transaction                                                                                      // 2262
*/                                                                                                                    // 2263
var outputTransactionFormatter = function (tx){                                                                       // 2264
    tx.blockNumber = utils.toDecimal(tx.blockNumber);                                                                 // 2265
    tx.transactionIndex = utils.toDecimal(tx.transactionIndex);                                                       // 2266
    tx.gas = utils.toDecimal(tx.gas);                                                                                 // 2267
    tx.gasPrice = utils.toBigNumber(tx.gasPrice);                                                                     // 2268
    tx.value = utils.toBigNumber(tx.value);                                                                           // 2269
    return tx;                                                                                                        // 2270
};                                                                                                                    // 2271
                                                                                                                      // 2272
/**                                                                                                                   // 2273
 * Formats the output of a block to its proper values                                                                 // 2274
 *                                                                                                                    // 2275
 * @method outputBlockFormatter                                                                                       // 2276
 * @param {Object} block object                                                                                       // 2277
 * @returns {Object} block object                                                                                     // 2278
*/                                                                                                                    // 2279
var outputBlockFormatter = function(block) {                                                                          // 2280
                                                                                                                      // 2281
    // transform to number                                                                                            // 2282
    block.gasLimit = utils.toDecimal(block.gasLimit);                                                                 // 2283
    block.gasUsed = utils.toDecimal(block.gasUsed);                                                                   // 2284
    block.size = utils.toDecimal(block.size);                                                                         // 2285
    block.timestamp = utils.toDecimal(block.timestamp);                                                               // 2286
    block.number = utils.toDecimal(block.number);                                                                     // 2287
                                                                                                                      // 2288
    block.minGasPrice = utils.toBigNumber(block.minGasPrice);                                                         // 2289
    block.difficulty = utils.toBigNumber(block.difficulty);                                                           // 2290
    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);                                                 // 2291
                                                                                                                      // 2292
    if (utils.isArray(block.transactions)) {                                                                          // 2293
        block.transactions.forEach(function(item){                                                                    // 2294
            if(!utils.isString(item))                                                                                 // 2295
                return outputTransactionFormatter(item);                                                              // 2296
        });                                                                                                           // 2297
    }                                                                                                                 // 2298
                                                                                                                      // 2299
    return block;                                                                                                     // 2300
};                                                                                                                    // 2301
                                                                                                                      // 2302
/**                                                                                                                   // 2303
 * Formats the output of a log                                                                                        // 2304
 *                                                                                                                    // 2305
 * @method outputLogFormatter                                                                                         // 2306
 * @param {Object} log object                                                                                         // 2307
 * @returns {Object} log                                                                                              // 2308
*/                                                                                                                    // 2309
var outputLogFormatter = function(log) {                                                                              // 2310
    if (log === null) { // 'pending' && 'latest' filters are nulls                                                    // 2311
        return null;                                                                                                  // 2312
    }                                                                                                                 // 2313
                                                                                                                      // 2314
    log.blockNumber = utils.toDecimal(log.blockNumber);                                                               // 2315
    log.transactionIndex = utils.toDecimal(log.transactionIndex);                                                     // 2316
    log.logIndex = utils.toDecimal(log.logIndex);                                                                     // 2317
                                                                                                                      // 2318
    return log;                                                                                                       // 2319
};                                                                                                                    // 2320
                                                                                                                      // 2321
/**                                                                                                                   // 2322
 * Formats the input of a whisper post and converts all values to HEX                                                 // 2323
 *                                                                                                                    // 2324
 * @method inputPostFormatter                                                                                         // 2325
 * @param {Object} transaction object                                                                                 // 2326
 * @returns {Object}                                                                                                  // 2327
*/                                                                                                                    // 2328
var inputPostFormatter = function(post) {                                                                             // 2329
                                                                                                                      // 2330
    post.payload = utils.toHex(post.payload);                                                                         // 2331
    post.ttl = utils.fromDecimal(post.ttl);                                                                           // 2332
    post.workToProve = utils.fromDecimal(post.workToProve);                                                           // 2333
    post.priority = utils.fromDecimal(post.priority);                                                                 // 2334
                                                                                                                      // 2335
    // fallback                                                                                                       // 2336
    if (!utils.isArray(post.topics)) {                                                                                // 2337
        post.topics = [post.topics];                                                                                  // 2338
    }                                                                                                                 // 2339
                                                                                                                      // 2340
    // format the following options                                                                                   // 2341
    post.topics = post.topics.map(function(topic){                                                                    // 2342
        return utils.fromAscii(topic);                                                                                // 2343
    });                                                                                                               // 2344
                                                                                                                      // 2345
    return post;                                                                                                      // 2346
};                                                                                                                    // 2347
                                                                                                                      // 2348
/**                                                                                                                   // 2349
 * Formats the output of a received post message                                                                      // 2350
 *                                                                                                                    // 2351
 * @method outputPostFormatter                                                                                        // 2352
 * @param {Object}                                                                                                    // 2353
 * @returns {Object}                                                                                                  // 2354
 */                                                                                                                   // 2355
var outputPostFormatter = function(post){                                                                             // 2356
                                                                                                                      // 2357
    post.expiry = utils.toDecimal(post.expiry);                                                                       // 2358
    post.sent = utils.toDecimal(post.sent);                                                                           // 2359
    post.ttl = utils.toDecimal(post.ttl);                                                                             // 2360
    post.workProved = utils.toDecimal(post.workProved);                                                               // 2361
    post.payloadRaw = post.payload;                                                                                   // 2362
    post.payload = utils.toAscii(post.payload);                                                                       // 2363
                                                                                                                      // 2364
    if (utils.isJson(post.payload)) {                                                                                 // 2365
        post.payload = JSON.parse(post.payload);                                                                      // 2366
    }                                                                                                                 // 2367
                                                                                                                      // 2368
    // format the following options                                                                                   // 2369
    post.topics = post.topics.map(function(topic){                                                                    // 2370
        return utils.toAscii(topic);                                                                                  // 2371
    });                                                                                                               // 2372
                                                                                                                      // 2373
    return post;                                                                                                      // 2374
};                                                                                                                    // 2375
                                                                                                                      // 2376
module.exports = {                                                                                                    // 2377
    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,                                               // 2378
    inputBlockNumberFormatter: inputBlockNumberFormatter,                                                             // 2379
    inputTransactionFormatter: inputTransactionFormatter,                                                             // 2380
    inputPostFormatter: inputPostFormatter,                                                                           // 2381
    outputBigNumberFormatter: outputBigNumberFormatter,                                                               // 2382
    outputTransactionFormatter: outputTransactionFormatter,                                                           // 2383
    outputBlockFormatter: outputBlockFormatter,                                                                       // 2384
    outputLogFormatter: outputLogFormatter,                                                                           // 2385
    outputPostFormatter: outputPostFormatter                                                                          // 2386
};                                                                                                                    // 2387
                                                                                                                      // 2388
                                                                                                                      // 2389
},{"../utils/config":6,"../utils/utils":7}],17:[function(require,module,exports){                                     // 2390
/*                                                                                                                    // 2391
    This file is part of ethereum.js.                                                                                 // 2392
                                                                                                                      // 2393
    ethereum.js is free software: you can redistribute it and/or modify                                               // 2394
    it under the terms of the GNU Lesser General Public License as published by                                       // 2395
    the Free Software Foundation, either version 3 of the License, or                                                 // 2396
    (at your option) any later version.                                                                               // 2397
                                                                                                                      // 2398
    ethereum.js is distributed in the hope that it will be useful,                                                    // 2399
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 2400
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 2401
    GNU Lesser General Public License for more details.                                                               // 2402
                                                                                                                      // 2403
    You should have received a copy of the GNU Lesser General Public License                                          // 2404
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 2405
*/                                                                                                                    // 2406
/** @file httpprovider.js                                                                                             // 2407
 * @authors:                                                                                                          // 2408
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 2409
 *   Marian Oancea <marian@ethdev.com>                                                                                // 2410
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                          // 2411
 * @date 2014                                                                                                         // 2412
 */                                                                                                                   // 2413
                                                                                                                      // 2414
"use strict";                                                                                                         // 2415
                                                                                                                      // 2416
var XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore:line                                  // 2417
var errors = require('./errors');                                                                                     // 2418
                                                                                                                      // 2419
var HttpProvider = function (host) {                                                                                  // 2420
    this.host = host || 'http://localhost:8080';                                                                      // 2421
};                                                                                                                    // 2422
                                                                                                                      // 2423
HttpProvider.prototype.send = function (payload) {                                                                    // 2424
    var request = new XMLHttpRequest();                                                                               // 2425
                                                                                                                      // 2426
    request.open('POST', this.host, false);                                                                           // 2427
                                                                                                                      // 2428
    try {                                                                                                             // 2429
        request.send(JSON.stringify(payload));                                                                        // 2430
    } catch(error) {                                                                                                  // 2431
        throw errors.InvalidConnection(this.host);                                                                    // 2432
    }                                                                                                                 // 2433
                                                                                                                      // 2434
                                                                                                                      // 2435
    // check request.status                                                                                           // 2436
    // TODO: throw an error here! it cannot silently fail!!!                                                          // 2437
    //if (request.status !== 200) {                                                                                   // 2438
        //return;                                                                                                     // 2439
    //}                                                                                                               // 2440
    return JSON.parse(request.responseText);                                                                          // 2441
};                                                                                                                    // 2442
                                                                                                                      // 2443
HttpProvider.prototype.sendAsync = function (payload, callback) {                                                     // 2444
    var request = new XMLHttpRequest();                                                                               // 2445
    request.onreadystatechange = function() {                                                                         // 2446
        if (request.readyState === 4) {                                                                               // 2447
            // TODO: handle the error properly here!!!                                                                // 2448
            callback(null, JSON.parse(request.responseText));                                                         // 2449
        }                                                                                                             // 2450
    };                                                                                                                // 2451
                                                                                                                      // 2452
    request.open('POST', this.host, true);                                                                            // 2453
                                                                                                                      // 2454
    try {                                                                                                             // 2455
        request.send(JSON.stringify(payload));                                                                        // 2456
    } catch(error) {                                                                                                  // 2457
        callback(errors.InvalidConnection(this.host));                                                                // 2458
    }                                                                                                                 // 2459
};                                                                                                                    // 2460
                                                                                                                      // 2461
module.exports = HttpProvider;                                                                                        // 2462
                                                                                                                      // 2463
                                                                                                                      // 2464
},{"./errors":12,"xmlhttprequest":5}],18:[function(require,module,exports){                                           // 2465
/*                                                                                                                    // 2466
    This file is part of ethereum.js.                                                                                 // 2467
                                                                                                                      // 2468
    ethereum.js is free software: you can redistribute it and/or modify                                               // 2469
    it under the terms of the GNU Lesser General Public License as published by                                       // 2470
    the Free Software Foundation, either version 3 of the License, or                                                 // 2471
    (at your option) any later version.                                                                               // 2472
                                                                                                                      // 2473
    ethereum.js is distributed in the hope that it will be useful,                                                    // 2474
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 2475
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 2476
    GNU Lesser General Public License for more details.                                                               // 2477
                                                                                                                      // 2478
    You should have received a copy of the GNU Lesser General Public License                                          // 2479
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 2480
*/                                                                                                                    // 2481
/** @file jsonrpc.js                                                                                                  // 2482
 * @authors:                                                                                                          // 2483
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 2484
 * @date 2015                                                                                                         // 2485
 */                                                                                                                   // 2486
                                                                                                                      // 2487
var Jsonrpc = function () {                                                                                           // 2488
    // singleton pattern                                                                                              // 2489
    if (arguments.callee._singletonInstance) {                                                                        // 2490
        return arguments.callee._singletonInstance;                                                                   // 2491
    }                                                                                                                 // 2492
    arguments.callee._singletonInstance = this;                                                                       // 2493
                                                                                                                      // 2494
    this.messageId = 1;                                                                                               // 2495
};                                                                                                                    // 2496
                                                                                                                      // 2497
/**                                                                                                                   // 2498
 * @return {Jsonrpc} singleton                                                                                        // 2499
 */                                                                                                                   // 2500
Jsonrpc.getInstance = function () {                                                                                   // 2501
    var instance = new Jsonrpc();                                                                                     // 2502
    return instance;                                                                                                  // 2503
};                                                                                                                    // 2504
                                                                                                                      // 2505
/**                                                                                                                   // 2506
 * Should be called to valid json create payload object                                                               // 2507
 *                                                                                                                    // 2508
 * @method toPayload                                                                                                  // 2509
 * @param {Function} method of jsonrpc call, required                                                                 // 2510
 * @param {Array} params, an array of method params, optional                                                         // 2511
 * @returns {Object} valid jsonrpc payload object                                                                     // 2512
 */                                                                                                                   // 2513
Jsonrpc.prototype.toPayload = function (method, params) {                                                             // 2514
    if (!method)                                                                                                      // 2515
        console.error('jsonrpc method should be specified!');                                                         // 2516
                                                                                                                      // 2517
    return {                                                                                                          // 2518
        jsonrpc: '2.0',                                                                                               // 2519
        method: method,                                                                                               // 2520
        params: params || [],                                                                                         // 2521
        id: this.messageId++                                                                                          // 2522
    };                                                                                                                // 2523
};                                                                                                                    // 2524
                                                                                                                      // 2525
/**                                                                                                                   // 2526
 * Should be called to check if jsonrpc response is valid                                                             // 2527
 *                                                                                                                    // 2528
 * @method isValidResponse                                                                                            // 2529
 * @param {Object}                                                                                                    // 2530
 * @returns {Boolean} true if response is valid, otherwise false                                                      // 2531
 */                                                                                                                   // 2532
Jsonrpc.prototype.isValidResponse = function (response) {                                                             // 2533
    return !!response &&                                                                                              // 2534
        !response.error &&                                                                                            // 2535
        response.jsonrpc === '2.0' &&                                                                                 // 2536
        typeof response.id === 'number' &&                                                                            // 2537
        response.result !== undefined; // only undefined is not valid json object                                     // 2538
};                                                                                                                    // 2539
                                                                                                                      // 2540
/**                                                                                                                   // 2541
 * Should be called to create batch payload object                                                                    // 2542
 *                                                                                                                    // 2543
 * @method toBatchPayload                                                                                             // 2544
 * @param {Array} messages, an array of objects with method (required) and params (optional) fields                   // 2545
 * @returns {Array} batch payload                                                                                     // 2546
 */                                                                                                                   // 2547
Jsonrpc.prototype.toBatchPayload = function (messages) {                                                              // 2548
    var self = this;                                                                                                  // 2549
    return messages.map(function (message) {                                                                          // 2550
        return self.toPayload(message.method, message.params);                                                        // 2551
    });                                                                                                               // 2552
};                                                                                                                    // 2553
                                                                                                                      // 2554
module.exports = Jsonrpc;                                                                                             // 2555
                                                                                                                      // 2556
                                                                                                                      // 2557
},{}],19:[function(require,module,exports){                                                                           // 2558
/*                                                                                                                    // 2559
    This file is part of ethereum.js.                                                                                 // 2560
                                                                                                                      // 2561
    ethereum.js is free software: you can redistribute it and/or modify                                               // 2562
    it under the terms of the GNU Lesser General Public License as published by                                       // 2563
    the Free Software Foundation, either version 3 of the License, or                                                 // 2564
    (at your option) any later version.                                                                               // 2565
                                                                                                                      // 2566
    ethereum.js is distributed in the hope that it will be useful,                                                    // 2567
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 2568
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 2569
    GNU Lesser General Public License for more details.                                                               // 2570
                                                                                                                      // 2571
    You should have received a copy of the GNU Lesser General Public License                                          // 2572
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 2573
*/                                                                                                                    // 2574
/**                                                                                                                   // 2575
 * @file method.js                                                                                                    // 2576
 * @author Marek Kotewicz <marek@ethdev.com>                                                                          // 2577
 * @date 2015                                                                                                         // 2578
 */                                                                                                                   // 2579
                                                                                                                      // 2580
var RequestManager = require('./requestmanager');                                                                     // 2581
var utils = require('../utils/utils');                                                                                // 2582
var errors = require('./errors');                                                                                     // 2583
                                                                                                                      // 2584
var Method = function (options) {                                                                                     // 2585
    this.name = options.name;                                                                                         // 2586
    this.call = options.call;                                                                                         // 2587
    this.params = options.params || 0;                                                                                // 2588
    this.inputFormatter = options.inputFormatter;                                                                     // 2589
    this.outputFormatter = options.outputFormatter;                                                                   // 2590
};                                                                                                                    // 2591
                                                                                                                      // 2592
/**                                                                                                                   // 2593
 * Should be used to determine name of the jsonrpc method based on arguments                                          // 2594
 *                                                                                                                    // 2595
 * @method getCall                                                                                                    // 2596
 * @param {Array} arguments                                                                                           // 2597
 * @return {String} name of jsonrpc method                                                                            // 2598
 */                                                                                                                   // 2599
Method.prototype.getCall = function (args) {                                                                          // 2600
    return utils.isFunction(this.call) ? this.call(args) : this.call;                                                 // 2601
};                                                                                                                    // 2602
                                                                                                                      // 2603
/**                                                                                                                   // 2604
 * Should be used to extract callback from array of arguments. Modifies input param                                   // 2605
 *                                                                                                                    // 2606
 * @method extractCallback                                                                                            // 2607
 * @param {Array} arguments                                                                                           // 2608
 * @return {Function|Null} callback, if exists                                                                        // 2609
 */                                                                                                                   // 2610
Method.prototype.extractCallback = function (args) {                                                                  // 2611
    if (utils.isFunction(args[args.length - 1])) {                                                                    // 2612
        return args.pop(); // modify the args array!                                                                  // 2613
    }                                                                                                                 // 2614
    return null;                                                                                                      // 2615
};                                                                                                                    // 2616
                                                                                                                      // 2617
/**                                                                                                                   // 2618
 * Should be called to check if the number of arguments is correct                                                    // 2619
 *                                                                                                                    // 2620
 * @method validateArgs                                                                                               // 2621
 * @param {Array} arguments                                                                                           // 2622
 * @throws {Error} if it is not                                                                                       // 2623
 */                                                                                                                   // 2624
Method.prototype.validateArgs = function (args) {                                                                     // 2625
    if (args.length !== this.params) {                                                                                // 2626
        throw errors.InvalidNumberOfParams();                                                                         // 2627
    }                                                                                                                 // 2628
};                                                                                                                    // 2629
                                                                                                                      // 2630
/**                                                                                                                   // 2631
 * Should be called to format input args of method                                                                    // 2632
 *                                                                                                                    // 2633
 * @method formatInput                                                                                                // 2634
 * @param {Array}                                                                                                     // 2635
 * @return {Array}                                                                                                    // 2636
 */                                                                                                                   // 2637
Method.prototype.formatInput = function (args) {                                                                      // 2638
    if (!this.inputFormatter) {                                                                                       // 2639
        return args;                                                                                                  // 2640
    }                                                                                                                 // 2641
                                                                                                                      // 2642
    return this.inputFormatter.map(function (formatter, index) {                                                      // 2643
        return formatter ? formatter(args[index]) : args[index];                                                      // 2644
    });                                                                                                               // 2645
};                                                                                                                    // 2646
                                                                                                                      // 2647
/**                                                                                                                   // 2648
 * Should be called to format output(result) of method                                                                // 2649
 *                                                                                                                    // 2650
 * @method formatOutput                                                                                               // 2651
 * @param {Object}                                                                                                    // 2652
 * @return {Object}                                                                                                   // 2653
 */                                                                                                                   // 2654
Method.prototype.formatOutput = function (result) {                                                                   // 2655
    return this.outputFormatter && result !== null ? this.outputFormatter(result) : result;                           // 2656
};                                                                                                                    // 2657
                                                                                                                      // 2658
/**                                                                                                                   // 2659
 * Should attach function to method                                                                                   // 2660
 *                                                                                                                    // 2661
 * @method attachToObject                                                                                             // 2662
 * @param {Object}                                                                                                    // 2663
 * @param {Function}                                                                                                  // 2664
 */                                                                                                                   // 2665
Method.prototype.attachToObject = function (obj) {                                                                    // 2666
    var func = this.send.bind(this);                                                                                  // 2667
    func.call = this.call; // that's ugly. filter.js uses it                                                          // 2668
    var name = this.name.split('.');                                                                                  // 2669
    if (name.length > 1) {                                                                                            // 2670
        obj[name[0]] = obj[name[0]] || {};                                                                            // 2671
        obj[name[0]][name[1]] = func;                                                                                 // 2672
    } else {                                                                                                          // 2673
        obj[name[0]] = func;                                                                                          // 2674
    }                                                                                                                 // 2675
};                                                                                                                    // 2676
                                                                                                                      // 2677
/**                                                                                                                   // 2678
 * Should create payload from given input args                                                                        // 2679
 *                                                                                                                    // 2680
 * @method toPayload                                                                                                  // 2681
 * @param {Array} args                                                                                                // 2682
 * @return {Object}                                                                                                   // 2683
 */                                                                                                                   // 2684
Method.prototype.toPayload = function (args) {                                                                        // 2685
    var call = this.getCall(args);                                                                                    // 2686
    var callback = this.extractCallback(args);                                                                        // 2687
    var params = this.formatInput(args);                                                                              // 2688
    this.validateArgs(params);                                                                                        // 2689
                                                                                                                      // 2690
    return {                                                                                                          // 2691
        method: call,                                                                                                 // 2692
        params: params,                                                                                               // 2693
        callback: callback                                                                                            // 2694
    };                                                                                                                // 2695
};                                                                                                                    // 2696
                                                                                                                      // 2697
/**                                                                                                                   // 2698
 * Should send request to the API                                                                                     // 2699
 *                                                                                                                    // 2700
 * @method send                                                                                                       // 2701
 * @param list of params                                                                                              // 2702
 * @return result                                                                                                     // 2703
 */                                                                                                                   // 2704
Method.prototype.send = function () {                                                                                 // 2705
    var payload = this.toPayload(Array.prototype.slice.call(arguments));                                              // 2706
    if (payload.callback) {                                                                                           // 2707
        var self = this;                                                                                              // 2708
        return RequestManager.getInstance().sendAsync(payload, function (err, result) {                               // 2709
            payload.callback(null, self.formatOutput(result));                                                        // 2710
        });                                                                                                           // 2711
    }                                                                                                                 // 2712
    return this.formatOutput(RequestManager.getInstance().send(payload));                                             // 2713
};                                                                                                                    // 2714
                                                                                                                      // 2715
module.exports = Method;                                                                                              // 2716
                                                                                                                      // 2717
                                                                                                                      // 2718
},{"../utils/utils":7,"./errors":12,"./requestmanager":23}],20:[function(require,module,exports){                     // 2719
/*                                                                                                                    // 2720
    This file is part of ethereum.js.                                                                                 // 2721
                                                                                                                      // 2722
    ethereum.js is free software: you can redistribute it and/or modify                                               // 2723
    it under the terms of the GNU Lesser General Public License as published by                                       // 2724
    the Free Software Foundation, either version 3 of the License, or                                                 // 2725
    (at your option) any later version.                                                                               // 2726
                                                                                                                      // 2727
    ethereum.js is distributed in the hope that it will be useful,                                                    // 2728
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 2729
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 2730
    GNU Lesser General Public License for more details.                                                               // 2731
                                                                                                                      // 2732
    You should have received a copy of the GNU Lesser General Public License                                          // 2733
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 2734
*/                                                                                                                    // 2735
/** @file eth.js                                                                                                      // 2736
 * @authors:                                                                                                          // 2737
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 2738
 * @date 2015                                                                                                         // 2739
 */                                                                                                                   // 2740
                                                                                                                      // 2741
var utils = require('../utils/utils');                                                                                // 2742
var Property = require('./property');                                                                                 // 2743
                                                                                                                      // 2744
/// @returns an array of objects describing web3.eth api methods                                                      // 2745
var methods = [                                                                                                       // 2746
];                                                                                                                    // 2747
                                                                                                                      // 2748
/// @returns an array of objects describing web3.eth api properties                                                   // 2749
var properties = [                                                                                                    // 2750
    new Property({                                                                                                    // 2751
        name: 'listening',                                                                                            // 2752
        getter: 'net_listening'                                                                                       // 2753
    }),                                                                                                               // 2754
    new Property({                                                                                                    // 2755
        name: 'peerCount',                                                                                            // 2756
        getter: 'net_peerCount',                                                                                      // 2757
        outputFormatter: utils.toDecimal                                                                              // 2758
    })                                                                                                                // 2759
];                                                                                                                    // 2760
                                                                                                                      // 2761
                                                                                                                      // 2762
module.exports = {                                                                                                    // 2763
    methods: methods,                                                                                                 // 2764
    properties: properties                                                                                            // 2765
};                                                                                                                    // 2766
                                                                                                                      // 2767
                                                                                                                      // 2768
},{"../utils/utils":7,"./property":21}],21:[function(require,module,exports){                                         // 2769
/*                                                                                                                    // 2770
    This file is part of ethereum.js.                                                                                 // 2771
                                                                                                                      // 2772
    ethereum.js is free software: you can redistribute it and/or modify                                               // 2773
    it under the terms of the GNU Lesser General Public License as published by                                       // 2774
    the Free Software Foundation, either version 3 of the License, or                                                 // 2775
    (at your option) any later version.                                                                               // 2776
                                                                                                                      // 2777
    ethereum.js is distributed in the hope that it will be useful,                                                    // 2778
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 2779
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 2780
    GNU Lesser General Public License for more details.                                                               // 2781
                                                                                                                      // 2782
    You should have received a copy of the GNU Lesser General Public License                                          // 2783
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 2784
*/                                                                                                                    // 2785
/**                                                                                                                   // 2786
 * @file property.js                                                                                                  // 2787
 * @author Fabian Vogelsteller <fabian@frozeman.de>                                                                   // 2788
 * @author Marek Kotewicz <marek@ethdev.com>                                                                          // 2789
 * @date 2015                                                                                                         // 2790
 */                                                                                                                   // 2791
                                                                                                                      // 2792
var RequestManager = require('./requestmanager');                                                                     // 2793
                                                                                                                      // 2794
var Property = function (options) {                                                                                   // 2795
    this.name = options.name;                                                                                         // 2796
    this.getter = options.getter;                                                                                     // 2797
    this.setter = options.setter;                                                                                     // 2798
    this.outputFormatter = options.outputFormatter;                                                                   // 2799
    this.inputFormatter = options.inputFormatter;                                                                     // 2800
};                                                                                                                    // 2801
                                                                                                                      // 2802
/**                                                                                                                   // 2803
 * Should be called to format input args of method                                                                    // 2804
 *                                                                                                                    // 2805
 * @method formatInput                                                                                                // 2806
 * @param {Array}                                                                                                     // 2807
 * @return {Array}                                                                                                    // 2808
 */                                                                                                                   // 2809
Property.prototype.formatInput = function (arg) {                                                                     // 2810
    return this.inputFormatter ? this.inputFormatter(arg) : arg;                                                      // 2811
};                                                                                                                    // 2812
                                                                                                                      // 2813
/**                                                                                                                   // 2814
 * Should be called to format output(result) of method                                                                // 2815
 *                                                                                                                    // 2816
 * @method formatOutput                                                                                               // 2817
 * @param {Object}                                                                                                    // 2818
 * @return {Object}                                                                                                   // 2819
 */                                                                                                                   // 2820
Property.prototype.formatOutput = function (result) {                                                                 // 2821
    return this.outputFormatter && result !== null ? this.outputFormatter(result) : result;                           // 2822
};                                                                                                                    // 2823
                                                                                                                      // 2824
/**                                                                                                                   // 2825
 * Should attach function to method                                                                                   // 2826
 *                                                                                                                    // 2827
 * @method attachToObject                                                                                             // 2828
 * @param {Object}                                                                                                    // 2829
 * @param {Function}                                                                                                  // 2830
 */                                                                                                                   // 2831
Property.prototype.attachToObject = function (obj) {                                                                  // 2832
    var proto = {                                                                                                     // 2833
        get: this.get.bind(this),                                                                                     // 2834
        set: this.set.bind(this)                                                                                      // 2835
    };                                                                                                                // 2836
                                                                                                                      // 2837
    var name = this.name.split('.');                                                                                  // 2838
    if (name.length > 1) {                                                                                            // 2839
        obj[name[0]] = obj[name[0]] || {};                                                                            // 2840
        Object.defineProperty(obj[name[0]], name[1], proto);                                                          // 2841
    } else {                                                                                                          // 2842
        Object.defineProperty(obj, name[0], proto);                                                                   // 2843
    }                                                                                                                 // 2844
};                                                                                                                    // 2845
                                                                                                                      // 2846
/**                                                                                                                   // 2847
 * Should be used to get value of the property                                                                        // 2848
 *                                                                                                                    // 2849
 * @method get                                                                                                        // 2850
 * @return {Object} value of the property                                                                             // 2851
 */                                                                                                                   // 2852
Property.prototype.get = function () {                                                                                // 2853
    return this.formatOutput(RequestManager.getInstance().send({                                                      // 2854
        method: this.getter                                                                                           // 2855
    }));                                                                                                              // 2856
};                                                                                                                    // 2857
                                                                                                                      // 2858
/**                                                                                                                   // 2859
 * Should be used to set value of the property                                                                        // 2860
 *                                                                                                                    // 2861
 * @method set                                                                                                        // 2862
 * @param {Object} new value of the property                                                                          // 2863
 */                                                                                                                   // 2864
Property.prototype.set = function (value) {                                                                           // 2865
    return RequestManager.getInstance().send({                                                                        // 2866
        method: this.setter,                                                                                          // 2867
        params: [this.formatInput(value)]                                                                             // 2868
    });                                                                                                               // 2869
};                                                                                                                    // 2870
                                                                                                                      // 2871
module.exports = Property;                                                                                            // 2872
                                                                                                                      // 2873
                                                                                                                      // 2874
},{"./requestmanager":23}],22:[function(require,module,exports){                                                      // 2875
/*                                                                                                                    // 2876
    This file is part of ethereum.js.                                                                                 // 2877
                                                                                                                      // 2878
    ethereum.js is free software: you can redistribute it and/or modify                                               // 2879
    it under the terms of the GNU Lesser General Public License as published by                                       // 2880
    the Free Software Foundation, either version 3 of the License, or                                                 // 2881
    (at your option) any later version.                                                                               // 2882
                                                                                                                      // 2883
    ethereum.js is distributed in the hope that it will be useful,                                                    // 2884
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 2885
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 2886
    GNU Lesser General Public License for more details.                                                               // 2887
                                                                                                                      // 2888
    You should have received a copy of the GNU Lesser General Public License                                          // 2889
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 2890
*/                                                                                                                    // 2891
/** @file qtsync.js                                                                                                   // 2892
 * @authors:                                                                                                          // 2893
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 2894
 *   Marian Oancea <marian@ethdev.com>                                                                                // 2895
 * @date 2014                                                                                                         // 2896
 */                                                                                                                   // 2897
                                                                                                                      // 2898
var QtSyncProvider = function () {                                                                                    // 2899
};                                                                                                                    // 2900
                                                                                                                      // 2901
QtSyncProvider.prototype.send = function (payload) {                                                                  // 2902
    var result = navigator.qt.callMethod(JSON.stringify(payload));                                                    // 2903
    return JSON.parse(result);                                                                                        // 2904
};                                                                                                                    // 2905
                                                                                                                      // 2906
module.exports = QtSyncProvider;                                                                                      // 2907
                                                                                                                      // 2908
                                                                                                                      // 2909
},{}],23:[function(require,module,exports){                                                                           // 2910
/*                                                                                                                    // 2911
    This file is part of ethereum.js.                                                                                 // 2912
                                                                                                                      // 2913
    ethereum.js is free software: you can redistribute it and/or modify                                               // 2914
    it under the terms of the GNU Lesser General Public License as published by                                       // 2915
    the Free Software Foundation, either version 3 of the License, or                                                 // 2916
    (at your option) any later version.                                                                               // 2917
                                                                                                                      // 2918
    ethereum.js is distributed in the hope that it will be useful,                                                    // 2919
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 2920
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 2921
    GNU Lesser General Public License for more details.                                                               // 2922
                                                                                                                      // 2923
    You should have received a copy of the GNU Lesser General Public License                                          // 2924
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 2925
*/                                                                                                                    // 2926
/**                                                                                                                   // 2927
 * @file requestmanager.js                                                                                            // 2928
 * @author Jeffrey Wilcke <jeff@ethdev.com>                                                                           // 2929
 * @author Marek Kotewicz <marek@ethdev.com>                                                                          // 2930
 * @author Marian Oancea <marian@ethdev.com>                                                                          // 2931
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                    // 2932
 * @author Gav Wood <g@ethdev.com>                                                                                    // 2933
 * @date 2014                                                                                                         // 2934
 */                                                                                                                   // 2935
                                                                                                                      // 2936
var Jsonrpc = require('./jsonrpc');                                                                                   // 2937
var utils = require('../utils/utils');                                                                                // 2938
var c = require('../utils/config');                                                                                   // 2939
var errors = require('./errors');                                                                                     // 2940
                                                                                                                      // 2941
/**                                                                                                                   // 2942
 * It's responsible for passing messages to providers                                                                 // 2943
 * It's also responsible for polling the ethereum node for incoming messages                                          // 2944
 * Default poll timeout is 1 second                                                                                   // 2945
 * Singleton                                                                                                          // 2946
 */                                                                                                                   // 2947
var RequestManager = function (provider) {                                                                            // 2948
    // singleton pattern                                                                                              // 2949
    if (arguments.callee._singletonInstance) {                                                                        // 2950
        return arguments.callee._singletonInstance;                                                                   // 2951
    }                                                                                                                 // 2952
    arguments.callee._singletonInstance = this;                                                                       // 2953
                                                                                                                      // 2954
    this.provider = provider;                                                                                         // 2955
    this.polls = [];                                                                                                  // 2956
    this.timeout = null;                                                                                              // 2957
    this.poll();                                                                                                      // 2958
};                                                                                                                    // 2959
                                                                                                                      // 2960
/**                                                                                                                   // 2961
 * @return {RequestManager} singleton                                                                                 // 2962
 */                                                                                                                   // 2963
RequestManager.getInstance = function () {                                                                            // 2964
    var instance = new RequestManager();                                                                              // 2965
    return instance;                                                                                                  // 2966
};                                                                                                                    // 2967
                                                                                                                      // 2968
/**                                                                                                                   // 2969
 * Should be used to synchronously send request                                                                       // 2970
 *                                                                                                                    // 2971
 * @method send                                                                                                       // 2972
 * @param {Object} data                                                                                               // 2973
 * @return {Object}                                                                                                   // 2974
 */                                                                                                                   // 2975
RequestManager.prototype.send = function (data) {                                                                     // 2976
    if (!this.provider) {                                                                                             // 2977
        console.error(errors.InvalidProvider());                                                                      // 2978
        return null;                                                                                                  // 2979
    }                                                                                                                 // 2980
                                                                                                                      // 2981
    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);                                          // 2982
    var result = this.provider.send(payload);                                                                         // 2983
                                                                                                                      // 2984
    if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                             // 2985
        throw errors.InvalidResponse(result);                                                                         // 2986
    }                                                                                                                 // 2987
                                                                                                                      // 2988
    return result.result;                                                                                             // 2989
};                                                                                                                    // 2990
                                                                                                                      // 2991
/**                                                                                                                   // 2992
 * Should be used to asynchronously send request                                                                      // 2993
 *                                                                                                                    // 2994
 * @method sendAsync                                                                                                  // 2995
 * @param {Object} data                                                                                               // 2996
 * @param {Function} callback                                                                                         // 2997
 */                                                                                                                   // 2998
RequestManager.prototype.sendAsync = function (data, callback) {                                                      // 2999
    if (!this.provider) {                                                                                             // 3000
        return callback(errors.InvalidProvider());                                                                    // 3001
    }                                                                                                                 // 3002
                                                                                                                      // 3003
    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);                                          // 3004
    this.provider.sendAsync(payload, function (err, result) {                                                         // 3005
        if (err) {                                                                                                    // 3006
            return callback(err);                                                                                     // 3007
        }                                                                                                             // 3008
                                                                                                                      // 3009
        if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                         // 3010
            return callback(errors.InvalidResponse(result));                                                          // 3011
        }                                                                                                             // 3012
                                                                                                                      // 3013
        callback(null, result.result);                                                                                // 3014
    });                                                                                                               // 3015
};                                                                                                                    // 3016
                                                                                                                      // 3017
/**                                                                                                                   // 3018
 * Should be used to set provider of request manager                                                                  // 3019
 *                                                                                                                    // 3020
 * @method setProvider                                                                                                // 3021
 * @param {Object}                                                                                                    // 3022
 */                                                                                                                   // 3023
RequestManager.prototype.setProvider = function (p) {                                                                 // 3024
    this.provider = p;                                                                                                // 3025
};                                                                                                                    // 3026
                                                                                                                      // 3027
/*jshint maxparams:4 */                                                                                               // 3028
                                                                                                                      // 3029
/**                                                                                                                   // 3030
 * Should be used to start polling                                                                                    // 3031
 *                                                                                                                    // 3032
 * @method startPolling                                                                                               // 3033
 * @param {Object} data                                                                                               // 3034
 * @param {Number} pollId                                                                                             // 3035
 * @param {Function} callback                                                                                         // 3036
 * @param {Function} uninstall                                                                                        // 3037
 *                                                                                                                    // 3038
 * @todo cleanup number of params                                                                                     // 3039
 */                                                                                                                   // 3040
RequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {                                // 3041
    this.polls.push({data: data, id: pollId, callback: callback, uninstall: uninstall});                              // 3042
};                                                                                                                    // 3043
/*jshint maxparams:3 */                                                                                               // 3044
                                                                                                                      // 3045
/**                                                                                                                   // 3046
 * Should be used to stop polling for filter with given id                                                            // 3047
 *                                                                                                                    // 3048
 * @method stopPolling                                                                                                // 3049
 * @param {Number} pollId                                                                                             // 3050
 */                                                                                                                   // 3051
RequestManager.prototype.stopPolling = function (pollId) {                                                            // 3052
    for (var i = this.polls.length; i--;) {                                                                           // 3053
        var poll = this.polls[i];                                                                                     // 3054
        if (poll.id === pollId) {                                                                                     // 3055
            this.polls.splice(i, 1);                                                                                  // 3056
        }                                                                                                             // 3057
    }                                                                                                                 // 3058
};                                                                                                                    // 3059
                                                                                                                      // 3060
/**                                                                                                                   // 3061
 * Should be called to reset polling mechanism of request manager                                                     // 3062
 *                                                                                                                    // 3063
 * @method reset                                                                                                      // 3064
 */                                                                                                                   // 3065
RequestManager.prototype.reset = function () {                                                                        // 3066
    this.polls.forEach(function (poll) {                                                                              // 3067
        poll.uninstall(poll.id);                                                                                      // 3068
    });                                                                                                               // 3069
    this.polls = [];                                                                                                  // 3070
                                                                                                                      // 3071
    if (this.timeout) {                                                                                               // 3072
        clearTimeout(this.timeout);                                                                                   // 3073
        this.timeout = null;                                                                                          // 3074
    }                                                                                                                 // 3075
    this.poll();                                                                                                      // 3076
};                                                                                                                    // 3077
                                                                                                                      // 3078
/**                                                                                                                   // 3079
 * Should be called to poll for changes on filter with given id                                                       // 3080
 *                                                                                                                    // 3081
 * @method poll                                                                                                       // 3082
 */                                                                                                                   // 3083
RequestManager.prototype.poll = function () {                                                                         // 3084
    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);                                           // 3085
                                                                                                                      // 3086
    if (!this.polls.length) {                                                                                         // 3087
        return;                                                                                                       // 3088
    }                                                                                                                 // 3089
                                                                                                                      // 3090
    if (!this.provider) {                                                                                             // 3091
        console.error(errors.InvalidProvider());                                                                      // 3092
        return;                                                                                                       // 3093
    }                                                                                                                 // 3094
                                                                                                                      // 3095
    var payload = Jsonrpc.getInstance().toBatchPayload(this.polls.map(function (data) {                               // 3096
        return data.data;                                                                                             // 3097
    }));                                                                                                              // 3098
                                                                                                                      // 3099
    var self = this;                                                                                                  // 3100
    this.provider.sendAsync(payload, function (error, results) {                                                      // 3101
        // TODO: console log?                                                                                         // 3102
        if (error) {                                                                                                  // 3103
            return;                                                                                                   // 3104
        }                                                                                                             // 3105
                                                                                                                      // 3106
        if (!utils.isArray(results)) {                                                                                // 3107
            throw errors.InvalidResponse(results);                                                                    // 3108
        }                                                                                                             // 3109
                                                                                                                      // 3110
        results.map(function (result, index) {                                                                        // 3111
            result.callback = self.polls[index].callback;                                                             // 3112
            return result;                                                                                            // 3113
        }).filter(function (result) {                                                                                 // 3114
            var valid = Jsonrpc.getInstance().isValidResponse(result);                                                // 3115
            if (!valid) {                                                                                             // 3116
                result.callback(errors.InvalidResponse(result));                                                      // 3117
            }                                                                                                         // 3118
            return valid;                                                                                             // 3119
        }).filter(function (result) {                                                                                 // 3120
            return utils.isArray(result.result) && result.result.length > 0;                                          // 3121
        }).forEach(function (result) {                                                                                // 3122
            result.callback(null, result.result);                                                                     // 3123
        });                                                                                                           // 3124
    });                                                                                                               // 3125
};                                                                                                                    // 3126
                                                                                                                      // 3127
module.exports = RequestManager;                                                                                      // 3128
                                                                                                                      // 3129
                                                                                                                      // 3130
},{"../utils/config":6,"../utils/utils":7,"./errors":12,"./jsonrpc":18}],24:[function(require,module,exports){        // 3131
/*                                                                                                                    // 3132
    This file is part of ethereum.js.                                                                                 // 3133
                                                                                                                      // 3134
    ethereum.js is free software: you can redistribute it and/or modify                                               // 3135
    it under the terms of the GNU Lesser General Public License as published by                                       // 3136
    the Free Software Foundation, either version 3 of the License, or                                                 // 3137
    (at your option) any later version.                                                                               // 3138
                                                                                                                      // 3139
    ethereum.js is distributed in the hope that it will be useful,                                                    // 3140
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 3141
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 3142
    GNU Lesser General Public License for more details.                                                               // 3143
                                                                                                                      // 3144
    You should have received a copy of the GNU Lesser General Public License                                          // 3145
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 3146
*/                                                                                                                    // 3147
/** @file shh.js                                                                                                      // 3148
 * @authors:                                                                                                          // 3149
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 3150
 * @date 2015                                                                                                         // 3151
 */                                                                                                                   // 3152
                                                                                                                      // 3153
var Method = require('./method');                                                                                     // 3154
var formatters = require('./formatters');                                                                             // 3155
                                                                                                                      // 3156
var post = new Method({                                                                                               // 3157
    name: 'post',                                                                                                     // 3158
    call: 'shh_post',                                                                                                 // 3159
    params: 1,                                                                                                        // 3160
    inputFormatter: [formatters.inputPostFormatter]                                                                   // 3161
});                                                                                                                   // 3162
                                                                                                                      // 3163
var newIdentity = new Method({                                                                                        // 3164
    name: 'newIdentity',                                                                                              // 3165
    call: 'shh_newIdentity',                                                                                          // 3166
    params: 0                                                                                                         // 3167
});                                                                                                                   // 3168
                                                                                                                      // 3169
var hasIdentity = new Method({                                                                                        // 3170
    name: 'hasIdentity',                                                                                              // 3171
    call: 'shh_hasIdentity',                                                                                          // 3172
    params: 1                                                                                                         // 3173
});                                                                                                                   // 3174
                                                                                                                      // 3175
var newGroup = new Method({                                                                                           // 3176
    name: 'newGroup',                                                                                                 // 3177
    call: 'shh_newGroup',                                                                                             // 3178
    params: 0                                                                                                         // 3179
});                                                                                                                   // 3180
                                                                                                                      // 3181
var addToGroup = new Method({                                                                                         // 3182
    name: 'addToGroup',                                                                                               // 3183
    call: 'shh_addToGroup',                                                                                           // 3184
    params: 0                                                                                                         // 3185
});                                                                                                                   // 3186
                                                                                                                      // 3187
var methods = [                                                                                                       // 3188
    post,                                                                                                             // 3189
    newIdentity,                                                                                                      // 3190
    hasIdentity,                                                                                                      // 3191
    newGroup,                                                                                                         // 3192
    addToGroup                                                                                                        // 3193
];                                                                                                                    // 3194
                                                                                                                      // 3195
module.exports = {                                                                                                    // 3196
    methods: methods                                                                                                  // 3197
};                                                                                                                    // 3198
                                                                                                                      // 3199
                                                                                                                      // 3200
},{"./formatters":16,"./method":19}],25:[function(require,module,exports){                                            // 3201
/*                                                                                                                    // 3202
    This file is part of ethereum.js.                                                                                 // 3203
                                                                                                                      // 3204
    ethereum.js is free software: you can redistribute it and/or modify                                               // 3205
    it under the terms of the GNU Lesser General Public License as published by                                       // 3206
    the Free Software Foundation, either version 3 of the License, or                                                 // 3207
    (at your option) any later version.                                                                               // 3208
                                                                                                                      // 3209
    ethereum.js is distributed in the hope that it will be useful,                                                    // 3210
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 3211
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 3212
    GNU Lesser General Public License for more details.                                                               // 3213
                                                                                                                      // 3214
    You should have received a copy of the GNU Lesser General Public License                                          // 3215
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 3216
*/                                                                                                                    // 3217
/** @file signature.js                                                                                                // 3218
 * @authors:                                                                                                          // 3219
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 3220
 * @date 2015                                                                                                         // 3221
 */                                                                                                                   // 3222
                                                                                                                      // 3223
var web3 = require('../web3');                                                                                        // 3224
var c = require('../utils/config');                                                                                   // 3225
                                                                                                                      // 3226
/// @param function name for which we want to get signature                                                           // 3227
/// @returns signature of function with given name                                                                    // 3228
var functionSignatureFromAscii = function (name) {                                                                    // 3229
    return web3.sha3(web3.fromAscii(name)).slice(0, 2 + c.ETH_SIGNATURE_LENGTH * 2);                                  // 3230
};                                                                                                                    // 3231
                                                                                                                      // 3232
/// @param event name for which we want to get signature                                                              // 3233
/// @returns signature of event with given name                                                                       // 3234
var eventSignatureFromAscii = function (name) {                                                                       // 3235
    return web3.sha3(web3.fromAscii(name));                                                                           // 3236
};                                                                                                                    // 3237
                                                                                                                      // 3238
module.exports = {                                                                                                    // 3239
    functionSignatureFromAscii: functionSignatureFromAscii,                                                           // 3240
    eventSignatureFromAscii: eventSignatureFromAscii                                                                  // 3241
};                                                                                                                    // 3242
                                                                                                                      // 3243
                                                                                                                      // 3244
},{"../utils/config":6,"../web3":9}],26:[function(require,module,exports){                                            // 3245
/*                                                                                                                    // 3246
    This file is part of ethereum.js.                                                                                 // 3247
                                                                                                                      // 3248
    ethereum.js is free software: you can redistribute it and/or modify                                               // 3249
    it under the terms of the GNU Lesser General Public License as published by                                       // 3250
    the Free Software Foundation, either version 3 of the License, or                                                 // 3251
    (at your option) any later version.                                                                               // 3252
                                                                                                                      // 3253
    ethereum.js is distributed in the hope that it will be useful,                                                    // 3254
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                    // 3255
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                     // 3256
    GNU Lesser General Public License for more details.                                                               // 3257
                                                                                                                      // 3258
    You should have received a copy of the GNU Lesser General Public License                                          // 3259
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                              // 3260
*/                                                                                                                    // 3261
/** @file watches.js                                                                                                  // 3262
 * @authors:                                                                                                          // 3263
 *   Marek Kotewicz <marek@ethdev.com>                                                                                // 3264
 * @date 2015                                                                                                         // 3265
 */                                                                                                                   // 3266
                                                                                                                      // 3267
var Method = require('./method');                                                                                     // 3268
                                                                                                                      // 3269
/// @returns an array of objects describing web3.eth.filter api methods                                               // 3270
var eth = function () {                                                                                               // 3271
    var newFilterCall = function (args) {                                                                             // 3272
        return typeof args[0] === 'string' ? 'eth_newBlockFilter' : 'eth_newFilter';                                  // 3273
    };                                                                                                                // 3274
                                                                                                                      // 3275
    var newFilter = new Method({                                                                                      // 3276
        name: 'newFilter',                                                                                            // 3277
        call: newFilterCall,                                                                                          // 3278
        params: 1                                                                                                     // 3279
    });                                                                                                               // 3280
                                                                                                                      // 3281
    var uninstallFilter = new Method({                                                                                // 3282
        name: 'uninstallFilter',                                                                                      // 3283
        call: 'eth_uninstallFilter',                                                                                  // 3284
        params: 1                                                                                                     // 3285
    });                                                                                                               // 3286
                                                                                                                      // 3287
    var getLogs = new Method({                                                                                        // 3288
        name: 'getLogs',                                                                                              // 3289
        call: 'eth_getFilterLogs',                                                                                    // 3290
        params: 1                                                                                                     // 3291
    });                                                                                                               // 3292
                                                                                                                      // 3293
    var poll = new Method({                                                                                           // 3294
        name: 'poll',                                                                                                 // 3295
        call: 'eth_getFilterChanges',                                                                                 // 3296
        params: 1                                                                                                     // 3297
    });                                                                                                               // 3298
                                                                                                                      // 3299
    return [                                                                                                          // 3300
        newFilter,                                                                                                    // 3301
        uninstallFilter,                                                                                              // 3302
        getLogs,                                                                                                      // 3303
        poll                                                                                                          // 3304
    ];                                                                                                                // 3305
};                                                                                                                    // 3306
                                                                                                                      // 3307
/// @returns an array of objects describing web3.shh.watch api methods                                                // 3308
var shh = function () {                                                                                               // 3309
    var newFilter = new Method({                                                                                      // 3310
        name: 'newFilter',                                                                                            // 3311
        call: 'shh_newFilter',                                                                                        // 3312
        params: 1                                                                                                     // 3313
    });                                                                                                               // 3314
                                                                                                                      // 3315
    var uninstallFilter = new Method({                                                                                // 3316
        name: 'uninstallFilter',                                                                                      // 3317
        call: 'shh_uninstallFilter',                                                                                  // 3318
        params: 1                                                                                                     // 3319
    });                                                                                                               // 3320
                                                                                                                      // 3321
    var getLogs = new Method({                                                                                        // 3322
        name: 'getLogs',                                                                                              // 3323
        call: 'shh_getMessages',                                                                                      // 3324
        params: 1                                                                                                     // 3325
    });                                                                                                               // 3326
                                                                                                                      // 3327
    var poll = new Method({                                                                                           // 3328
        name: 'poll',                                                                                                 // 3329
        call: 'shh_getFilterChanges',                                                                                 // 3330
        params: 1                                                                                                     // 3331
    });                                                                                                               // 3332
                                                                                                                      // 3333
    return [                                                                                                          // 3334
        newFilter,                                                                                                    // 3335
        uninstallFilter,                                                                                              // 3336
        getLogs,                                                                                                      // 3337
        poll                                                                                                          // 3338
    ];                                                                                                                // 3339
};                                                                                                                    // 3340
                                                                                                                      // 3341
module.exports = {                                                                                                    // 3342
    eth: eth,                                                                                                         // 3343
    shh: shh                                                                                                          // 3344
};                                                                                                                    // 3345
                                                                                                                      // 3346
                                                                                                                      // 3347
},{"./method":19}],27:[function(require,module,exports){                                                              // 3348
                                                                                                                      // 3349
},{}],"bignumber.js":[function(require,module,exports){                                                               // 3350
/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */                                            // 3351
                                                                                                                      // 3352
;(function (global) {                                                                                                 // 3353
    'use strict';                                                                                                     // 3354
                                                                                                                      // 3355
    /*                                                                                                                // 3356
      bignumber.js v2.0.7                                                                                             // 3357
      A JavaScript library for arbitrary-precision arithmetic.                                                        // 3358
      https://github.com/MikeMcl/bignumber.js                                                                         // 3359
      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>                                                       // 3360
      MIT Expat Licence                                                                                               // 3361
    */                                                                                                                // 3362
                                                                                                                      // 3363
                                                                                                                      // 3364
    var BigNumber, crypto, parseNumeric,                                                                              // 3365
        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,                                                           // 3366
        mathceil = Math.ceil,                                                                                         // 3367
        mathfloor = Math.floor,                                                                                       // 3368
        notBool = ' not a boolean or binary digit',                                                                   // 3369
        roundingMode = 'rounding mode',                                                                               // 3370
        tooManyDigits = 'number type has more than 15 significant digits',                                            // 3371
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',                                // 3372
        BASE = 1e14,                                                                                                  // 3373
        LOG_BASE = 14,                                                                                                // 3374
        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1                                                      // 3375
        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1                                                      // 3376
        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],                           // 3377
        SQRT_BASE = 1e7,                                                                                              // 3378
                                                                                                                      // 3379
        /*                                                                                                            // 3380
         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and                    // 3381
         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an                        // 3382
         * exception is thrown (if ERRORS is true).                                                                   // 3383
         */                                                                                                           // 3384
        MAX = 1E9;                                   // 0 to MAX_INT32                                                // 3385
                                                                                                                      // 3386
                                                                                                                      // 3387
    /*                                                                                                                // 3388
     * Create and return a BigNumber constructor.                                                                     // 3389
     */                                                                                                               // 3390
    function another(configObj) {                                                                                     // 3391
        var div,                                                                                                      // 3392
                                                                                                                      // 3393
            // id tracks the caller function, so its name can be included in error messages.                          // 3394
            id = 0,                                                                                                   // 3395
            P = BigNumber.prototype,                                                                                  // 3396
            ONE = new BigNumber(1),                                                                                   // 3397
                                                                                                                      // 3398
                                                                                                                      // 3399
            /********************************* EDITABLE DEFAULTS **********************************/                  // 3400
                                                                                                                      // 3401
                                                                                                                      // 3402
            /*                                                                                                        // 3403
             * The default values below must be integers within the inclusive ranges stated.                          // 3404
             * The values can also be changed at run-time using BigNumber.config.                                     // 3405
             */                                                                                                       // 3406
                                                                                                                      // 3407
            // The maximum number of decimal places for operations involving division.                                // 3408
            DECIMAL_PLACES = 20,                     // 0 to MAX                                                      // 3409
                                                                                                                      // 3410
            /*                                                                                                        // 3411
             * The rounding mode used when rounding to the above decimal places, and when using                       // 3412
             * toExponential, toFixed, toFormat and toPrecision, and round (default value).                           // 3413
             * UP         0 Away from zero.                                                                           // 3414
             * DOWN       1 Towards zero.                                                                             // 3415
             * CEIL       2 Towards +Infinity.                                                                        // 3416
             * FLOOR      3 Towards -Infinity.                                                                        // 3417
             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.                                            // 3418
             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.                                          // 3419
             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.                        // 3420
             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.                             // 3421
             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.                             // 3422
             */                                                                                                       // 3423
            ROUNDING_MODE = 4,                       // 0 to 8                                                        // 3424
                                                                                                                      // 3425
            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]                                                             // 3426
                                                                                                                      // 3427
            // The exponent value at and beneath which toString returns exponential notation.                         // 3428
            // Number type: -7                                                                                        // 3429
            TO_EXP_NEG = -7,                         // 0 to -MAX                                                     // 3430
                                                                                                                      // 3431
            // The exponent value at and above which toString returns exponential notation.                           // 3432
            // Number type: 21                                                                                        // 3433
            TO_EXP_POS = 21,                         // 0 to MAX                                                      // 3434
                                                                                                                      // 3435
            // RANGE : [MIN_EXP, MAX_EXP]                                                                             // 3436
                                                                                                                      // 3437
            // The minimum exponent value, beneath which underflow to zero occurs.                                    // 3438
            // Number type: -324  (5e-324)                                                                            // 3439
            MIN_EXP = -1e7,                          // -1 to -MAX                                                    // 3440
                                                                                                                      // 3441
            // The maximum exponent value, above which overflow to Infinity occurs.                                   // 3442
            // Number type:  308  (1.7976931348623157e+308)                                                           // 3443
            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.                              // 3444
            MAX_EXP = 1e7,                           // 1 to MAX                                                      // 3445
                                                                                                                      // 3446
            // Whether BigNumber Errors are ever thrown.                                                              // 3447
            ERRORS = true,                           // true or false                                                 // 3448
                                                                                                                      // 3449
            // Change to intValidatorNoErrors if ERRORS is false.                                                     // 3450
            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors                   // 3451
                                                                                                                      // 3452
            // Whether to use cryptographically-secure random number generation, if available.                        // 3453
            CRYPTO = false,                          // true or false                                                 // 3454
                                                                                                                      // 3455
            /*                                                                                                        // 3456
             * The modulo mode used when calculating the modulus: a mod n.                                            // 3457
             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.                   // 3458
             * The remainder (r) is calculated as: r = a - n * q.                                                     // 3459
             *                                                                                                        // 3460
             * UP        0 The remainder is positive if the dividend is negative, else is negative.                   // 3461
             * DOWN      1 The remainder has the same sign as the dividend.                                           // 3462
             *             This modulo mode is commonly known as 'truncated division' and is                          // 3463
             *             equivalent to (a % n) in JavaScript.                                                       // 3464
             * FLOOR     3 The remainder has the same sign as the divisor (Python %).                                 // 3465
             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.                               // 3466
             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).                                       // 3467
             *             The remainder is always positive.                                                          // 3468
             *                                                                                                        // 3469
             * The truncated division, floored division, Euclidian division and IEEE 754 remainder                    // 3470
             * modes are commonly used for the modulus operation.                                                     // 3471
             * Although the other rounding modes can also be used, they may not give useful results.                  // 3472
             */                                                                                                       // 3473
            MODULO_MODE = 1,                         // 0 to 9                                                        // 3474
                                                                                                                      // 3475
            // The maximum number of significant digits of the result of the toPower operation.                       // 3476
            // If POW_PRECISION is 0, there will be unlimited significant digits.                                     // 3477
            POW_PRECISION = 100,                     // 0 to MAX                                                      // 3478
                                                                                                                      // 3479
            // The format specification used by the BigNumber.prototype.toFormat method.                              // 3480
            FORMAT = {                                                                                                // 3481
                decimalSeparator: '.',                                                                                // 3482
                groupSeparator: ',',                                                                                  // 3483
                groupSize: 3,                                                                                         // 3484
                secondaryGroupSize: 0,                                                                                // 3485
                fractionGroupSeparator: '\xA0',      // non-breaking space                                            // 3486
                fractionGroupSize: 0                                                                                  // 3487
            };                                                                                                        // 3488
                                                                                                                      // 3489
                                                                                                                      // 3490
        /******************************************************************************************/                  // 3491
                                                                                                                      // 3492
                                                                                                                      // 3493
        // CONSTRUCTOR                                                                                                // 3494
                                                                                                                      // 3495
                                                                                                                      // 3496
        /*                                                                                                            // 3497
         * The BigNumber constructor and exported function.                                                           // 3498
         * Create and return a new instance of a BigNumber object.                                                    // 3499
         *                                                                                                            // 3500
         * n {number|string|BigNumber} A numeric value.                                                               // 3501
         * [b] {number} The base of n. Integer, 2 to 64 inclusive.                                                    // 3502
         */                                                                                                           // 3503
        function BigNumber( n, b ) {                                                                                  // 3504
            var c, e, i, num, len, str,                                                                               // 3505
                x = this;                                                                                             // 3506
                                                                                                                      // 3507
            // Enable constructor usage without new.                                                                  // 3508
            if ( !( x instanceof BigNumber ) ) {                                                                      // 3509
                                                                                                                      // 3510
                // 'BigNumber() constructor call without new: {n}'                                                    // 3511
                if (ERRORS) raise( 26, 'constructor call without new', n );                                           // 3512
                return new BigNumber( n, b );                                                                         // 3513
            }                                                                                                         // 3514
                                                                                                                      // 3515
            // 'new BigNumber() base not an integer: {b}'                                                             // 3516
            // 'new BigNumber() base out of range: {b}'                                                               // 3517
            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {                                                 // 3518
                                                                                                                      // 3519
                // Duplicate.                                                                                         // 3520
                if ( n instanceof BigNumber ) {                                                                       // 3521
                    x.s = n.s;                                                                                        // 3522
                    x.e = n.e;                                                                                        // 3523
                    x.c = ( n = n.c ) ? n.slice() : n;                                                                // 3524
                    id = 0;                                                                                           // 3525
                    return;                                                                                           // 3526
                }                                                                                                     // 3527
                                                                                                                      // 3528
                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {                                                 // 3529
                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;                                                             // 3530
                                                                                                                      // 3531
                    // Fast path for integers.                                                                        // 3532
                    if ( n === ~~n ) {                                                                                // 3533
                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );                                                  // 3534
                        x.e = e;                                                                                      // 3535
                        x.c = [n];                                                                                    // 3536
                        id = 0;                                                                                       // 3537
                        return;                                                                                       // 3538
                    }                                                                                                 // 3539
                                                                                                                      // 3540
                    str = n + '';                                                                                     // 3541
                } else {                                                                                              // 3542
                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );                        // 3543
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                  // 3544
                }                                                                                                     // 3545
            } else {                                                                                                  // 3546
                b = b | 0;                                                                                            // 3547
                str = n + '';                                                                                         // 3548
                                                                                                                      // 3549
                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.                              // 3550
                // Allow exponential notation to be used with base 10 argument.                                       // 3551
                if ( b == 10 ) {                                                                                      // 3552
                    x = new BigNumber( n instanceof BigNumber ? n : str );                                            // 3553
                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );                                       // 3554
                }                                                                                                     // 3555
                                                                                                                      // 3556
                // Avoid potential interpretation of Infinity and NaN as base 44+ values.                             // 3557
                // Any number in exponential form will fail due to the [Ee][+-].                                      // 3558
                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||                                                  // 3559
                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +                                // 3560
                    '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {                                          // 3561
                    return parseNumeric( x, str, num, b );                                                            // 3562
                }                                                                                                     // 3563
                                                                                                                      // 3564
                if (num) {                                                                                            // 3565
                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;                                                 // 3566
                                                                                                                      // 3567
                    if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {                                     // 3568
                                                                                                                      // 3569
                        // 'new BigNumber() number type has more than 15 significant digits: {n}'                     // 3570
                        raise( id, tooManyDigits, n );                                                                // 3571
                    }                                                                                                 // 3572
                                                                                                                      // 3573
                    // Prevent later check for length on converted number.                                            // 3574
                    num = false;                                                                                      // 3575
                } else {                                                                                              // 3576
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                  // 3577
                }                                                                                                     // 3578
                                                                                                                      // 3579
                str = convertBase( str, 10, b, x.s );                                                                 // 3580
            }                                                                                                         // 3581
                                                                                                                      // 3582
            // Decimal point?                                                                                         // 3583
            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );                                        // 3584
                                                                                                                      // 3585
            // Exponential form?                                                                                      // 3586
            if ( ( i = str.search( /e/i ) ) > 0 ) {                                                                   // 3587
                                                                                                                      // 3588
                // Determine exponent.                                                                                // 3589
                if ( e < 0 ) e = i;                                                                                   // 3590
                e += +str.slice( i + 1 );                                                                             // 3591
                str = str.substring( 0, i );                                                                          // 3592
            } else if ( e < 0 ) {                                                                                     // 3593
                                                                                                                      // 3594
                // Integer.                                                                                           // 3595
                e = str.length;                                                                                       // 3596
            }                                                                                                         // 3597
                                                                                                                      // 3598
            // Determine leading zeros.                                                                               // 3599
            for ( i = 0; str.charCodeAt(i) === 48; i++ );                                                             // 3600
                                                                                                                      // 3601
            // Determine trailing zeros.                                                                              // 3602
            for ( len = str.length; str.charCodeAt(--len) === 48; );                                                  // 3603
            str = str.slice( i, len + 1 );                                                                            // 3604
                                                                                                                      // 3605
            if (str) {                                                                                                // 3606
                len = str.length;                                                                                     // 3607
                                                                                                                      // 3608
                // Disallow numbers with over 15 significant digits if number type.                                   // 3609
                // 'new BigNumber() number type has more than 15 significant digits: {n}'                             // 3610
                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );                                 // 3611
                                                                                                                      // 3612
                e = e - i - 1;                                                                                        // 3613
                                                                                                                      // 3614
                 // Overflow?                                                                                         // 3615
                if ( e > MAX_EXP ) {                                                                                  // 3616
                                                                                                                      // 3617
                    // Infinity.                                                                                      // 3618
                    x.c = x.e = null;                                                                                 // 3619
                                                                                                                      // 3620
                // Underflow?                                                                                         // 3621
                } else if ( e < MIN_EXP ) {                                                                           // 3622
                                                                                                                      // 3623
                    // Zero.                                                                                          // 3624
                    x.c = [ x.e = 0 ];                                                                                // 3625
                } else {                                                                                              // 3626
                    x.e = e;                                                                                          // 3627
                    x.c = [];                                                                                         // 3628
                                                                                                                      // 3629
                    // Transform base                                                                                 // 3630
                                                                                                                      // 3631
                    // e is the base 10 exponent.                                                                     // 3632
                    // i is where to slice str to get the first element of the coefficient array.                     // 3633
                    i = ( e + 1 ) % LOG_BASE;                                                                         // 3634
                    if ( e < 0 ) i += LOG_BASE;                                                                       // 3635
                                                                                                                      // 3636
                    if ( i < len ) {                                                                                  // 3637
                        if (i) x.c.push( +str.slice( 0, i ) );                                                        // 3638
                                                                                                                      // 3639
                        for ( len -= LOG_BASE; i < len; ) {                                                           // 3640
                            x.c.push( +str.slice( i, i += LOG_BASE ) );                                               // 3641
                        }                                                                                             // 3642
                                                                                                                      // 3643
                        str = str.slice(i);                                                                           // 3644
                        i = LOG_BASE - str.length;                                                                    // 3645
                    } else {                                                                                          // 3646
                        i -= len;                                                                                     // 3647
                    }                                                                                                 // 3648
                                                                                                                      // 3649
                    for ( ; i--; str += '0' );                                                                        // 3650
                    x.c.push( +str );                                                                                 // 3651
                }                                                                                                     // 3652
            } else {                                                                                                  // 3653
                                                                                                                      // 3654
                // Zero.                                                                                              // 3655
                x.c = [ x.e = 0 ];                                                                                    // 3656
            }                                                                                                         // 3657
                                                                                                                      // 3658
            id = 0;                                                                                                   // 3659
        }                                                                                                             // 3660
                                                                                                                      // 3661
                                                                                                                      // 3662
        // CONSTRUCTOR PROPERTIES                                                                                     // 3663
                                                                                                                      // 3664
                                                                                                                      // 3665
        BigNumber.another = another;                                                                                  // 3666
                                                                                                                      // 3667
        BigNumber.ROUND_UP = 0;                                                                                       // 3668
        BigNumber.ROUND_DOWN = 1;                                                                                     // 3669
        BigNumber.ROUND_CEIL = 2;                                                                                     // 3670
        BigNumber.ROUND_FLOOR = 3;                                                                                    // 3671
        BigNumber.ROUND_HALF_UP = 4;                                                                                  // 3672
        BigNumber.ROUND_HALF_DOWN = 5;                                                                                // 3673
        BigNumber.ROUND_HALF_EVEN = 6;                                                                                // 3674
        BigNumber.ROUND_HALF_CEIL = 7;                                                                                // 3675
        BigNumber.ROUND_HALF_FLOOR = 8;                                                                               // 3676
        BigNumber.EUCLID = 9;                                                                                         // 3677
                                                                                                                      // 3678
                                                                                                                      // 3679
        /*                                                                                                            // 3680
         * Configure infrequently-changing library-wide settings.                                                     // 3681
         *                                                                                                            // 3682
         * Accept an object or an argument list, with one or many of the following properties or                      // 3683
         * parameters respectively:                                                                                   // 3684
         *                                                                                                            // 3685
         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive                                                    // 3686
         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive                                                      // 3687
         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or                                     // 3688
         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]                             // 3689
         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or                            // 3690
         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]                    // 3691
         *   ERRORS          {boolean|number}   true, false, 1 or 0                                                   // 3692
         *   CRYPTO          {boolean|number}   true, false, 1 or 0                                                   // 3693
         *   MODULO_MODE     {number}           0 to 9 inclusive                                                      // 3694
         *   POW_PRECISION   {number}           0 to MAX inclusive                                                    // 3695
         *   FORMAT          {object}           See BigNumber.prototype.toFormat                                      // 3696
         *      decimalSeparator       {string}                                                                       // 3697
         *      groupSeparator         {string}                                                                       // 3698
         *      groupSize              {number}                                                                       // 3699
         *      secondaryGroupSize     {number}                                                                       // 3700
         *      fractionGroupSeparator {string}                                                                       // 3701
         *      fractionGroupSize      {number}                                                                       // 3702
         *                                                                                                            // 3703
         * (The values assigned to the above FORMAT object properties are not checked for validity.)                  // 3704
         *                                                                                                            // 3705
         * E.g.                                                                                                       // 3706
         * BigNumber.config(20, 4) is equivalent to                                                                   // 3707
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })                                               // 3708
         *                                                                                                            // 3709
         * Ignore properties/parameters set to null or undefined.                                                     // 3710
         * Return an object with the properties current values.                                                       // 3711
         */                                                                                                           // 3712
        BigNumber.config = function () {                                                                              // 3713
            var v, p,                                                                                                 // 3714
                i = 0,                                                                                                // 3715
                r = {},                                                                                               // 3716
                a = arguments,                                                                                        // 3717
                o = a[0],                                                                                             // 3718
                has = o && typeof o == 'object'                                                                       // 3719
                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }                           // 3720
                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };                               // 3721
                                                                                                                      // 3722
            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.                                                   // 3723
            // 'config() DECIMAL_PLACES not an integer: {v}'                                                          // 3724
            // 'config() DECIMAL_PLACES out of range: {v}'                                                            // 3725
            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                     // 3726
                DECIMAL_PLACES = v | 0;                                                                               // 3727
            }                                                                                                         // 3728
            r[p] = DECIMAL_PLACES;                                                                                    // 3729
                                                                                                                      // 3730
            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.                                                      // 3731
            // 'config() ROUNDING_MODE not an integer: {v}'                                                           // 3732
            // 'config() ROUNDING_MODE out of range: {v}'                                                             // 3733
            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {                                        // 3734
                ROUNDING_MODE = v | 0;                                                                                // 3735
            }                                                                                                         // 3736
            r[p] = ROUNDING_MODE;                                                                                     // 3737
                                                                                                                      // 3738
            // EXPONENTIAL_AT {number|number[]}                                                                       // 3739
            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].                   // 3740
            // 'config() EXPONENTIAL_AT not an integer: {v}'                                                          // 3741
            // 'config() EXPONENTIAL_AT out of range: {v}'                                                            // 3742
            if ( has( p = 'EXPONENTIAL_AT' ) ) {                                                                      // 3743
                                                                                                                      // 3744
                if ( isArray(v) ) {                                                                                   // 3745
                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {                    // 3746
                        TO_EXP_NEG = v[0] | 0;                                                                        // 3747
                        TO_EXP_POS = v[1] | 0;                                                                        // 3748
                    }                                                                                                 // 3749
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                      // 3750
                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );                                            // 3751
                }                                                                                                     // 3752
            }                                                                                                         // 3753
            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];                                                                        // 3754
                                                                                                                      // 3755
            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or                                     // 3756
            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].                                            // 3757
            // 'config() RANGE not an integer: {v}'                                                                   // 3758
            // 'config() RANGE cannot be zero: {v}'                                                                   // 3759
            // 'config() RANGE out of range: {v}'                                                                     // 3760
            if ( has( p = 'RANGE' ) ) {                                                                               // 3761
                                                                                                                      // 3762
                if ( isArray(v) ) {                                                                                   // 3763
                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {                   // 3764
                        MIN_EXP = v[0] | 0;                                                                           // 3765
                        MAX_EXP = v[1] | 0;                                                                           // 3766
                    }                                                                                                 // 3767
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                      // 3768
                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );                                     // 3769
                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );                                            // 3770
                }                                                                                                     // 3771
            }                                                                                                         // 3772
            r[p] = [ MIN_EXP, MAX_EXP ];                                                                              // 3773
                                                                                                                      // 3774
            // ERRORS {boolean|number} true, false, 1 or 0.                                                           // 3775
            // 'config() ERRORS not a boolean or binary digit: {v}'                                                   // 3776
            if ( has( p = 'ERRORS' ) ) {                                                                              // 3777
                                                                                                                      // 3778
                if ( v === !!v || v === 1 || v === 0 ) {                                                              // 3779
                    id = 0;                                                                                           // 3780
                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;                    // 3781
                } else if (ERRORS) {                                                                                  // 3782
                    raise( 2, p + notBool, v );                                                                       // 3783
                }                                                                                                     // 3784
            }                                                                                                         // 3785
            r[p] = ERRORS;                                                                                            // 3786
                                                                                                                      // 3787
            // CRYPTO {boolean|number} true, false, 1 or 0.                                                           // 3788
            // 'config() CRYPTO not a boolean or binary digit: {v}'                                                   // 3789
            // 'config() crypto unavailable: {crypto}'                                                                // 3790
            if ( has( p = 'CRYPTO' ) ) {                                                                              // 3791
                                                                                                                      // 3792
                if ( v === !!v || v === 1 || v === 0 ) {                                                              // 3793
                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );                                          // 3794
                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );                           // 3795
                } else if (ERRORS) {                                                                                  // 3796
                    raise( 2, p + notBool, v );                                                                       // 3797
                }                                                                                                     // 3798
            }                                                                                                         // 3799
            r[p] = CRYPTO;                                                                                            // 3800
                                                                                                                      // 3801
            // MODULO_MODE {number} Integer, 0 to 9 inclusive.                                                        // 3802
            // 'config() MODULO_MODE not an integer: {v}'                                                             // 3803
            // 'config() MODULO_MODE out of range: {v}'                                                               // 3804
            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {                                          // 3805
                MODULO_MODE = v | 0;                                                                                  // 3806
            }                                                                                                         // 3807
            r[p] = MODULO_MODE;                                                                                       // 3808
                                                                                                                      // 3809
            // POW_PRECISION {number} Integer, 0 to MAX inclusive.                                                    // 3810
            // 'config() POW_PRECISION not an integer: {v}'                                                           // 3811
            // 'config() POW_PRECISION out of range: {v}'                                                             // 3812
            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                      // 3813
                POW_PRECISION = v | 0;                                                                                // 3814
            }                                                                                                         // 3815
            r[p] = POW_PRECISION;                                                                                     // 3816
                                                                                                                      // 3817
            // FORMAT {object}                                                                                        // 3818
            // 'config() FORMAT not an object: {v}'                                                                   // 3819
            if ( has( p = 'FORMAT' ) ) {                                                                              // 3820
                                                                                                                      // 3821
                if ( typeof v == 'object' ) {                                                                         // 3822
                    FORMAT = v;                                                                                       // 3823
                } else if (ERRORS) {                                                                                  // 3824
                    raise( 2, p + ' not an object', v );                                                              // 3825
                }                                                                                                     // 3826
            }                                                                                                         // 3827
            r[p] = FORMAT;                                                                                            // 3828
                                                                                                                      // 3829
            return r;                                                                                                 // 3830
        };                                                                                                            // 3831
                                                                                                                      // 3832
                                                                                                                      // 3833
        /*                                                                                                            // 3834
         * Return a new BigNumber whose value is the maximum of the arguments.                                        // 3835
         *                                                                                                            // 3836
         * arguments {number|string|BigNumber}                                                                        // 3837
         */                                                                                                           // 3838
        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };                                          // 3839
                                                                                                                      // 3840
                                                                                                                      // 3841
        /*                                                                                                            // 3842
         * Return a new BigNumber whose value is the minimum of the arguments.                                        // 3843
         *                                                                                                            // 3844
         * arguments {number|string|BigNumber}                                                                        // 3845
         */                                                                                                           // 3846
        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };                                          // 3847
                                                                                                                      // 3848
                                                                                                                      // 3849
        /*                                                                                                            // 3850
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,                     // 3851
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing                       // 3852
         * zeros are produced).                                                                                       // 3853
         *                                                                                                            // 3854
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                 // 3855
         *                                                                                                            // 3856
         * 'random() decimal places not an integer: {dp}'                                                             // 3857
         * 'random() decimal places out of range: {dp}'                                                               // 3858
         * 'random() crypto unavailable: {crypto}'                                                                    // 3859
         */                                                                                                           // 3860
        BigNumber.random = (function () {                                                                             // 3861
            var pow2_53 = 0x20000000000000;                                                                           // 3862
                                                                                                                      // 3863
            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.                                            // 3864
            // Check if Math.random() produces more than 32 bits of randomness.                                       // 3865
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.                   // 3866
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.                                            // 3867
            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff                                                 // 3868
              ? function () { return mathfloor( Math.random() * pow2_53 ); }                                          // 3869
              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +                                  // 3870
                  (Math.random() * 0x800000 | 0); };                                                                  // 3871
                                                                                                                      // 3872
            return function (dp) {                                                                                    // 3873
                var a, b, e, k, v,                                                                                    // 3874
                    i = 0,                                                                                            // 3875
                    c = [],                                                                                           // 3876
                    rand = new BigNumber(ONE);                                                                        // 3877
                                                                                                                      // 3878
                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;                           // 3879
                k = mathceil( dp / LOG_BASE );                                                                        // 3880
                                                                                                                      // 3881
                if (CRYPTO) {                                                                                         // 3882
                                                                                                                      // 3883
                    // Browsers supporting crypto.getRandomValues.                                                    // 3884
                    if ( crypto && crypto.getRandomValues ) {                                                         // 3885
                                                                                                                      // 3886
                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );                                      // 3887
                                                                                                                      // 3888
                        for ( ; i < k; ) {                                                                            // 3889
                                                                                                                      // 3890
                            // 53 bits:                                                                               // 3891
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)                                  // 3892
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000                            // 3893
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)                                             // 3894
                            //                                     11111 11111111 11111111                            // 3895
                            // 0x20000 is 2^21.                                                                       // 3896
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);                                                   // 3897
                                                                                                                      // 3898
                            // Rejection sampling:                                                                    // 3899
                            // 0 <= v < 9007199254740992                                                              // 3900
                            // Probability that v >= 9e15, is                                                         // 3901
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251                             // 3902
                            if ( v >= 9e15 ) {                                                                        // 3903
                                b = crypto.getRandomValues( new Uint32Array(2) );                                     // 3904
                                a[i] = b[0];                                                                          // 3905
                                a[i + 1] = b[1];                                                                      // 3906
                            } else {                                                                                  // 3907
                                                                                                                      // 3908
                                // 0 <= v <= 8999999999999999                                                         // 3909
                                // 0 <= (v % 1e14) <= 99999999999999                                                  // 3910
                                c.push( v % 1e14 );                                                                   // 3911
                                i += 2;                                                                               // 3912
                            }                                                                                         // 3913
                        }                                                                                             // 3914
                        i = k / 2;                                                                                    // 3915
                                                                                                                      // 3916
                    // Node.js supporting crypto.randomBytes.                                                         // 3917
                    } else if ( crypto && crypto.randomBytes ) {                                                      // 3918
                                                                                                                      // 3919
                        // buffer                                                                                     // 3920
                        a = crypto.randomBytes( k *= 7 );                                                             // 3921
                                                                                                                      // 3922
                        for ( ; i < k; ) {                                                                            // 3923
                                                                                                                      // 3924
                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40                                         // 3925
                            // 0x100000000 is 2^32, 0x1000000 is 2^24                                                 // 3926
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111                            // 3927
                            // 0 <= v < 9007199254740992                                                              // 3928
                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +                  // 3929
                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +                             // 3930
                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];                                  // 3931
                                                                                                                      // 3932
                            if ( v >= 9e15 ) {                                                                        // 3933
                                crypto.randomBytes(7).copy( a, i );                                                   // 3934
                            } else {                                                                                  // 3935
                                                                                                                      // 3936
                                // 0 <= (v % 1e14) <= 99999999999999                                                  // 3937
                                c.push( v % 1e14 );                                                                   // 3938
                                i += 7;                                                                               // 3939
                            }                                                                                         // 3940
                        }                                                                                             // 3941
                        i = k / 7;                                                                                    // 3942
                    } else if (ERRORS) {                                                                              // 3943
                        raise( 14, 'crypto unavailable', crypto );                                                    // 3944
                    }                                                                                                 // 3945
                }                                                                                                     // 3946
                                                                                                                      // 3947
                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.                     // 3948
                if (!i) {                                                                                             // 3949
                                                                                                                      // 3950
                    for ( ; i < k; ) {                                                                                // 3951
                        v = random53bitInt();                                                                         // 3952
                        if ( v < 9e15 ) c[i++] = v % 1e14;                                                            // 3953
                    }                                                                                                 // 3954
                }                                                                                                     // 3955
                                                                                                                      // 3956
                k = c[--i];                                                                                           // 3957
                dp %= LOG_BASE;                                                                                       // 3958
                                                                                                                      // 3959
                // Convert trailing digits to zeros according to dp.                                                  // 3960
                if ( k && dp ) {                                                                                      // 3961
                    v = POWS_TEN[LOG_BASE - dp];                                                                      // 3962
                    c[i] = mathfloor( k / v ) * v;                                                                    // 3963
                }                                                                                                     // 3964
                                                                                                                      // 3965
                // Remove trailing elements which are zero.                                                           // 3966
                for ( ; c[i] === 0; c.pop(), i-- );                                                                   // 3967
                                                                                                                      // 3968
                // Zero?                                                                                              // 3969
                if ( i < 0 ) {                                                                                        // 3970
                    c = [ e = 0 ];                                                                                    // 3971
                } else {                                                                                              // 3972
                                                                                                                      // 3973
                    // Remove leading elements which are zero and adjust exponent accordingly.                        // 3974
                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);                                             // 3975
                                                                                                                      // 3976
                    // Count the digits of the first element of c to determine leading zeros, and...                  // 3977
                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);                                                    // 3978
                                                                                                                      // 3979
                    // adjust the exponent accordingly.                                                               // 3980
                    if ( i < LOG_BASE ) e -= LOG_BASE - i;                                                            // 3981
                }                                                                                                     // 3982
                                                                                                                      // 3983
                rand.e = e;                                                                                           // 3984
                rand.c = c;                                                                                           // 3985
                return rand;                                                                                          // 3986
            };                                                                                                        // 3987
        })();                                                                                                         // 3988
                                                                                                                      // 3989
                                                                                                                      // 3990
        // PRIVATE FUNCTIONS                                                                                          // 3991
                                                                                                                      // 3992
                                                                                                                      // 3993
        // Convert a numeric string of baseIn to a numeric string of baseOut.                                         // 3994
        function convertBase( str, baseOut, baseIn, sign ) {                                                          // 3995
            var d, e, k, r, x, xc, y,                                                                                 // 3996
                i = str.indexOf( '.' ),                                                                               // 3997
                dp = DECIMAL_PLACES,                                                                                  // 3998
                rm = ROUNDING_MODE;                                                                                   // 3999
                                                                                                                      // 4000
            if ( baseIn < 37 ) str = str.toLowerCase();                                                               // 4001
                                                                                                                      // 4002
            // Non-integer.                                                                                           // 4003
            if ( i >= 0 ) {                                                                                           // 4004
                k = POW_PRECISION;                                                                                    // 4005
                                                                                                                      // 4006
                // Unlimited precision.                                                                               // 4007
                POW_PRECISION = 0;                                                                                    // 4008
                str = str.replace( '.', '' );                                                                         // 4009
                y = new BigNumber(baseIn);                                                                            // 4010
                x = y.pow( str.length - i );                                                                          // 4011
                POW_PRECISION = k;                                                                                    // 4012
                                                                                                                      // 4013
                // Convert str as if an integer, then restore the fraction part by dividing the                       // 4014
                // result by its base raised to a power.                                                              // 4015
                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );                            // 4016
                y.e = y.c.length;                                                                                     // 4017
            }                                                                                                         // 4018
                                                                                                                      // 4019
            // Convert the number as integer.                                                                         // 4020
            xc = toBaseOut( str, baseIn, baseOut );                                                                   // 4021
            e = k = xc.length;                                                                                        // 4022
                                                                                                                      // 4023
            // Remove trailing zeros.                                                                                 // 4024
            for ( ; xc[--k] == 0; xc.pop() );                                                                         // 4025
            if ( !xc[0] ) return '0';                                                                                 // 4026
                                                                                                                      // 4027
            if ( i < 0 ) {                                                                                            // 4028
                --e;                                                                                                  // 4029
            } else {                                                                                                  // 4030
                x.c = xc;                                                                                             // 4031
                x.e = e;                                                                                              // 4032
                                                                                                                      // 4033
                // sign is needed for correct rounding.                                                               // 4034
                x.s = sign;                                                                                           // 4035
                x = div( x, y, dp, rm, baseOut );                                                                     // 4036
                xc = x.c;                                                                                             // 4037
                r = x.r;                                                                                              // 4038
                e = x.e;                                                                                              // 4039
            }                                                                                                         // 4040
                                                                                                                      // 4041
            d = e + dp + 1;                                                                                           // 4042
                                                                                                                      // 4043
            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.                   // 4044
            i = xc[d];                                                                                                // 4045
            k = baseOut / 2;                                                                                          // 4046
            r = r || d < 0 || xc[d + 1] != null;                                                                      // 4047
                                                                                                                      // 4048
            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                               // 4049
                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||                              // 4050
                         rm == ( x.s < 0 ? 8 : 7 ) );                                                                 // 4051
                                                                                                                      // 4052
            if ( d < 1 || !xc[0] ) {                                                                                  // 4053
                                                                                                                      // 4054
                // 1^-dp or 0.                                                                                        // 4055
                str = r ? toFixedPoint( '1', -dp ) : '0';                                                             // 4056
            } else {                                                                                                  // 4057
                xc.length = d;                                                                                        // 4058
                                                                                                                      // 4059
                if (r) {                                                                                              // 4060
                                                                                                                      // 4061
                    // Rounding up may mean the previous digit has to be rounded up and so on.                        // 4062
                    for ( --baseOut; ++xc[--d] > baseOut; ) {                                                         // 4063
                        xc[d] = 0;                                                                                    // 4064
                                                                                                                      // 4065
                        if ( !d ) {                                                                                   // 4066
                            ++e;                                                                                      // 4067
                            xc.unshift(1);                                                                            // 4068
                        }                                                                                             // 4069
                    }                                                                                                 // 4070
                }                                                                                                     // 4071
                                                                                                                      // 4072
                // Determine trailing zeros.                                                                          // 4073
                for ( k = xc.length; !xc[--k]; );                                                                     // 4074
                                                                                                                      // 4075
                // E.g. [4, 11, 15] becomes 4bf.                                                                      // 4076
                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );                                   // 4077
                str = toFixedPoint( str, e );                                                                         // 4078
            }                                                                                                         // 4079
                                                                                                                      // 4080
            // The caller will add the sign.                                                                          // 4081
            return str;                                                                                               // 4082
        }                                                                                                             // 4083
                                                                                                                      // 4084
                                                                                                                      // 4085
        // Perform division in the specified base. Called by div and convertBase.                                     // 4086
        div = (function () {                                                                                          // 4087
                                                                                                                      // 4088
            // Assume non-zero x and k.                                                                               // 4089
            function multiply( x, k, base ) {                                                                         // 4090
                var m, temp, xlo, xhi,                                                                                // 4091
                    carry = 0,                                                                                        // 4092
                    i = x.length,                                                                                     // 4093
                    klo = k % SQRT_BASE,                                                                              // 4094
                    khi = k / SQRT_BASE | 0;                                                                          // 4095
                                                                                                                      // 4096
                for ( x = x.slice(); i--; ) {                                                                         // 4097
                    xlo = x[i] % SQRT_BASE;                                                                           // 4098
                    xhi = x[i] / SQRT_BASE | 0;                                                                       // 4099
                    m = khi * xlo + xhi * klo;                                                                        // 4100
                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;                                     // 4101
                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;                                  // 4102
                    x[i] = temp % base;                                                                               // 4103
                }                                                                                                     // 4104
                                                                                                                      // 4105
                if (carry) x.unshift(carry);                                                                          // 4106
                                                                                                                      // 4107
                return x;                                                                                             // 4108
            }                                                                                                         // 4109
                                                                                                                      // 4110
            function compare( a, b, aL, bL ) {                                                                        // 4111
                var i, cmp;                                                                                           // 4112
                                                                                                                      // 4113
                if ( aL != bL ) {                                                                                     // 4114
                    cmp = aL > bL ? 1 : -1;                                                                           // 4115
                } else {                                                                                              // 4116
                                                                                                                      // 4117
                    for ( i = cmp = 0; i < aL; i++ ) {                                                                // 4118
                                                                                                                      // 4119
                        if ( a[i] != b[i] ) {                                                                         // 4120
                            cmp = a[i] > b[i] ? 1 : -1;                                                               // 4121
                            break;                                                                                    // 4122
                        }                                                                                             // 4123
                    }                                                                                                 // 4124
                }                                                                                                     // 4125
                return cmp;                                                                                           // 4126
            }                                                                                                         // 4127
                                                                                                                      // 4128
            function subtract( a, b, aL, base ) {                                                                     // 4129
                var i = 0;                                                                                            // 4130
                                                                                                                      // 4131
                // Subtract b from a.                                                                                 // 4132
                for ( ; aL--; ) {                                                                                     // 4133
                    a[aL] -= i;                                                                                       // 4134
                    i = a[aL] < b[aL] ? 1 : 0;                                                                        // 4135
                    a[aL] = i * base + a[aL] - b[aL];                                                                 // 4136
                }                                                                                                     // 4137
                                                                                                                      // 4138
                // Remove leading zeros.                                                                              // 4139
                for ( ; !a[0] && a.length > 1; a.shift() );                                                           // 4140
            }                                                                                                         // 4141
                                                                                                                      // 4142
            // x: dividend, y: divisor.                                                                               // 4143
            return function ( x, y, dp, rm, base ) {                                                                  // 4144
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,                             // 4145
                    yL, yz,                                                                                           // 4146
                    s = x.s == y.s ? 1 : -1,                                                                          // 4147
                    xc = x.c,                                                                                         // 4148
                    yc = y.c;                                                                                         // 4149
                                                                                                                      // 4150
                // Either NaN, Infinity or 0?                                                                         // 4151
                if ( !xc || !xc[0] || !yc || !yc[0] ) {                                                               // 4152
                                                                                                                      // 4153
                    return new BigNumber(                                                                             // 4154
                                                                                                                      // 4155
                      // Return NaN if either NaN, or both Infinity or 0.                                             // 4156
                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :                                     // 4157
                                                                                                                      // 4158
                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.                    // 4159
                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0                                                       // 4160
                    );                                                                                                // 4161
                }                                                                                                     // 4162
                                                                                                                      // 4163
                q = new BigNumber(s);                                                                                 // 4164
                qc = q.c = [];                                                                                        // 4165
                e = x.e - y.e;                                                                                        // 4166
                s = dp + e + 1;                                                                                       // 4167
                                                                                                                      // 4168
                if ( !base ) {                                                                                        // 4169
                    base = BASE;                                                                                      // 4170
                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );                                      // 4171
                    s = s / LOG_BASE | 0;                                                                             // 4172
                }                                                                                                     // 4173
                                                                                                                      // 4174
                // Result exponent may be one less then the current value of e.                                       // 4175
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.                       // 4176
                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );                                                          // 4177
                if ( yc[i] > ( xc[i] || 0 ) ) e--;                                                                    // 4178
                                                                                                                      // 4179
                if ( s < 0 ) {                                                                                        // 4180
                    qc.push(1);                                                                                       // 4181
                    more = true;                                                                                      // 4182
                } else {                                                                                              // 4183
                    xL = xc.length;                                                                                   // 4184
                    yL = yc.length;                                                                                   // 4185
                    i = 0;                                                                                            // 4186
                    s += 2;                                                                                           // 4187
                                                                                                                      // 4188
                    // Normalise xc and yc so highest order digit of yc is >= base / 2.                               // 4189
                                                                                                                      // 4190
                    n = mathfloor( base / ( yc[0] + 1 ) );                                                            // 4191
                                                                                                                      // 4192
                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.                        // 4193
                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {                                                 // 4194
                    if ( n > 1 ) {                                                                                    // 4195
                        yc = multiply( yc, n, base );                                                                 // 4196
                        xc = multiply( xc, n, base );                                                                 // 4197
                        yL = yc.length;                                                                               // 4198
                        xL = xc.length;                                                                               // 4199
                    }                                                                                                 // 4200
                                                                                                                      // 4201
                    xi = yL;                                                                                          // 4202
                    rem = xc.slice( 0, yL );                                                                          // 4203
                    remL = rem.length;                                                                                // 4204
                                                                                                                      // 4205
                    // Add zeros to make remainder as long as divisor.                                                // 4206
                    for ( ; remL < yL; rem[remL++] = 0 );                                                             // 4207
                    yz = yc.slice();                                                                                  // 4208
                    yz.unshift(0);                                                                                    // 4209
                    yc0 = yc[0];                                                                                      // 4210
                    if ( yc[1] >= base / 2 ) yc0++;                                                                   // 4211
                    // Not necessary, but to prevent trial digit n > base, when using base 3.                         // 4212
                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;                                             // 4213
                                                                                                                      // 4214
                    do {                                                                                              // 4215
                        n = 0;                                                                                        // 4216
                                                                                                                      // 4217
                        // Compare divisor and remainder.                                                             // 4218
                        cmp = compare( yc, rem, yL, remL );                                                           // 4219
                                                                                                                      // 4220
                        // If divisor < remainder.                                                                    // 4221
                        if ( cmp < 0 ) {                                                                              // 4222
                                                                                                                      // 4223
                            // Calculate trial digit, n.                                                              // 4224
                                                                                                                      // 4225
                            rem0 = rem[0];                                                                            // 4226
                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );                                   // 4227
                                                                                                                      // 4228
                            // n is how many times the divisor goes into the current remainder.                       // 4229
                            n = mathfloor( rem0 / yc0 );                                                              // 4230
                                                                                                                      // 4231
                            //  Algorithm:                                                                            // 4232
                            //  1. product = divisor * trial digit (n)                                                // 4233
                            //  2. if product > remainder: product -= divisor, n--                                    // 4234
                            //  3. remainder -= product                                                               // 4235
                            //  4. if product was < remainder at 2:                                                   // 4236
                            //    5. compare new remainder and divisor                                                // 4237
                            //    6. If remainder > divisor: remainder -= divisor, n++                                // 4238
                                                                                                                      // 4239
                            if ( n > 1 ) {                                                                            // 4240
                                                                                                                      // 4241
                                // n may be > base only when base is 3.                                               // 4242
                                if (n >= base) n = base - 1;                                                          // 4243
                                                                                                                      // 4244
                                // product = divisor * trial digit.                                                   // 4245
                                prod = multiply( yc, n, base );                                                       // 4246
                                prodL = prod.length;                                                                  // 4247
                                remL = rem.length;                                                                    // 4248
                                                                                                                      // 4249
                                // Compare product and remainder.                                                     // 4250
                                // If product > remainder.                                                            // 4251
                                // Trial digit n too high.                                                            // 4252
                                // n is 1 too high about 5% of the time, and is not known to have                     // 4253
                                // ever been more than 1 too high.                                                    // 4254
                                while ( compare( prod, rem, prodL, remL ) == 1 ) {                                    // 4255
                                    n--;                                                                              // 4256
                                                                                                                      // 4257
                                    // Subtract divisor from product.                                                 // 4258
                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );                              // 4259
                                    prodL = prod.length;                                                              // 4260
                                    cmp = 1;                                                                          // 4261
                                }                                                                                     // 4262
                            } else {                                                                                  // 4263
                                                                                                                      // 4264
                                // n is 0 or 1, cmp is -1.                                                            // 4265
                                // If n is 0, there is no need to compare yc and rem again below,                     // 4266
                                // so change cmp to 1 to avoid it.                                                    // 4267
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.                      // 4268
                                if ( n == 0 ) {                                                                       // 4269
                                                                                                                      // 4270
                                    // divisor < remainder, so n must be at least 1.                                  // 4271
                                    cmp = n = 1;                                                                      // 4272
                                }                                                                                     // 4273
                                                                                                                      // 4274
                                // product = divisor                                                                  // 4275
                                prod = yc.slice();                                                                    // 4276
                                prodL = prod.length;                                                                  // 4277
                            }                                                                                         // 4278
                                                                                                                      // 4279
                            if ( prodL < remL ) prod.unshift(0);                                                      // 4280
                                                                                                                      // 4281
                            // Subtract product from remainder.                                                       // 4282
                            subtract( rem, prod, remL, base );                                                        // 4283
                            remL = rem.length;                                                                        // 4284
                                                                                                                      // 4285
                             // If product was < remainder.                                                           // 4286
                            if ( cmp == -1 ) {                                                                        // 4287
                                                                                                                      // 4288
                                // Compare divisor and new remainder.                                                 // 4289
                                // If divisor < new remainder, subtract divisor from remainder.                       // 4290
                                // Trial digit n too low.                                                             // 4291
                                // n is 1 too low about 5% of the time, and very rarely 2 too low.                    // 4292
                                while ( compare( yc, rem, yL, remL ) < 1 ) {                                          // 4293
                                    n++;                                                                              // 4294
                                                                                                                      // 4295
                                    // Subtract divisor from remainder.                                               // 4296
                                    subtract( rem, yL < remL ? yz : yc, remL, base );                                 // 4297
                                    remL = rem.length;                                                                // 4298
                                }                                                                                     // 4299
                            }                                                                                         // 4300
                        } else if ( cmp === 0 ) {                                                                     // 4301
                            n++;                                                                                      // 4302
                            rem = [0];                                                                                // 4303
                        } // else cmp === 1 and n will be 0                                                           // 4304
                                                                                                                      // 4305
                        // Add the next digit, n, to the result array.                                                // 4306
                        qc[i++] = n;                                                                                  // 4307
                                                                                                                      // 4308
                        // Update the remainder.                                                                      // 4309
                        if ( rem[0] ) {                                                                               // 4310
                            rem[remL++] = xc[xi] || 0;                                                                // 4311
                        } else {                                                                                      // 4312
                            rem = [ xc[xi] ];                                                                         // 4313
                            remL = 1;                                                                                 // 4314
                        }                                                                                             // 4315
                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );                                               // 4316
                                                                                                                      // 4317
                    more = rem[0] != null;                                                                            // 4318
                                                                                                                      // 4319
                    // Leading zero?                                                                                  // 4320
                    if ( !qc[0] ) qc.shift();                                                                         // 4321
                }                                                                                                     // 4322
                                                                                                                      // 4323
                if ( base == BASE ) {                                                                                 // 4324
                                                                                                                      // 4325
                    // To calculate q.e, first get the number of digits of qc[0].                                     // 4326
                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );                                                  // 4327
                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );                                    // 4328
                                                                                                                      // 4329
                // Caller is convertBase.                                                                             // 4330
                } else {                                                                                              // 4331
                    q.e = e;                                                                                          // 4332
                    q.r = +more;                                                                                      // 4333
                }                                                                                                     // 4334
                                                                                                                      // 4335
                return q;                                                                                             // 4336
            };                                                                                                        // 4337
        })();                                                                                                         // 4338
                                                                                                                      // 4339
                                                                                                                      // 4340
        /*                                                                                                            // 4341
         * Return a string representing the value of BigNumber n in fixed-point or exponential                        // 4342
         * notation rounded to the specified decimal places or significant digits.                                    // 4343
         *                                                                                                            // 4344
         * n is a BigNumber.                                                                                          // 4345
         * i is the index of the last digit required (i.e. the digit that may be rounded up).                         // 4346
         * rm is the rounding mode.                                                                                   // 4347
         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.                            // 4348
         */                                                                                                           // 4349
        function format( n, i, rm, caller ) {                                                                         // 4350
            var c0, e, ne, len, str;                                                                                  // 4351
                                                                                                                      // 4352
            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )                                           // 4353
              ? rm | 0 : ROUNDING_MODE;                                                                               // 4354
                                                                                                                      // 4355
            if ( !n.c ) return n.toString();                                                                          // 4356
            c0 = n.c[0];                                                                                              // 4357
            ne = n.e;                                                                                                 // 4358
                                                                                                                      // 4359
            if ( i == null ) {                                                                                        // 4360
                str = coeffToString( n.c );                                                                           // 4361
                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG                                                // 4362
                  ? toExponential( str, ne )                                                                          // 4363
                  : toFixedPoint( str, ne );                                                                          // 4364
            } else {                                                                                                  // 4365
                n = round( new BigNumber(n), i, rm );                                                                 // 4366
                                                                                                                      // 4367
                // n.e may have changed if the value was rounded up.                                                  // 4368
                e = n.e;                                                                                              // 4369
                                                                                                                      // 4370
                str = coeffToString( n.c );                                                                           // 4371
                len = str.length;                                                                                     // 4372
                                                                                                                      // 4373
                // toPrecision returns exponential notation if the number of significant digits                       // 4374
                // specified is less than the number of digits necessary to represent the integer                     // 4375
                // part of the value in fixed-point notation.                                                         // 4376
                                                                                                                      // 4377
                // Exponential notation.                                                                              // 4378
                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {                                // 4379
                                                                                                                      // 4380
                    // Append zeros?                                                                                  // 4381
                    for ( ; len < i; str += '0', len++ );                                                             // 4382
                    str = toExponential( str, e );                                                                    // 4383
                                                                                                                      // 4384
                // Fixed-point notation.                                                                              // 4385
                } else {                                                                                              // 4386
                    i -= ne;                                                                                          // 4387
                    str = toFixedPoint( str, e );                                                                     // 4388
                                                                                                                      // 4389
                    // Append zeros?                                                                                  // 4390
                    if ( e + 1 > len ) {                                                                              // 4391
                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );                                           // 4392
                    } else {                                                                                          // 4393
                        i += e - len;                                                                                 // 4394
                        if ( i > 0 ) {                                                                                // 4395
                            if ( e + 1 == len ) str += '.';                                                           // 4396
                            for ( ; i--; str += '0' );                                                                // 4397
                        }                                                                                             // 4398
                    }                                                                                                 // 4399
                }                                                                                                     // 4400
            }                                                                                                         // 4401
                                                                                                                      // 4402
            return n.s < 0 && c0 ? '-' + str : str;                                                                   // 4403
        }                                                                                                             // 4404
                                                                                                                      // 4405
                                                                                                                      // 4406
        // Handle BigNumber.max and BigNumber.min.                                                                    // 4407
        function maxOrMin( args, method ) {                                                                           // 4408
            var m, n,                                                                                                 // 4409
                i = 0;                                                                                                // 4410
                                                                                                                      // 4411
            if ( isArray( args[0] ) ) args = args[0];                                                                 // 4412
            m = new BigNumber( args[0] );                                                                             // 4413
                                                                                                                      // 4414
            for ( ; ++i < args.length; ) {                                                                            // 4415
                n = new BigNumber( args[i] );                                                                         // 4416
                                                                                                                      // 4417
                // If any number is NaN, return NaN.                                                                  // 4418
                if ( !n.s ) {                                                                                         // 4419
                    m = n;                                                                                            // 4420
                    break;                                                                                            // 4421
                } else if ( method.call( m, n ) ) {                                                                   // 4422
                    m = n;                                                                                            // 4423
                }                                                                                                     // 4424
            }                                                                                                         // 4425
                                                                                                                      // 4426
            return m;                                                                                                 // 4427
        }                                                                                                             // 4428
                                                                                                                      // 4429
                                                                                                                      // 4430
        /*                                                                                                            // 4431
         * Return true if n is an integer in range, otherwise throw.                                                  // 4432
         * Use for argument validation when ERRORS is true.                                                           // 4433
         */                                                                                                           // 4434
        function intValidatorWithErrors( n, min, max, caller, name ) {                                                // 4435
            if ( n < min || n > max || n != truncate(n) ) {                                                           // 4436
                raise( caller, ( name || 'decimal places' ) +                                                         // 4437
                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );                                  // 4438
            }                                                                                                         // 4439
                                                                                                                      // 4440
            return true;                                                                                              // 4441
        }                                                                                                             // 4442
                                                                                                                      // 4443
                                                                                                                      // 4444
        /*                                                                                                            // 4445
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.                    // 4446
         * Called by minus, plus and times.                                                                           // 4447
         */                                                                                                           // 4448
        function normalise( n, c, e ) {                                                                               // 4449
            var i = 1,                                                                                                // 4450
                j = c.length;                                                                                         // 4451
                                                                                                                      // 4452
             // Remove trailing zeros.                                                                                // 4453
            for ( ; !c[--j]; c.pop() );                                                                               // 4454
                                                                                                                      // 4455
            // Calculate the base 10 exponent. First get the number of digits of c[0].                                // 4456
            for ( j = c[0]; j >= 10; j /= 10, i++ );                                                                  // 4457
                                                                                                                      // 4458
            // Overflow?                                                                                              // 4459
            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {                                                           // 4460
                                                                                                                      // 4461
                // Infinity.                                                                                          // 4462
                n.c = n.e = null;                                                                                     // 4463
                                                                                                                      // 4464
            // Underflow?                                                                                             // 4465
            } else if ( e < MIN_EXP ) {                                                                               // 4466
                                                                                                                      // 4467
                // Zero.                                                                                              // 4468
                n.c = [ n.e = 0 ];                                                                                    // 4469
            } else {                                                                                                  // 4470
                n.e = e;                                                                                              // 4471
                n.c = c;                                                                                              // 4472
            }                                                                                                         // 4473
                                                                                                                      // 4474
            return n;                                                                                                 // 4475
        }                                                                                                             // 4476
                                                                                                                      // 4477
                                                                                                                      // 4478
        // Handle values that fail the validity test in BigNumber.                                                    // 4479
        parseNumeric = (function () {                                                                                 // 4480
            var basePrefix = /^(-?)0([xbo])/i,                                                                        // 4481
                dotAfter = /^([^.]+)\.$/,                                                                             // 4482
                dotBefore = /^\.([^.]+)$/,                                                                            // 4483
                isInfinityOrNaN = /^-?(Infinity|NaN)$/,                                                               // 4484
                whitespaceOrPlus = /^\s*\+|^\s+|\s+$/g;                                                               // 4485
                                                                                                                      // 4486
            return function ( x, str, num, b ) {                                                                      // 4487
                var base,                                                                                             // 4488
                    s = num ? str : str.replace( whitespaceOrPlus, '' );                                              // 4489
                                                                                                                      // 4490
                // No exception on ±Infinity or NaN.                                                                  // 4491
                if ( isInfinityOrNaN.test(s) ) {                                                                      // 4492
                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;                                                           // 4493
                } else {                                                                                              // 4494
                    if ( !num ) {                                                                                     // 4495
                                                                                                                      // 4496
                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i                                                 // 4497
                        s = s.replace( basePrefix, function ( m, p1, p2 ) {                                           // 4498
                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;                         // 4499
                            return !b || b == base ? p1 : m;                                                          // 4500
                        });                                                                                           // 4501
                                                                                                                      // 4502
                        if (b) {                                                                                      // 4503
                            base = b;                                                                                 // 4504
                                                                                                                      // 4505
                            // E.g. '1.' to '1', '.1' to '0.1'                                                        // 4506
                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );                             // 4507
                        }                                                                                             // 4508
                                                                                                                      // 4509
                        if ( str != s ) return new BigNumber( s, base );                                              // 4510
                    }                                                                                                 // 4511
                                                                                                                      // 4512
                    // 'new BigNumber() not a number: {n}'                                                            // 4513
                    // 'new BigNumber() not a base {b} number: {n}'                                                   // 4514
                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );                    // 4515
                    x.s = null;                                                                                       // 4516
                }                                                                                                     // 4517
                                                                                                                      // 4518
                x.c = x.e = null;                                                                                     // 4519
                id = 0;                                                                                               // 4520
            }                                                                                                         // 4521
        })();                                                                                                         // 4522
                                                                                                                      // 4523
                                                                                                                      // 4524
        // Throw a BigNumber Error.                                                                                   // 4525
        function raise( caller, msg, val ) {                                                                          // 4526
            var error = new Error( [                                                                                  // 4527
                'new BigNumber',     // 0                                                                             // 4528
                'cmp',               // 1                                                                             // 4529
                'config',            // 2                                                                             // 4530
                'div',               // 3                                                                             // 4531
                'divToInt',          // 4                                                                             // 4532
                'eq',                // 5                                                                             // 4533
                'gt',                // 6                                                                             // 4534
                'gte',               // 7                                                                             // 4535
                'lt',                // 8                                                                             // 4536
                'lte',               // 9                                                                             // 4537
                'minus',             // 10                                                                            // 4538
                'mod',               // 11                                                                            // 4539
                'plus',              // 12                                                                            // 4540
                'precision',         // 13                                                                            // 4541
                'random',            // 14                                                                            // 4542
                'round',             // 15                                                                            // 4543
                'shift',             // 16                                                                            // 4544
                'times',             // 17                                                                            // 4545
                'toDigits',          // 18                                                                            // 4546
                'toExponential',     // 19                                                                            // 4547
                'toFixed',           // 20                                                                            // 4548
                'toFormat',          // 21                                                                            // 4549
                'toFraction',        // 22                                                                            // 4550
                'pow',               // 23                                                                            // 4551
                'toPrecision',       // 24                                                                            // 4552
                'toString',          // 25                                                                            // 4553
                'BigNumber'          // 26                                                                            // 4554
            ][caller] + '() ' + msg + ': ' + val );                                                                   // 4555
                                                                                                                      // 4556
            error.name = 'BigNumber Error';                                                                           // 4557
            id = 0;                                                                                                   // 4558
            throw error;                                                                                              // 4559
        }                                                                                                             // 4560
                                                                                                                      // 4561
                                                                                                                      // 4562
        /*                                                                                                            // 4563
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.                        // 4564
         * If r is truthy, it is known that there are more digits after the rounding digit.                           // 4565
         */                                                                                                           // 4566
        function round( x, sd, rm, r ) {                                                                              // 4567
            var d, i, j, k, n, ni, rd,                                                                                // 4568
                xc = x.c,                                                                                             // 4569
                pows10 = POWS_TEN;                                                                                    // 4570
                                                                                                                      // 4571
            // if x is not Infinity or NaN...                                                                         // 4572
            if (xc) {                                                                                                 // 4573
                                                                                                                      // 4574
                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.                   // 4575
                // n is a base 1e14 number, the value of the element of array x.c containing rd.                      // 4576
                // ni is the index of n within x.c.                                                                   // 4577
                // d is the number of digits of n.                                                                    // 4578
                // i is the index of rd within n including leading zeros.                                             // 4579
                // j is the actual index of rd within n (if < 0, rd is a leading zero).                               // 4580
                out: {                                                                                                // 4581
                                                                                                                      // 4582
                    // Get the number of digits of the first element of xc.                                           // 4583
                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );                                                  // 4584
                    i = sd - d;                                                                                       // 4585
                                                                                                                      // 4586
                    // If the rounding digit is in the first element of xc...                                         // 4587
                    if ( i < 0 ) {                                                                                    // 4588
                        i += LOG_BASE;                                                                                // 4589
                        j = sd;                                                                                       // 4590
                        n = xc[ ni = 0 ];                                                                             // 4591
                                                                                                                      // 4592
                        // Get the rounding digit at index j of n.                                                    // 4593
                        rd = n / pows10[ d - j - 1 ] % 10 | 0;                                                        // 4594
                    } else {                                                                                          // 4595
                        ni = mathceil( ( i + 1 ) / LOG_BASE );                                                        // 4596
                                                                                                                      // 4597
                        if ( ni >= xc.length ) {                                                                      // 4598
                                                                                                                      // 4599
                            if (r) {                                                                                  // 4600
                                                                                                                      // 4601
                                // Needed by sqrt.                                                                    // 4602
                                for ( ; xc.length <= ni; xc.push(0) );                                                // 4603
                                n = rd = 0;                                                                           // 4604
                                d = 1;                                                                                // 4605
                                i %= LOG_BASE;                                                                        // 4606
                                j = i - LOG_BASE + 1;                                                                 // 4607
                            } else {                                                                                  // 4608
                                break out;                                                                            // 4609
                            }                                                                                         // 4610
                        } else {                                                                                      // 4611
                            n = k = xc[ni];                                                                           // 4612
                                                                                                                      // 4613
                            // Get the number of digits of n.                                                         // 4614
                            for ( d = 1; k >= 10; k /= 10, d++ );                                                     // 4615
                                                                                                                      // 4616
                            // Get the index of rd within n.                                                          // 4617
                            i %= LOG_BASE;                                                                            // 4618
                                                                                                                      // 4619
                            // Get the index of rd within n, adjusted for leading zeros.                              // 4620
                            // The number of leading zeros of n is given by LOG_BASE - d.                             // 4621
                            j = i - LOG_BASE + d;                                                                     // 4622
                                                                                                                      // 4623
                            // Get the rounding digit at index j of n.                                                // 4624
                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;                                        // 4625
                        }                                                                                             // 4626
                    }                                                                                                 // 4627
                                                                                                                      // 4628
                    r = r || sd < 0 ||                                                                                // 4629
                                                                                                                      // 4630
                    // Are there any non-zero digits after the rounding digit?                                        // 4631
                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right                  // 4632
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.                   // 4633
                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );                                  // 4634
                                                                                                                      // 4635
                    r = rm < 4                                                                                        // 4636
                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                       // 4637
                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&                                             // 4638
                                                                                                                      // 4639
                        // Check whether the digit to the left of the rounding digit is odd.                          // 4640
                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||                      // 4641
                          rm == ( x.s < 0 ? 8 : 7 ) );                                                                // 4642
                                                                                                                      // 4643
                    if ( sd < 1 || !xc[0] ) {                                                                         // 4644
                        xc.length = 0;                                                                                // 4645
                                                                                                                      // 4646
                        if (r) {                                                                                      // 4647
                                                                                                                      // 4648
                            // Convert sd to decimal places.                                                          // 4649
                            sd -= x.e + 1;                                                                            // 4650
                                                                                                                      // 4651
                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.                                                       // 4652
                            xc[0] = pows10[ sd % LOG_BASE ];                                                          // 4653
                            x.e = -sd || 0;                                                                           // 4654
                        } else {                                                                                      // 4655
                                                                                                                      // 4656
                            // Zero.                                                                                  // 4657
                            xc[0] = x.e = 0;                                                                          // 4658
                        }                                                                                             // 4659
                                                                                                                      // 4660
                        return x;                                                                                     // 4661
                    }                                                                                                 // 4662
                                                                                                                      // 4663
                    // Remove excess digits.                                                                          // 4664
                    if ( i == 0 ) {                                                                                   // 4665
                        xc.length = ni;                                                                               // 4666
                        k = 1;                                                                                        // 4667
                        ni--;                                                                                         // 4668
                    } else {                                                                                          // 4669
                        xc.length = ni + 1;                                                                           // 4670
                        k = pows10[ LOG_BASE - i ];                                                                   // 4671
                                                                                                                      // 4672
                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.                                       // 4673
                        // j > 0 means i > number of leading zeros of n.                                              // 4674
                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;                        // 4675
                    }                                                                                                 // 4676
                                                                                                                      // 4677
                    // Round up?                                                                                      // 4678
                    if (r) {                                                                                          // 4679
                                                                                                                      // 4680
                        for ( ; ; ) {                                                                                 // 4681
                                                                                                                      // 4682
                            // If the digit to be rounded up is in the first element of xc...                         // 4683
                            if ( ni == 0 ) {                                                                          // 4684
                                                                                                                      // 4685
                                // i will be the length of xc[0] before k is added.                                   // 4686
                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );                                      // 4687
                                j = xc[0] += k;                                                                       // 4688
                                for ( k = 1; j >= 10; j /= 10, k++ );                                                 // 4689
                                                                                                                      // 4690
                                // if i != k the length has increased.                                                // 4691
                                if ( i != k ) {                                                                       // 4692
                                    x.e++;                                                                            // 4693
                                    if ( xc[0] == BASE ) xc[0] = 1;                                                   // 4694
                                }                                                                                     // 4695
                                                                                                                      // 4696
                                break;                                                                                // 4697
                            } else {                                                                                  // 4698
                                xc[ni] += k;                                                                          // 4699
                                if ( xc[ni] != BASE ) break;                                                          // 4700
                                xc[ni--] = 0;                                                                         // 4701
                                k = 1;                                                                                // 4702
                            }                                                                                         // 4703
                        }                                                                                             // 4704
                    }                                                                                                 // 4705
                                                                                                                      // 4706
                    // Remove trailing zeros.                                                                         // 4707
                    for ( i = xc.length; xc[--i] === 0; xc.pop() );                                                   // 4708
                }                                                                                                     // 4709
                                                                                                                      // 4710
                // Overflow? Infinity.                                                                                // 4711
                if ( x.e > MAX_EXP ) {                                                                                // 4712
                    x.c = x.e = null;                                                                                 // 4713
                                                                                                                      // 4714
                // Underflow? Zero.                                                                                   // 4715
                } else if ( x.e < MIN_EXP ) {                                                                         // 4716
                    x.c = [ x.e = 0 ];                                                                                // 4717
                }                                                                                                     // 4718
            }                                                                                                         // 4719
                                                                                                                      // 4720
            return x;                                                                                                 // 4721
        }                                                                                                             // 4722
                                                                                                                      // 4723
                                                                                                                      // 4724
        // PROTOTYPE/INSTANCE METHODS                                                                                 // 4725
                                                                                                                      // 4726
                                                                                                                      // 4727
        /*                                                                                                            // 4728
         * Return a new BigNumber whose value is the absolute value of this BigNumber.                                // 4729
         */                                                                                                           // 4730
        P.absoluteValue = P.abs = function () {                                                                       // 4731
            var x = new BigNumber(this);                                                                              // 4732
            if ( x.s < 0 ) x.s = 1;                                                                                   // 4733
            return x;                                                                                                 // 4734
        };                                                                                                            // 4735
                                                                                                                      // 4736
                                                                                                                      // 4737
        /*                                                                                                            // 4738
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                       // 4739
         * number in the direction of Infinity.                                                                       // 4740
         */                                                                                                           // 4741
        P.ceil = function () {                                                                                        // 4742
            return round( new BigNumber(this), this.e + 1, 2 );                                                       // 4743
        };                                                                                                            // 4744
                                                                                                                      // 4745
                                                                                                                      // 4746
        /*                                                                                                            // 4747
         * Return                                                                                                     // 4748
         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),                             // 4749
         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),                               // 4750
         * 0 if they have the same value,                                                                             // 4751
         * or null if the value of either is NaN.                                                                     // 4752
         */                                                                                                           // 4753
        P.comparedTo = P.cmp = function ( y, b ) {                                                                    // 4754
            id = 1;                                                                                                   // 4755
            return compare( this, new BigNumber( y, b ) );                                                            // 4756
        };                                                                                                            // 4757
                                                                                                                      // 4758
                                                                                                                      // 4759
        /*                                                                                                            // 4760
         * Return the number of decimal places of the value of this BigNumber, or null if the value                   // 4761
         * of this BigNumber is ±Infinity or NaN.                                                                     // 4762
         */                                                                                                           // 4763
        P.decimalPlaces = P.dp = function () {                                                                        // 4764
            var n, v,                                                                                                 // 4765
                c = this.c;                                                                                           // 4766
                                                                                                                      // 4767
            if ( !c ) return null;                                                                                    // 4768
            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;                                  // 4769
                                                                                                                      // 4770
            // Subtract the number of trailing zeros of the last number.                                              // 4771
            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );                                                      // 4772
            if ( n < 0 ) n = 0;                                                                                       // 4773
                                                                                                                      // 4774
            return n;                                                                                                 // 4775
        };                                                                                                            // 4776
                                                                                                                      // 4777
                                                                                                                      // 4778
        /*                                                                                                            // 4779
         *  n / 0 = I                                                                                                 // 4780
         *  n / N = N                                                                                                 // 4781
         *  n / I = 0                                                                                                 // 4782
         *  0 / n = 0                                                                                                 // 4783
         *  0 / 0 = N                                                                                                 // 4784
         *  0 / N = N                                                                                                 // 4785
         *  0 / I = 0                                                                                                 // 4786
         *  N / n = N                                                                                                 // 4787
         *  N / 0 = N                                                                                                 // 4788
         *  N / N = N                                                                                                 // 4789
         *  N / I = N                                                                                                 // 4790
         *  I / n = I                                                                                                 // 4791
         *  I / 0 = I                                                                                                 // 4792
         *  I / N = N                                                                                                 // 4793
         *  I / I = N                                                                                                 // 4794
         *                                                                                                            // 4795
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of                  // 4796
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                    // 4797
         */                                                                                                           // 4798
        P.dividedBy = P.div = function ( y, b ) {                                                                     // 4799
            id = 3;                                                                                                   // 4800
            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );                                 // 4801
        };                                                                                                            // 4802
                                                                                                                      // 4803
                                                                                                                      // 4804
        /*                                                                                                            // 4805
         * Return a new BigNumber whose value is the integer part of dividing the value of this                       // 4806
         * BigNumber by the value of BigNumber(y, b).                                                                 // 4807
         */                                                                                                           // 4808
        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {                                                       // 4809
            id = 4;                                                                                                   // 4810
            return div( this, new BigNumber( y, b ), 0, 1 );                                                          // 4811
        };                                                                                                            // 4812
                                                                                                                      // 4813
                                                                                                                      // 4814
        /*                                                                                                            // 4815
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),                       // 4816
         * otherwise returns false.                                                                                   // 4817
         */                                                                                                           // 4818
        P.equals = P.eq = function ( y, b ) {                                                                         // 4819
            id = 5;                                                                                                   // 4820
            return compare( this, new BigNumber( y, b ) ) === 0;                                                      // 4821
        };                                                                                                            // 4822
                                                                                                                      // 4823
                                                                                                                      // 4824
        /*                                                                                                            // 4825
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                       // 4826
         * number in the direction of -Infinity.                                                                      // 4827
         */                                                                                                           // 4828
        P.floor = function () {                                                                                       // 4829
            return round( new BigNumber(this), this.e + 1, 3 );                                                       // 4830
        };                                                                                                            // 4831
                                                                                                                      // 4832
                                                                                                                      // 4833
        /*                                                                                                            // 4834
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),                   // 4835
         * otherwise returns false.                                                                                   // 4836
         */                                                                                                           // 4837
        P.greaterThan = P.gt = function ( y, b ) {                                                                    // 4838
            id = 6;                                                                                                   // 4839
            return compare( this, new BigNumber( y, b ) ) > 0;                                                        // 4840
        };                                                                                                            // 4841
                                                                                                                      // 4842
                                                                                                                      // 4843
        /*                                                                                                            // 4844
         * Return true if the value of this BigNumber is greater than or equal to the value of                        // 4845
         * BigNumber(y, b), otherwise returns false.                                                                  // 4846
         */                                                                                                           // 4847
        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {                                                          // 4848
            id = 7;                                                                                                   // 4849
            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;                                   // 4850
                                                                                                                      // 4851
        };                                                                                                            // 4852
                                                                                                                      // 4853
                                                                                                                      // 4854
        /*                                                                                                            // 4855
         * Return true if the value of this BigNumber is a finite number, otherwise returns false.                    // 4856
         */                                                                                                           // 4857
        P.isFinite = function () {                                                                                    // 4858
            return !!this.c;                                                                                          // 4859
        };                                                                                                            // 4860
                                                                                                                      // 4861
                                                                                                                      // 4862
        /*                                                                                                            // 4863
         * Return true if the value of this BigNumber is an integer, otherwise return false.                          // 4864
         */                                                                                                           // 4865
        P.isInteger = P.isInt = function () {                                                                         // 4866
            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;                                     // 4867
        };                                                                                                            // 4868
                                                                                                                      // 4869
                                                                                                                      // 4870
        /*                                                                                                            // 4871
         * Return true if the value of this BigNumber is NaN, otherwise returns false.                                // 4872
         */                                                                                                           // 4873
        P.isNaN = function () {                                                                                       // 4874
            return !this.s;                                                                                           // 4875
        };                                                                                                            // 4876
                                                                                                                      // 4877
                                                                                                                      // 4878
        /*                                                                                                            // 4879
         * Return true if the value of this BigNumber is negative, otherwise returns false.                           // 4880
         */                                                                                                           // 4881
        P.isNegative = P.isNeg = function () {                                                                        // 4882
            return this.s < 0;                                                                                        // 4883
        };                                                                                                            // 4884
                                                                                                                      // 4885
                                                                                                                      // 4886
        /*                                                                                                            // 4887
         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.                            // 4888
         */                                                                                                           // 4889
        P.isZero = function () {                                                                                      // 4890
            return !!this.c && this.c[0] == 0;                                                                        // 4891
        };                                                                                                            // 4892
                                                                                                                      // 4893
                                                                                                                      // 4894
        /*                                                                                                            // 4895
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),                      // 4896
         * otherwise returns false.                                                                                   // 4897
         */                                                                                                           // 4898
        P.lessThan = P.lt = function ( y, b ) {                                                                       // 4899
            id = 8;                                                                                                   // 4900
            return compare( this, new BigNumber( y, b ) ) < 0;                                                        // 4901
        };                                                                                                            // 4902
                                                                                                                      // 4903
                                                                                                                      // 4904
        /*                                                                                                            // 4905
         * Return true if the value of this BigNumber is less than or equal to the value of                           // 4906
         * BigNumber(y, b), otherwise returns false.                                                                  // 4907
         */                                                                                                           // 4908
        P.lessThanOrEqualTo = P.lte = function ( y, b ) {                                                             // 4909
            id = 9;                                                                                                   // 4910
            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;                                  // 4911
        };                                                                                                            // 4912
                                                                                                                      // 4913
                                                                                                                      // 4914
        /*                                                                                                            // 4915
         *  n - 0 = n                                                                                                 // 4916
         *  n - N = N                                                                                                 // 4917
         *  n - I = -I                                                                                                // 4918
         *  0 - n = -n                                                                                                // 4919
         *  0 - 0 = 0                                                                                                 // 4920
         *  0 - N = N                                                                                                 // 4921
         *  0 - I = -I                                                                                                // 4922
         *  N - n = N                                                                                                 // 4923
         *  N - 0 = N                                                                                                 // 4924
         *  N - N = N                                                                                                 // 4925
         *  N - I = N                                                                                                 // 4926
         *  I - n = I                                                                                                 // 4927
         *  I - 0 = I                                                                                                 // 4928
         *  I - N = N                                                                                                 // 4929
         *  I - I = N                                                                                                 // 4930
         *                                                                                                            // 4931
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of                       // 4932
         * BigNumber(y, b).                                                                                           // 4933
         */                                                                                                           // 4934
        P.minus = P.sub = function ( y, b ) {                                                                         // 4935
            var i, j, t, xLTy,                                                                                        // 4936
                x = this,                                                                                             // 4937
                a = x.s;                                                                                              // 4938
                                                                                                                      // 4939
            id = 10;                                                                                                  // 4940
            y = new BigNumber( y, b );                                                                                // 4941
            b = y.s;                                                                                                  // 4942
                                                                                                                      // 4943
            // Either NaN?                                                                                            // 4944
            if ( !a || !b ) return new BigNumber(NaN);                                                                // 4945
                                                                                                                      // 4946
            // Signs differ?                                                                                          // 4947
            if ( a != b ) {                                                                                           // 4948
                y.s = -b;                                                                                             // 4949
                return x.plus(y);                                                                                     // 4950
            }                                                                                                         // 4951
                                                                                                                      // 4952
            var xe = x.e / LOG_BASE,                                                                                  // 4953
                ye = y.e / LOG_BASE,                                                                                  // 4954
                xc = x.c,                                                                                             // 4955
                yc = y.c;                                                                                             // 4956
                                                                                                                      // 4957
            if ( !xe || !ye ) {                                                                                       // 4958
                                                                                                                      // 4959
                // Either Infinity?                                                                                   // 4960
                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );                        // 4961
                                                                                                                      // 4962
                // Either zero?                                                                                       // 4963
                if ( !xc[0] || !yc[0] ) {                                                                             // 4964
                                                                                                                      // 4965
                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                       // 4966
                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :                                       // 4967
                                                                                                                      // 4968
                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity                                   // 4969
                      ROUNDING_MODE == 3 ? -0 : 0 );                                                                  // 4970
                }                                                                                                     // 4971
            }                                                                                                         // 4972
                                                                                                                      // 4973
            xe = bitFloor(xe);                                                                                        // 4974
            ye = bitFloor(ye);                                                                                        // 4975
            xc = xc.slice();                                                                                          // 4976
                                                                                                                      // 4977
            // Determine which is the bigger number.                                                                  // 4978
            if ( a = xe - ye ) {                                                                                      // 4979
                                                                                                                      // 4980
                if ( xLTy = a < 0 ) {                                                                                 // 4981
                    a = -a;                                                                                           // 4982
                    t = xc;                                                                                           // 4983
                } else {                                                                                              // 4984
                    ye = xe;                                                                                          // 4985
                    t = yc;                                                                                           // 4986
                }                                                                                                     // 4987
                                                                                                                      // 4988
                t.reverse();                                                                                          // 4989
                                                                                                                      // 4990
                // Prepend zeros to equalise exponents.                                                               // 4991
                for ( b = a; b--; t.push(0) );                                                                        // 4992
                t.reverse();                                                                                          // 4993
            } else {                                                                                                  // 4994
                                                                                                                      // 4995
                // Exponents equal. Check digit by digit.                                                             // 4996
                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;                                         // 4997
                                                                                                                      // 4998
                for ( a = b = 0; b < j; b++ ) {                                                                       // 4999
                                                                                                                      // 5000
                    if ( xc[b] != yc[b] ) {                                                                           // 5001
                        xLTy = xc[b] < yc[b];                                                                         // 5002
                        break;                                                                                        // 5003
                    }                                                                                                 // 5004
                }                                                                                                     // 5005
            }                                                                                                         // 5006
                                                                                                                      // 5007
            // x < y? Point xc to the array of the bigger number.                                                     // 5008
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;                                                            // 5009
                                                                                                                      // 5010
            b = ( j = yc.length ) - ( i = xc.length );                                                                // 5011
                                                                                                                      // 5012
            // Append zeros to xc if shorter.                                                                         // 5013
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.                    // 5014
            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );                                                                  // 5015
            b = BASE - 1;                                                                                             // 5016
                                                                                                                      // 5017
            // Subtract yc from xc.                                                                                   // 5018
            for ( ; j > a; ) {                                                                                        // 5019
                                                                                                                      // 5020
                if ( xc[--j] < yc[j] ) {                                                                              // 5021
                    for ( i = j; i && !xc[--i]; xc[i] = b );                                                          // 5022
                    --xc[i];                                                                                          // 5023
                    xc[j] += BASE;                                                                                    // 5024
                }                                                                                                     // 5025
                                                                                                                      // 5026
                xc[j] -= yc[j];                                                                                       // 5027
            }                                                                                                         // 5028
                                                                                                                      // 5029
            // Remove leading zeros and adjust exponent accordingly.                                                  // 5030
            for ( ; xc[0] == 0; xc.shift(), --ye );                                                                   // 5031
                                                                                                                      // 5032
            // Zero?                                                                                                  // 5033
            if ( !xc[0] ) {                                                                                           // 5034
                                                                                                                      // 5035
                // Following IEEE 754 (2008) 6.3,                                                                     // 5036
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.                                      // 5037
                y.s = ROUNDING_MODE == 3 ? -1 : 1;                                                                    // 5038
                y.c = [ y.e = 0 ];                                                                                    // 5039
                return y;                                                                                             // 5040
            }                                                                                                         // 5041
                                                                                                                      // 5042
            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity                            // 5043
            // for finite x and y.                                                                                    // 5044
            return normalise( y, xc, ye );                                                                            // 5045
        };                                                                                                            // 5046
                                                                                                                      // 5047
                                                                                                                      // 5048
        /*                                                                                                            // 5049
         *   n % 0 =  N                                                                                               // 5050
         *   n % N =  N                                                                                               // 5051
         *   n % I =  n                                                                                               // 5052
         *   0 % n =  0                                                                                               // 5053
         *  -0 % n = -0                                                                                               // 5054
         *   0 % 0 =  N                                                                                               // 5055
         *   0 % N =  N                                                                                               // 5056
         *   0 % I =  0                                                                                               // 5057
         *   N % n =  N                                                                                               // 5058
         *   N % 0 =  N                                                                                               // 5059
         *   N % N =  N                                                                                               // 5060
         *   N % I =  N                                                                                               // 5061
         *   I % n =  N                                                                                               // 5062
         *   I % 0 =  N                                                                                               // 5063
         *   I % N =  N                                                                                               // 5064
         *   I % I =  N                                                                                               // 5065
         *                                                                                                            // 5066
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of                      // 5067
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.                                           // 5068
         */                                                                                                           // 5069
        P.modulo = P.mod = function ( y, b ) {                                                                        // 5070
            var q, s,                                                                                                 // 5071
                x = this;                                                                                             // 5072
                                                                                                                      // 5073
            id = 11;                                                                                                  // 5074
            y = new BigNumber( y, b );                                                                                // 5075
                                                                                                                      // 5076
            // Return NaN if x is Infinity or NaN, or y is NaN or zero.                                               // 5077
            if ( !x.c || !y.s || y.c && !y.c[0] ) {                                                                   // 5078
                return new BigNumber(NaN);                                                                            // 5079
                                                                                                                      // 5080
            // Return x if y is Infinity or x is zero.                                                                // 5081
            } else if ( !y.c || x.c && !x.c[0] ) {                                                                    // 5082
                return new BigNumber(x);                                                                              // 5083
            }                                                                                                         // 5084
                                                                                                                      // 5085
            if ( MODULO_MODE == 9 ) {                                                                                 // 5086
                                                                                                                      // 5087
                // Euclidian division: q = sign(y) * floor(x / abs(y))                                                // 5088
                // r = x - qy    where  0 <= r < abs(y)                                                               // 5089
                s = y.s;                                                                                              // 5090
                y.s = 1;                                                                                              // 5091
                q = div( x, y, 0, 3 );                                                                                // 5092
                y.s = s;                                                                                              // 5093
                q.s *= s;                                                                                             // 5094
            } else {                                                                                                  // 5095
                q = div( x, y, 0, MODULO_MODE );                                                                      // 5096
            }                                                                                                         // 5097
                                                                                                                      // 5098
            return x.minus( q.times(y) );                                                                             // 5099
        };                                                                                                            // 5100
                                                                                                                      // 5101
                                                                                                                      // 5102
        /*                                                                                                            // 5103
         * Return a new BigNumber whose value is the value of this BigNumber negated,                                 // 5104
         * i.e. multiplied by -1.                                                                                     // 5105
         */                                                                                                           // 5106
        P.negated = P.neg = function () {                                                                             // 5107
            var x = new BigNumber(this);                                                                              // 5108
            x.s = -x.s || null;                                                                                       // 5109
            return x;                                                                                                 // 5110
        };                                                                                                            // 5111
                                                                                                                      // 5112
                                                                                                                      // 5113
        /*                                                                                                            // 5114
         *  n + 0 = n                                                                                                 // 5115
         *  n + N = N                                                                                                 // 5116
         *  n + I = I                                                                                                 // 5117
         *  0 + n = n                                                                                                 // 5118
         *  0 + 0 = 0                                                                                                 // 5119
         *  0 + N = N                                                                                                 // 5120
         *  0 + I = I                                                                                                 // 5121
         *  N + n = N                                                                                                 // 5122
         *  N + 0 = N                                                                                                 // 5123
         *  N + N = N                                                                                                 // 5124
         *  N + I = N                                                                                                 // 5125
         *  I + n = I                                                                                                 // 5126
         *  I + 0 = I                                                                                                 // 5127
         *  I + N = N                                                                                                 // 5128
         *  I + I = I                                                                                                 // 5129
         *                                                                                                            // 5130
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of                        // 5131
         * BigNumber(y, b).                                                                                           // 5132
         */                                                                                                           // 5133
        P.plus = P.add = function ( y, b ) {                                                                          // 5134
            var t,                                                                                                    // 5135
                x = this,                                                                                             // 5136
                a = x.s;                                                                                              // 5137
                                                                                                                      // 5138
            id = 12;                                                                                                  // 5139
            y = new BigNumber( y, b );                                                                                // 5140
            b = y.s;                                                                                                  // 5141
                                                                                                                      // 5142
            // Either NaN?                                                                                            // 5143
            if ( !a || !b ) return new BigNumber(NaN);                                                                // 5144
                                                                                                                      // 5145
            // Signs differ?                                                                                          // 5146
             if ( a != b ) {                                                                                          // 5147
                y.s = -b;                                                                                             // 5148
                return x.minus(y);                                                                                    // 5149
            }                                                                                                         // 5150
                                                                                                                      // 5151
            var xe = x.e / LOG_BASE,                                                                                  // 5152
                ye = y.e / LOG_BASE,                                                                                  // 5153
                xc = x.c,                                                                                             // 5154
                yc = y.c;                                                                                             // 5155
                                                                                                                      // 5156
            if ( !xe || !ye ) {                                                                                       // 5157
                                                                                                                      // 5158
                // Return ±Infinity if either ±Infinity.                                                              // 5159
                if ( !xc || !yc ) return new BigNumber( a / 0 );                                                      // 5160
                                                                                                                      // 5161
                // Either zero?                                                                                       // 5162
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                           // 5163
                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );                        // 5164
            }                                                                                                         // 5165
                                                                                                                      // 5166
            xe = bitFloor(xe);                                                                                        // 5167
            ye = bitFloor(ye);                                                                                        // 5168
            xc = xc.slice();                                                                                          // 5169
                                                                                                                      // 5170
            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.                           // 5171
            if ( a = xe - ye ) {                                                                                      // 5172
                if ( a > 0 ) {                                                                                        // 5173
                    ye = xe;                                                                                          // 5174
                    t = yc;                                                                                           // 5175
                } else {                                                                                              // 5176
                    a = -a;                                                                                           // 5177
                    t = xc;                                                                                           // 5178
                }                                                                                                     // 5179
                                                                                                                      // 5180
                t.reverse();                                                                                          // 5181
                for ( ; a--; t.push(0) );                                                                             // 5182
                t.reverse();                                                                                          // 5183
            }                                                                                                         // 5184
                                                                                                                      // 5185
            a = xc.length;                                                                                            // 5186
            b = yc.length;                                                                                            // 5187
                                                                                                                      // 5188
            // Point xc to the longer array, and b to the shorter length.                                             // 5189
            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;                                                          // 5190
                                                                                                                      // 5191
            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.                         // 5192
            for ( a = 0; b; ) {                                                                                       // 5193
                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;                                                       // 5194
                xc[b] %= BASE;                                                                                        // 5195
            }                                                                                                         // 5196
                                                                                                                      // 5197
            if (a) {                                                                                                  // 5198
                xc.unshift(a);                                                                                        // 5199
                ++ye;                                                                                                 // 5200
            }                                                                                                         // 5201
                                                                                                                      // 5202
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0                                             // 5203
            // ye = MAX_EXP + 1 possible                                                                              // 5204
            return normalise( y, xc, ye );                                                                            // 5205
        };                                                                                                            // 5206
                                                                                                                      // 5207
                                                                                                                      // 5208
        /*                                                                                                            // 5209
         * Return the number of significant digits of the value of this BigNumber.                                    // 5210
         *                                                                                                            // 5211
         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.                    // 5212
         */                                                                                                           // 5213
        P.precision = P.sd = function (z) {                                                                           // 5214
            var n, v,                                                                                                 // 5215
                x = this,                                                                                             // 5216
                c = x.c;                                                                                              // 5217
                                                                                                                      // 5218
            // 'precision() argument not a boolean or binary digit: {z}'                                              // 5219
            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {                                                     // 5220
                if (ERRORS) raise( 13, 'argument' + notBool, z );                                                     // 5221
                if ( z != !!z ) z = null;                                                                             // 5222
            }                                                                                                         // 5223
                                                                                                                      // 5224
            if ( !c ) return null;                                                                                    // 5225
            v = c.length - 1;                                                                                         // 5226
            n = v * LOG_BASE + 1;                                                                                     // 5227
                                                                                                                      // 5228
            if ( v = c[v] ) {                                                                                         // 5229
                                                                                                                      // 5230
                // Subtract the number of trailing zeros of the last element.                                         // 5231
                for ( ; v % 10 == 0; v /= 10, n-- );                                                                  // 5232
                                                                                                                      // 5233
                // Add the number of digits of the first element.                                                     // 5234
                for ( v = c[0]; v >= 10; v /= 10, n++ );                                                              // 5235
            }                                                                                                         // 5236
                                                                                                                      // 5237
            if ( z && x.e + 1 > n ) n = x.e + 1;                                                                      // 5238
                                                                                                                      // 5239
            return n;                                                                                                 // 5240
        };                                                                                                            // 5241
                                                                                                                      // 5242
                                                                                                                      // 5243
        /*                                                                                                            // 5244
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                  // 5245
         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if                        // 5246
         * omitted.                                                                                                   // 5247
         *                                                                                                            // 5248
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                 // 5249
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 5250
         *                                                                                                            // 5251
         * 'round() decimal places out of range: {dp}'                                                                // 5252
         * 'round() decimal places not an integer: {dp}'                                                              // 5253
         * 'round() rounding mode not an integer: {rm}'                                                               // 5254
         * 'round() rounding mode out of range: {rm}'                                                                 // 5255
         */                                                                                                           // 5256
        P.round = function ( dp, rm ) {                                                                               // 5257
            var n = new BigNumber(this);                                                                              // 5258
                                                                                                                      // 5259
            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {                                                       // 5260
                round( n, ~~dp + this.e + 1, rm == null ||                                                            // 5261
                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );                               // 5262
            }                                                                                                         // 5263
                                                                                                                      // 5264
            return n;                                                                                                 // 5265
        };                                                                                                            // 5266
                                                                                                                      // 5267
                                                                                                                      // 5268
        /*                                                                                                            // 5269
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places                      // 5270
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.                                     // 5271
         *                                                                                                            // 5272
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.                                       // 5273
         *                                                                                                            // 5274
         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity                     // 5275
         * otherwise.                                                                                                 // 5276
         *                                                                                                            // 5277
         * 'shift() argument not an integer: {k}'                                                                     // 5278
         * 'shift() argument out of range: {k}'                                                                       // 5279
         */                                                                                                           // 5280
        P.shift = function (k) {                                                                                      // 5281
            var n = this;                                                                                             // 5282
            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )                               // 5283
                                                                                                                      // 5284
              // k < 1e+21, or truncate(k) will produce exponential notation.                                         // 5285
              ? n.times( '1e' + truncate(k) )                                                                         // 5286
              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )                     // 5287
                ? n.s * ( k < 0 ? 0 : 1 / 0 )                                                                         // 5288
                : n );                                                                                                // 5289
        };                                                                                                            // 5290
                                                                                                                      // 5291
                                                                                                                      // 5292
        /*                                                                                                            // 5293
         *  sqrt(-n) =  N                                                                                             // 5294
         *  sqrt( N) =  N                                                                                             // 5295
         *  sqrt(-I) =  N                                                                                             // 5296
         *  sqrt( I) =  I                                                                                             // 5297
         *  sqrt( 0) =  0                                                                                             // 5298
         *  sqrt(-0) = -0                                                                                             // 5299
         *                                                                                                            // 5300
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,                      // 5301
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                                     // 5302
         */                                                                                                           // 5303
        P.squareRoot = P.sqrt = function () {                                                                         // 5304
            var m, n, r, rep, t,                                                                                      // 5305
                x = this,                                                                                             // 5306
                c = x.c,                                                                                              // 5307
                s = x.s,                                                                                              // 5308
                e = x.e,                                                                                              // 5309
                dp = DECIMAL_PLACES + 4,                                                                              // 5310
                half = new BigNumber('0.5');                                                                          // 5311
                                                                                                                      // 5312
            // Negative/NaN/Infinity/zero?                                                                            // 5313
            if ( s !== 1 || !c || !c[0] ) {                                                                           // 5314
                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );                          // 5315
            }                                                                                                         // 5316
                                                                                                                      // 5317
            // Initial estimate.                                                                                      // 5318
            s = Math.sqrt( +x );                                                                                      // 5319
                                                                                                                      // 5320
            // Math.sqrt underflow/overflow?                                                                          // 5321
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.                                // 5322
            if ( s == 0 || s == 1 / 0 ) {                                                                             // 5323
                n = coeffToString(c);                                                                                 // 5324
                if ( ( n.length + e ) % 2 == 0 ) n += '0';                                                            // 5325
                s = Math.sqrt(n);                                                                                     // 5326
                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );                                                   // 5327
                                                                                                                      // 5328
                if ( s == 1 / 0 ) {                                                                                   // 5329
                    n = '1e' + e;                                                                                     // 5330
                } else {                                                                                              // 5331
                    n = s.toExponential();                                                                            // 5332
                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;                                                         // 5333
                }                                                                                                     // 5334
                                                                                                                      // 5335
                r = new BigNumber(n);                                                                                 // 5336
            } else {                                                                                                  // 5337
                r = new BigNumber( s + '' );                                                                          // 5338
            }                                                                                                         // 5339
                                                                                                                      // 5340
            // Check for zero.                                                                                        // 5341
            // r could be zero if MIN_EXP is changed after the this value was created.                                // 5342
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause                  // 5343
            // coeffToString to throw.                                                                                // 5344
            if ( r.c[0] ) {                                                                                           // 5345
                e = r.e;                                                                                              // 5346
                s = e + dp;                                                                                           // 5347
                if ( s < 3 ) s = 0;                                                                                   // 5348
                                                                                                                      // 5349
                // Newton-Raphson iteration.                                                                          // 5350
                for ( ; ; ) {                                                                                         // 5351
                    t = r;                                                                                            // 5352
                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );                                                   // 5353
                                                                                                                      // 5354
                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =                                               // 5355
                         coeffToString( r.c ) ).slice( 0, s ) ) {                                                     // 5356
                                                                                                                      // 5357
                        // The exponent of r may here be one less than the final result exponent,                     // 5358
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits                    // 5359
                        // are indexed correctly.                                                                     // 5360
                        if ( r.e < e ) --s;                                                                           // 5361
                        n = n.slice( s - 3, s + 1 );                                                                  // 5362
                                                                                                                      // 5363
                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits                   // 5364
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the                       // 5365
                        // iteration.                                                                                 // 5366
                        if ( n == '9999' || !rep && n == '4999' ) {                                                   // 5367
                                                                                                                      // 5368
                            // On the first iteration only, check to see if rounding up gives the                     // 5369
                            // exact result as the nines may infinitely repeat.                                       // 5370
                            if ( !rep ) {                                                                             // 5371
                                round( t, t.e + DECIMAL_PLACES + 2, 0 );                                              // 5372
                                                                                                                      // 5373
                                if ( t.times(t).eq(x) ) {                                                             // 5374
                                    r = t;                                                                            // 5375
                                    break;                                                                            // 5376
                                }                                                                                     // 5377
                            }                                                                                         // 5378
                                                                                                                      // 5379
                            dp += 4;                                                                                  // 5380
                            s += 4;                                                                                   // 5381
                            rep = 1;                                                                                  // 5382
                        } else {                                                                                      // 5383
                                                                                                                      // 5384
                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact                        // 5385
                            // result. If not, then there are further digits and m will be truthy.                    // 5386
                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {                                        // 5387
                                                                                                                      // 5388
                                // Truncate to the first rounding digit.                                              // 5389
                                round( r, r.e + DECIMAL_PLACES + 2, 1 );                                              // 5390
                                m = !r.times(r).eq(x);                                                                // 5391
                            }                                                                                         // 5392
                                                                                                                      // 5393
                            break;                                                                                    // 5394
                        }                                                                                             // 5395
                    }                                                                                                 // 5396
                }                                                                                                     // 5397
            }                                                                                                         // 5398
                                                                                                                      // 5399
            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );                                            // 5400
        };                                                                                                            // 5401
                                                                                                                      // 5402
                                                                                                                      // 5403
        /*                                                                                                            // 5404
         *  n * 0 = 0                                                                                                 // 5405
         *  n * N = N                                                                                                 // 5406
         *  n * I = I                                                                                                 // 5407
         *  0 * n = 0                                                                                                 // 5408
         *  0 * 0 = 0                                                                                                 // 5409
         *  0 * N = N                                                                                                 // 5410
         *  0 * I = N                                                                                                 // 5411
         *  N * n = N                                                                                                 // 5412
         *  N * 0 = N                                                                                                 // 5413
         *  N * N = N                                                                                                 // 5414
         *  N * I = N                                                                                                 // 5415
         *  I * n = I                                                                                                 // 5416
         *  I * 0 = N                                                                                                 // 5417
         *  I * N = N                                                                                                 // 5418
         *  I * I = I                                                                                                 // 5419
         *                                                                                                            // 5420
         * Return a new BigNumber whose value is the value of this BigNumber times the value of                       // 5421
         * BigNumber(y, b).                                                                                           // 5422
         */                                                                                                           // 5423
        P.times = P.mul = function ( y, b ) {                                                                         // 5424
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,                                                   // 5425
                base, sqrtBase,                                                                                       // 5426
                x = this,                                                                                             // 5427
                xc = x.c,                                                                                             // 5428
                yc = ( id = 17, y = new BigNumber( y, b ) ).c;                                                        // 5429
                                                                                                                      // 5430
            // Either NaN, ±Infinity or ±0?                                                                           // 5431
            if ( !xc || !yc || !xc[0] || !yc[0] ) {                                                                   // 5432
                                                                                                                      // 5433
                // Return NaN if either is NaN, or one is 0 and the other is Infinity.                                // 5434
                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {                                   // 5435
                    y.c = y.e = y.s = null;                                                                           // 5436
                } else {                                                                                              // 5437
                    y.s *= x.s;                                                                                       // 5438
                                                                                                                      // 5439
                    // Return ±Infinity if either is ±Infinity.                                                       // 5440
                    if ( !xc || !yc ) {                                                                               // 5441
                        y.c = y.e = null;                                                                             // 5442
                                                                                                                      // 5443
                    // Return ±0 if either is ±0.                                                                     // 5444
                    } else {                                                                                          // 5445
                        y.c = [0];                                                                                    // 5446
                        y.e = 0;                                                                                      // 5447
                    }                                                                                                 // 5448
                }                                                                                                     // 5449
                                                                                                                      // 5450
                return y;                                                                                             // 5451
            }                                                                                                         // 5452
                                                                                                                      // 5453
            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );                                              // 5454
            y.s *= x.s;                                                                                               // 5455
            xcL = xc.length;                                                                                          // 5456
            ycL = yc.length;                                                                                          // 5457
                                                                                                                      // 5458
            // Ensure xc points to longer array and xcL to its length.                                                // 5459
            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;                                  // 5460
                                                                                                                      // 5461
            // Initialise the result array with zeros.                                                                // 5462
            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );                                                          // 5463
                                                                                                                      // 5464
            base = BASE;                                                                                              // 5465
            sqrtBase = SQRT_BASE;                                                                                     // 5466
                                                                                                                      // 5467
            for ( i = ycL; --i >= 0; ) {                                                                              // 5468
                c = 0;                                                                                                // 5469
                ylo = yc[i] % sqrtBase;                                                                               // 5470
                yhi = yc[i] / sqrtBase | 0;                                                                           // 5471
                                                                                                                      // 5472
                for ( k = xcL, j = i + k; j > i; ) {                                                                  // 5473
                    xlo = xc[--k] % sqrtBase;                                                                         // 5474
                    xhi = xc[k] / sqrtBase | 0;                                                                       // 5475
                    m = yhi * xlo + xhi * ylo;                                                                        // 5476
                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;                                    // 5477
                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;                                        // 5478
                    zc[j--] = xlo % base;                                                                             // 5479
                }                                                                                                     // 5480
                                                                                                                      // 5481
                zc[j] = c;                                                                                            // 5482
            }                                                                                                         // 5483
                                                                                                                      // 5484
            if (c) {                                                                                                  // 5485
                ++e;                                                                                                  // 5486
            } else {                                                                                                  // 5487
                zc.shift();                                                                                           // 5488
            }                                                                                                         // 5489
                                                                                                                      // 5490
            return normalise( y, zc, e );                                                                             // 5491
        };                                                                                                            // 5492
                                                                                                                      // 5493
                                                                                                                      // 5494
        /*                                                                                                            // 5495
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                  // 5496
         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.                           // 5497
         *                                                                                                            // 5498
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                             // 5499
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 5500
         *                                                                                                            // 5501
         * 'toDigits() precision out of range: {sd}'                                                                  // 5502
         * 'toDigits() precision not an integer: {sd}'                                                                // 5503
         * 'toDigits() rounding mode not an integer: {rm}'                                                            // 5504
         * 'toDigits() rounding mode out of range: {rm}'                                                              // 5505
         */                                                                                                           // 5506
        P.toDigits = function ( sd, rm ) {                                                                            // 5507
            var n = new BigNumber(this);                                                                              // 5508
            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;                            // 5509
            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;                    // 5510
            return sd ? round( n, sd, rm ) : n;                                                                       // 5511
        };                                                                                                            // 5512
                                                                                                                      // 5513
                                                                                                                      // 5514
        /*                                                                                                            // 5515
         * Return a string representing the value of this BigNumber in exponential notation and                       // 5516
         * rounded using ROUNDING_MODE to dp fixed decimal places.                                                    // 5517
         *                                                                                                            // 5518
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                 // 5519
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 5520
         *                                                                                                            // 5521
         * 'toExponential() decimal places not an integer: {dp}'                                                      // 5522
         * 'toExponential() decimal places out of range: {dp}'                                                        // 5523
         * 'toExponential() rounding mode not an integer: {rm}'                                                       // 5524
         * 'toExponential() rounding mode out of range: {rm}'                                                         // 5525
         */                                                                                                           // 5526
        P.toExponential = function ( dp, rm ) {                                                                       // 5527
            return format( this,                                                                                      // 5528
              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );                                 // 5529
        };                                                                                                            // 5530
                                                                                                                      // 5531
                                                                                                                      // 5532
        /*                                                                                                            // 5533
         * Return a string representing the value of this BigNumber in fixed-point notation rounding                  // 5534
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.                      // 5535
         *                                                                                                            // 5536
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',                                            // 5537
         * but e.g. (-0.00001).toFixed(0) is '-0'.                                                                    // 5538
         *                                                                                                            // 5539
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                 // 5540
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 5541
         *                                                                                                            // 5542
         * 'toFixed() decimal places not an integer: {dp}'                                                            // 5543
         * 'toFixed() decimal places out of range: {dp}'                                                              // 5544
         * 'toFixed() rounding mode not an integer: {rm}'                                                             // 5545
         * 'toFixed() rounding mode out of range: {rm}'                                                               // 5546
         */                                                                                                           // 5547
        P.toFixed = function ( dp, rm ) {                                                                             // 5548
            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )                                           // 5549
              ? ~~dp + this.e + 1 : null, rm, 20 );                                                                   // 5550
        };                                                                                                            // 5551
                                                                                                                      // 5552
                                                                                                                      // 5553
        /*                                                                                                            // 5554
         * Return a string representing the value of this BigNumber in fixed-point notation rounded                   // 5555
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties                  // 5556
         * of the FORMAT object (see BigNumber.config).                                                               // 5557
         *                                                                                                            // 5558
         * FORMAT = {                                                                                                 // 5559
         *      decimalSeparator : '.',                                                                               // 5560
         *      groupSeparator : ',',                                                                                 // 5561
         *      groupSize : 3,                                                                                        // 5562
         *      secondaryGroupSize : 0,                                                                               // 5563
         *      fractionGroupSeparator : '\xA0',    // non-breaking space                                             // 5564
         *      fractionGroupSize : 0                                                                                 // 5565
         * };                                                                                                         // 5566
         *                                                                                                            // 5567
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                 // 5568
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 5569
         *                                                                                                            // 5570
         * 'toFormat() decimal places not an integer: {dp}'                                                           // 5571
         * 'toFormat() decimal places out of range: {dp}'                                                             // 5572
         * 'toFormat() rounding mode not an integer: {rm}'                                                            // 5573
         * 'toFormat() rounding mode out of range: {rm}'                                                              // 5574
         */                                                                                                           // 5575
        P.toFormat = function ( dp, rm ) {                                                                            // 5576
            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )                                        // 5577
              ? ~~dp + this.e + 1 : null, rm, 21 );                                                                   // 5578
                                                                                                                      // 5579
            if ( this.c ) {                                                                                           // 5580
                var i,                                                                                                // 5581
                    arr = str.split('.'),                                                                             // 5582
                    g1 = +FORMAT.groupSize,                                                                           // 5583
                    g2 = +FORMAT.secondaryGroupSize,                                                                  // 5584
                    groupSeparator = FORMAT.groupSeparator,                                                           // 5585
                    intPart = arr[0],                                                                                 // 5586
                    fractionPart = arr[1],                                                                            // 5587
                    isNeg = this.s < 0,                                                                               // 5588
                    intDigits = isNeg ? intPart.slice(1) : intPart,                                                   // 5589
                    len = intDigits.length;                                                                           // 5590
                                                                                                                      // 5591
                if (g2) i = g1, g1 = g2, g2 = i, len -= i;                                                            // 5592
                                                                                                                      // 5593
                if ( g1 > 0 && len > 0 ) {                                                                            // 5594
                    i = len % g1 || g1;                                                                               // 5595
                    intPart = intDigits.substr( 0, i );                                                               // 5596
                                                                                                                      // 5597
                    for ( ; i < len; i += g1 ) {                                                                      // 5598
                        intPart += groupSeparator + intDigits.substr( i, g1 );                                        // 5599
                    }                                                                                                 // 5600
                                                                                                                      // 5601
                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);                                     // 5602
                    if (isNeg) intPart = '-' + intPart;                                                               // 5603
                }                                                                                                     // 5604
                                                                                                                      // 5605
                str = fractionPart                                                                                    // 5606
                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )                          // 5607
                    ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),                                  // 5608
                      '$&' + FORMAT.fractionGroupSeparator )                                                          // 5609
                    : fractionPart )                                                                                  // 5610
                  : intPart;                                                                                          // 5611
            }                                                                                                         // 5612
                                                                                                                      // 5613
            return str;                                                                                               // 5614
        };                                                                                                            // 5615
                                                                                                                      // 5616
                                                                                                                      // 5617
        /*                                                                                                            // 5618
         * Return a string array representing the value of this BigNumber as a simple fraction with                   // 5619
         * an integer numerator and an integer denominator. The denominator will be a positive                        // 5620
         * non-zero value less than or equal to the specified maximum denominator. If a maximum                       // 5621
         * denominator is not specified, the denominator will be the lowest value necessary to                        // 5622
         * represent the number exactly.                                                                              // 5623
         *                                                                                                            // 5624
         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.                       // 5625
         *                                                                                                            // 5626
         * 'toFraction() max denominator not an integer: {md}'                                                        // 5627
         * 'toFraction() max denominator out of range: {md}'                                                          // 5628
         */                                                                                                           // 5629
        P.toFraction = function (md) {                                                                                // 5630
            var arr, d0, d2, e, exp, n, n0, q, s,                                                                     // 5631
                k = ERRORS,                                                                                           // 5632
                x = this,                                                                                             // 5633
                xc = x.c,                                                                                             // 5634
                d = new BigNumber(ONE),                                                                               // 5635
                n1 = d0 = new BigNumber(ONE),                                                                         // 5636
                d1 = n0 = new BigNumber(ONE);                                                                         // 5637
                                                                                                                      // 5638
            if ( md != null ) {                                                                                       // 5639
                ERRORS = false;                                                                                       // 5640
                n = new BigNumber(md);                                                                                // 5641
                ERRORS = k;                                                                                           // 5642
                                                                                                                      // 5643
                if ( !( k = n.isInt() ) || n.lt(ONE) ) {                                                              // 5644
                                                                                                                      // 5645
                    if (ERRORS) {                                                                                     // 5646
                        raise( 22,                                                                                    // 5647
                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );                       // 5648
                    }                                                                                                 // 5649
                                                                                                                      // 5650
                    // ERRORS is false:                                                                               // 5651
                    // If md is a finite non-integer >= 1, round it to an integer and use it.                         // 5652
                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;                                     // 5653
                }                                                                                                     // 5654
            }                                                                                                         // 5655
                                                                                                                      // 5656
            if ( !xc ) return x.toString();                                                                           // 5657
            s = coeffToString(xc);                                                                                    // 5658
                                                                                                                      // 5659
            // Determine initial denominator.                                                                         // 5660
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.                   // 5661
            e = d.e = s.length - x.e - 1;                                                                             // 5662
            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];                                   // 5663
            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;                                                        // 5664
                                                                                                                      // 5665
            exp = MAX_EXP;                                                                                            // 5666
            MAX_EXP = 1 / 0;                                                                                          // 5667
            n = new BigNumber(s);                                                                                     // 5668
                                                                                                                      // 5669
            // n0 = d1 = 0                                                                                            // 5670
            n0.c[0] = 0;                                                                                              // 5671
                                                                                                                      // 5672
            for ( ; ; )  {                                                                                            // 5673
                q = div( n, d, 0, 1 );                                                                                // 5674
                d2 = d0.plus( q.times(d1) );                                                                          // 5675
                if ( d2.cmp(md) == 1 ) break;                                                                         // 5676
                d0 = d1;                                                                                              // 5677
                d1 = d2;                                                                                              // 5678
                n1 = n0.plus( q.times( d2 = n1 ) );                                                                   // 5679
                n0 = d2;                                                                                              // 5680
                d = n.minus( q.times( d2 = d ) );                                                                     // 5681
                n = d2;                                                                                               // 5682
            }                                                                                                         // 5683
                                                                                                                      // 5684
            d2 = div( md.minus(d0), d1, 0, 1 );                                                                       // 5685
            n0 = n0.plus( d2.times(n1) );                                                                             // 5686
            d0 = d0.plus( d2.times(d1) );                                                                             // 5687
            n0.s = n1.s = x.s;                                                                                        // 5688
            e *= 2;                                                                                                   // 5689
                                                                                                                      // 5690
            // Determine which fraction is closer to x, n0/d0 or n1/d1                                                // 5691
            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(                                                 // 5692
                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1                                                // 5693
                    ? [ n1.toString(), d1.toString() ]                                                                // 5694
                    : [ n0.toString(), d0.toString() ];                                                               // 5695
                                                                                                                      // 5696
            MAX_EXP = exp;                                                                                            // 5697
            return arr;                                                                                               // 5698
        };                                                                                                            // 5699
                                                                                                                      // 5700
                                                                                                                      // 5701
        /*                                                                                                            // 5702
         * Return the value of this BigNumber converted to a number primitive.                                        // 5703
         */                                                                                                           // 5704
        P.toNumber = function () {                                                                                    // 5705
            var x = this;                                                                                             // 5706
                                                                                                                      // 5707
            // Ensure zero has correct sign.                                                                          // 5708
            return +x || ( x.s ? x.s * 0 : NaN );                                                                     // 5709
        };                                                                                                            // 5710
                                                                                                                      // 5711
                                                                                                                      // 5712
        /*                                                                                                            // 5713
         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.                       // 5714
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.                                      // 5715
         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.                                     // 5716
         *                                                                                                            // 5717
         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.                                       // 5718
         * (Performs 54 loop iterations for n of 9007199254740992.)                                                   // 5719
         *                                                                                                            // 5720
         * 'pow() exponent not an integer: {n}'                                                                       // 5721
         * 'pow() exponent out of range: {n}'                                                                         // 5722
         */                                                                                                           // 5723
        P.toPower = P.pow = function (n) {                                                                            // 5724
            var k, y,                                                                                                 // 5725
                i = mathfloor( n < 0 ? -n : +n ),                                                                     // 5726
                x = this;                                                                                             // 5727
                                                                                                                      // 5728
            // Pass ±Infinity to Math.pow if exponent is out of range.                                                // 5729
            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&                             // 5730
              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||                                                 // 5731
                parseFloat(n) != n && !( n = NaN ) ) ) {                                                              // 5732
                return new BigNumber( Math.pow( +x, n ) );                                                            // 5733
            }                                                                                                         // 5734
                                                                                                                      // 5735
            // Truncating each coefficient array to a length of k after each multiplication equates                   // 5736
            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a                     // 5737
            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)                    // 5738
            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;                                         // 5739
            y = new BigNumber(ONE);                                                                                   // 5740
                                                                                                                      // 5741
            for ( ; ; ) {                                                                                             // 5742
                                                                                                                      // 5743
                if ( i % 2 ) {                                                                                        // 5744
                    y = y.times(x);                                                                                   // 5745
                    if ( !y.c ) break;                                                                                // 5746
                    if ( k && y.c.length > k ) y.c.length = k;                                                        // 5747
                }                                                                                                     // 5748
                                                                                                                      // 5749
                i = mathfloor( i / 2 );                                                                               // 5750
                if ( !i ) break;                                                                                      // 5751
                                                                                                                      // 5752
                x = x.times(x);                                                                                       // 5753
                if ( k && x.c && x.c.length > k ) x.c.length = k;                                                     // 5754
            }                                                                                                         // 5755
                                                                                                                      // 5756
            if ( n < 0 ) y = ONE.div(y);                                                                              // 5757
            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;                                                  // 5758
        };                                                                                                            // 5759
                                                                                                                      // 5760
                                                                                                                      // 5761
        /*                                                                                                            // 5762
         * Return a string representing the value of this BigNumber rounded to sd significant digits                  // 5763
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits                           // 5764
         * necessary to represent the integer part of the value in fixed-point notation, then use                     // 5765
         * exponential notation.                                                                                      // 5766
         *                                                                                                            // 5767
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                             // 5768
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                    // 5769
         *                                                                                                            // 5770
         * 'toPrecision() precision not an integer: {sd}'                                                             // 5771
         * 'toPrecision() precision out of range: {sd}'                                                               // 5772
         * 'toPrecision() rounding mode not an integer: {rm}'                                                         // 5773
         * 'toPrecision() rounding mode out of range: {rm}'                                                           // 5774
         */                                                                                                           // 5775
        P.toPrecision = function ( sd, rm ) {                                                                         // 5776
            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )                              // 5777
              ? sd | 0 : null, rm, 24 );                                                                              // 5778
        };                                                                                                            // 5779
                                                                                                                      // 5780
                                                                                                                      // 5781
        /*                                                                                                            // 5782
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is                     // 5783
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and                  // 5784
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent                      // 5785
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than                  // 5786
         * TO_EXP_NEG, return exponential notation.                                                                   // 5787
         *                                                                                                            // 5788
         * [b] {number} Integer, 2 to 64 inclusive.                                                                   // 5789
         *                                                                                                            // 5790
         * 'toString() base not an integer: {b}'                                                                      // 5791
         * 'toString() base out of range: {b}'                                                                        // 5792
         */                                                                                                           // 5793
        P.toString = function (b) {                                                                                   // 5794
            var str,                                                                                                  // 5795
                n = this,                                                                                             // 5796
                s = n.s,                                                                                              // 5797
                e = n.e;                                                                                              // 5798
                                                                                                                      // 5799
            // Infinity or NaN?                                                                                       // 5800
            if ( e === null ) {                                                                                       // 5801
                                                                                                                      // 5802
                if (s) {                                                                                              // 5803
                    str = 'Infinity';                                                                                 // 5804
                    if ( s < 0 ) str = '-' + str;                                                                     // 5805
                } else {                                                                                              // 5806
                    str = 'NaN';                                                                                      // 5807
                }                                                                                                     // 5808
            } else {                                                                                                  // 5809
                str = coeffToString( n.c );                                                                           // 5810
                                                                                                                      // 5811
                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {                                             // 5812
                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS                                                          // 5813
                      ? toExponential( str, e )                                                                       // 5814
                      : toFixedPoint( str, e );                                                                       // 5815
                } else {                                                                                              // 5816
                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );                                        // 5817
                }                                                                                                     // 5818
                                                                                                                      // 5819
                if ( s < 0 && n.c[0] ) str = '-' + str;                                                               // 5820
            }                                                                                                         // 5821
                                                                                                                      // 5822
            return str;                                                                                               // 5823
        };                                                                                                            // 5824
                                                                                                                      // 5825
                                                                                                                      // 5826
        /*                                                                                                            // 5827
         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole                     // 5828
         * number.                                                                                                    // 5829
         */                                                                                                           // 5830
        P.truncated = P.trunc = function () {                                                                         // 5831
            return round( new BigNumber(this), this.e + 1, 1 );                                                       // 5832
        };                                                                                                            // 5833
                                                                                                                      // 5834
                                                                                                                      // 5835
                                                                                                                      // 5836
        /*                                                                                                            // 5837
         * Return as toString, but do not accept a base argument.                                                     // 5838
         */                                                                                                           // 5839
        P.valueOf = P.toJSON = function () {                                                                          // 5840
            return this.toString();                                                                                   // 5841
        };                                                                                                            // 5842
                                                                                                                      // 5843
                                                                                                                      // 5844
        // Aliases for BigDecimal methods.                                                                            // 5845
        //P.add = P.plus;         // P.add included above                                                             // 5846
        //P.subtract = P.minus;   // P.sub included above                                                             // 5847
        //P.multiply = P.times;   // P.mul included above                                                             // 5848
        //P.divide = P.div;                                                                                           // 5849
        //P.remainder = P.mod;                                                                                        // 5850
        //P.compareTo = P.cmp;                                                                                        // 5851
        //P.negate = P.neg;                                                                                           // 5852
                                                                                                                      // 5853
                                                                                                                      // 5854
        if ( configObj != null ) BigNumber.config(configObj);                                                         // 5855
                                                                                                                      // 5856
        return BigNumber;                                                                                             // 5857
    }                                                                                                                 // 5858
                                                                                                                      // 5859
                                                                                                                      // 5860
    // PRIVATE HELPER FUNCTIONS                                                                                       // 5861
                                                                                                                      // 5862
                                                                                                                      // 5863
    function bitFloor(n) {                                                                                            // 5864
        var i = n | 0;                                                                                                // 5865
        return n > 0 || n === i ? i : i - 1;                                                                          // 5866
    }                                                                                                                 // 5867
                                                                                                                      // 5868
                                                                                                                      // 5869
    // Return a coefficient array as a string of base 10 digits.                                                      // 5870
    function coeffToString(a) {                                                                                       // 5871
        var s, z,                                                                                                     // 5872
            i = 1,                                                                                                    // 5873
            j = a.length,                                                                                             // 5874
            r = a[0] + '';                                                                                            // 5875
                                                                                                                      // 5876
        for ( ; i < j; ) {                                                                                            // 5877
            s = a[i++] + '';                                                                                          // 5878
            z = LOG_BASE - s.length;                                                                                  // 5879
            for ( ; z--; s = '0' + s );                                                                               // 5880
            r += s;                                                                                                   // 5881
        }                                                                                                             // 5882
                                                                                                                      // 5883
        // Determine trailing zeros.                                                                                  // 5884
        for ( j = r.length; r.charCodeAt(--j) === 48; );                                                              // 5885
        return r.slice( 0, j + 1 || 1 );                                                                              // 5886
    }                                                                                                                 // 5887
                                                                                                                      // 5888
                                                                                                                      // 5889
    // Compare the value of BigNumbers x and y.                                                                       // 5890
    function compare( x, y ) {                                                                                        // 5891
        var a, b,                                                                                                     // 5892
            xc = x.c,                                                                                                 // 5893
            yc = y.c,                                                                                                 // 5894
            i = x.s,                                                                                                  // 5895
            j = y.s,                                                                                                  // 5896
            k = x.e,                                                                                                  // 5897
            l = y.e;                                                                                                  // 5898
                                                                                                                      // 5899
        // Either NaN?                                                                                                // 5900
        if ( !i || !j ) return null;                                                                                  // 5901
                                                                                                                      // 5902
        a = xc && !xc[0];                                                                                             // 5903
        b = yc && !yc[0];                                                                                             // 5904
                                                                                                                      // 5905
        // Either zero?                                                                                               // 5906
        if ( a || b ) return a ? b ? 0 : -j : i;                                                                      // 5907
                                                                                                                      // 5908
        // Signs differ?                                                                                              // 5909
        if ( i != j ) return i;                                                                                       // 5910
                                                                                                                      // 5911
        a = i < 0;                                                                                                    // 5912
        b = k == l;                                                                                                   // 5913
                                                                                                                      // 5914
        // Either Infinity?                                                                                           // 5915
        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;                                                            // 5916
                                                                                                                      // 5917
        // Compare exponents.                                                                                         // 5918
        if ( !b ) return k > l ^ a ? 1 : -1;                                                                          // 5919
                                                                                                                      // 5920
        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;                                                            // 5921
                                                                                                                      // 5922
        // Compare digit by digit.                                                                                    // 5923
        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;                            // 5924
                                                                                                                      // 5925
        // Compare lengths.                                                                                           // 5926
        return k == l ? 0 : k > l ^ a ? 1 : -1;                                                                       // 5927
    }                                                                                                                 // 5928
                                                                                                                      // 5929
                                                                                                                      // 5930
    /*                                                                                                                // 5931
     * Return true if n is a valid number in range, otherwise false.                                                  // 5932
     * Use for argument validation when ERRORS is false.                                                              // 5933
     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.                                                      // 5934
     */                                                                                                               // 5935
    function intValidatorNoErrors( n, min, max ) {                                                                    // 5936
        return ( n = truncate(n) ) >= min && n <= max;                                                                // 5937
    }                                                                                                                 // 5938
                                                                                                                      // 5939
                                                                                                                      // 5940
    function isArray(obj) {                                                                                           // 5941
        return Object.prototype.toString.call(obj) == '[object Array]';                                               // 5942
    }                                                                                                                 // 5943
                                                                                                                      // 5944
                                                                                                                      // 5945
    /*                                                                                                                // 5946
     * Convert string of baseIn to an array of numbers of baseOut.                                                    // 5947
     * Eg. convertBase('255', 10, 16) returns [15, 15].                                                               // 5948
     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].                                                               // 5949
     */                                                                                                               // 5950
    function toBaseOut( str, baseIn, baseOut ) {                                                                      // 5951
        var j,                                                                                                        // 5952
            arr = [0],                                                                                                // 5953
            arrL,                                                                                                     // 5954
            i = 0,                                                                                                    // 5955
            len = str.length;                                                                                         // 5956
                                                                                                                      // 5957
        for ( ; i < len; ) {                                                                                          // 5958
            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );                                                   // 5959
            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );                                                    // 5960
                                                                                                                      // 5961
            for ( ; j < arr.length; j++ ) {                                                                           // 5962
                                                                                                                      // 5963
                if ( arr[j] > baseOut - 1 ) {                                                                         // 5964
                    if ( arr[j + 1] == null ) arr[j + 1] = 0;                                                         // 5965
                    arr[j + 1] += arr[j] / baseOut | 0;                                                               // 5966
                    arr[j] %= baseOut;                                                                                // 5967
                }                                                                                                     // 5968
            }                                                                                                         // 5969
        }                                                                                                             // 5970
                                                                                                                      // 5971
        return arr.reverse();                                                                                         // 5972
    }                                                                                                                 // 5973
                                                                                                                      // 5974
                                                                                                                      // 5975
    function toExponential( str, e ) {                                                                                // 5976
        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +                                        // 5977
          ( e < 0 ? 'e' : 'e+' ) + e;                                                                                 // 5978
    }                                                                                                                 // 5979
                                                                                                                      // 5980
                                                                                                                      // 5981
    function toFixedPoint( str, e ) {                                                                                 // 5982
        var len, z;                                                                                                   // 5983
                                                                                                                      // 5984
        // Negative exponent?                                                                                         // 5985
        if ( e < 0 ) {                                                                                                // 5986
                                                                                                                      // 5987
            // Prepend zeros.                                                                                         // 5988
            for ( z = '0.'; ++e; z += '0' );                                                                          // 5989
            str = z + str;                                                                                            // 5990
                                                                                                                      // 5991
        // Positive exponent                                                                                          // 5992
        } else {                                                                                                      // 5993
            len = str.length;                                                                                         // 5994
                                                                                                                      // 5995
            // Append zeros.                                                                                          // 5996
            if ( ++e > len ) {                                                                                        // 5997
                for ( z = '0', e -= len; --e; z += '0' );                                                             // 5998
                str += z;                                                                                             // 5999
            } else if ( e < len ) {                                                                                   // 6000
                str = str.slice( 0, e ) + '.' + str.slice(e);                                                         // 6001
            }                                                                                                         // 6002
        }                                                                                                             // 6003
                                                                                                                      // 6004
        return str;                                                                                                   // 6005
    }                                                                                                                 // 6006
                                                                                                                      // 6007
                                                                                                                      // 6008
    function truncate(n) {                                                                                            // 6009
        n = parseFloat(n);                                                                                            // 6010
        return n < 0 ? mathceil(n) : mathfloor(n);                                                                    // 6011
    }                                                                                                                 // 6012
                                                                                                                      // 6013
                                                                                                                      // 6014
    // EXPORT                                                                                                         // 6015
                                                                                                                      // 6016
                                                                                                                      // 6017
    BigNumber = another();                                                                                            // 6018
                                                                                                                      // 6019
    // AMD.                                                                                                           // 6020
    if ( typeof define == 'function' && define.amd ) {                                                                // 6021
        define( function () { return BigNumber; } );                                                                  // 6022
                                                                                                                      // 6023
    // Node and other environments that support module.exports.                                                       // 6024
    } else if ( typeof module != 'undefined' && module.exports ) {                                                    // 6025
        module.exports = BigNumber;                                                                                   // 6026
        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}                                               // 6027
                                                                                                                      // 6028
    // Browser.                                                                                                       // 6029
    } else {                                                                                                          // 6030
        global.BigNumber = BigNumber;                                                                                 // 6031
    }                                                                                                                 // 6032
})(this);                                                                                                             // 6033
                                                                                                                      // 6034
},{"crypto":27}],"web3":[function(require,module,exports){                                                            // 6035
var web3 = require('./lib/web3');                                                                                     // 6036
web3.providers.HttpProvider = require('./lib/web3/httpprovider');                                                     // 6037
web3.providers.QtSyncProvider = require('./lib/web3/qtsync');                                                         // 6038
web3.eth.contract = require('./lib/web3/contract');                                                                   // 6039
web3.abi = require('./lib/solidity/abi');                                                                             // 6040
                                                                                                                      // 6041
// dont override global variable                                                                                      // 6042
if (typeof window !== 'undefined' && typeof window.web3 === 'undefined') {                                            // 6043
    window.web3 = web3;                                                                                               // 6044
}                                                                                                                     // 6045
                                                                                                                      // 6046
module.exports = web3;                                                                                                // 6047
                                                                                                                      // 6048
                                                                                                                      // 6049
},{"./lib/solidity/abi":1,"./lib/web3":9,"./lib/web3/contract":10,"./lib/web3/httpprovider":17,"./lib/web3/qtsync":22}]},{},["web3"])
                                                                                                                      // 6051
                                                                                                                      // 6052
//# sourceMappingURL=web3.js.map                                                                                      // 6053
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
// packages/ethereum:web3/package-init.js                                                                             //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                      //
/* jshint ignore:start */                                                                                             // 1
                                                                                                                      // 2
if(typeof web3 === 'undefined') {                                                                                     // 3
    web3 = require('web3');                                                                                           // 4
    BigNumber = require('bignumber.js');                                                                              // 5
}                                                                                                                     // 6
                                                                                                                      // 7
/* jshint ignore:end */                                                                                               // 8
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['ethereum:web3'] = {
  web3: web3,
  BigNumber: BigNumber
};

})();
