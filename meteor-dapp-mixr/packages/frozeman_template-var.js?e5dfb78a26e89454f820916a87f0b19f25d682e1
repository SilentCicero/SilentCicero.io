//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var _ = Package.underscore._;
var ReactiveVar = Package['reactive-var'].ReactiveVar;

/* Package-scope variables */
var TemplateVar;

(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/frozeman:template-var/TemplateVar.js                                                              //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
/**                                                                                                           // 1
Template helpers                                                                                              // 2
                                                                                                              // 3
@module package frozeman:template-var                                                                         // 4
**/                                                                                                           // 5
                                                                                                              // 6
                                                                                                              // 7
/**                                                                                                           // 8
The `TemplateVar` provides reactive variables for template instances.                                         // 9
                                                                                                              // 10
Note! The reactive variables, are not preserved over hot code reloads, like the Meteor `Session` object does. // 11
                                                                                                              // 12
                                                                                                              // 13
To set and get properties inside template helpers, hooks and events do as follow:                             // 14
                                                                                                              // 15
    // set a property                                                                                         // 16
    TemplateVar.set('myProperty', 'myValue');                                                                 // 17
                                                                                                              // 18
    // to get it inside a helper, or callback                                                                 // 19
    TemplateVar.get('myProperty');                                                                            // 20
                                                                                                              // 21
                                                                                                              // 22
@class TemplateVar                                                                                            // 23
@constructor                                                                                                  // 24
**/                                                                                                           // 25
TemplateVar = {                                                                                               // 26
                                                                                                              // 27
    /**                                                                                                       // 28
    Gets the current template instance and returns also the correct keys and values.                          // 29
                                                                                                              // 30
    @method _getTemplateInstance                                                                              // 31
    @param {Object} givenTemplate            the current template                                             // 32
    @param {String} key                 the given key                                                         // 33
    @param {Mixed} value                the value to set                                                      // 34
    @return {String} The generated key name.                                                                  // 35
    **/                                                                                                       // 36
    _getTemplateInstance: function(givenTemplate, key, value){                                                // 37
        var template = null;                                                                                  // 38
                                                                                                              // 39
        // try if a template instance was given                                                               // 40
        if(_.isObject(givenTemplate) && (givenTemplate.hasOwnProperty('_templateInstance') || givenTemplate.hasOwnProperty('view'))) {
                                                                                                              // 42
            // if it couldn't get the template, check if a template instance was given.                       // 43
            if(givenTemplate.hasOwnProperty('_templateInstance'))                                             // 44
                template = givenTemplate;                                                                     // 45
            else if(givenTemplate.hasOwnProperty('view'))                                                     // 46
                template = givenTemplate.view;                                                                // 47
                                                                                                              // 48
        // otherwise try to get one yourself                                                                  // 49
        } else {                                                                                              // 50
            try {                                                                                             // 51
                template = Template.instance().view;                                                          // 52
                value = key;                                                                                  // 53
                key = givenTemplate;                                                                          // 54
                                                                                                              // 55
            } catch(e) {                                                                                      // 56
                throw new Meteor.Error('TemplateVar works only from withing template helpers, callbacks or events. Additonally you can pass a template instance as the first parameter.');
            }                                                                                                 // 58
        }                                                                                                     // 59
                                                                                                              // 60
                                                                                                              // 61
                                                                                                              // 62
                                                                                                              // 63
        // move on view up if its a #with, #if or #unless                                                     // 64
        while(template.name.indexOf('Template.') === -1 && template.parentView) {                             // 65
            template = template.parentView;                                                                   // 66
        }                                                                                                     // 67
                                                                                                              // 68
        // make sure the template session object exists                                                       // 69
        if(template && !template._templateVar)                                                                // 70
            template._templateVar = {};                                                                       // 71
                                                                                                              // 72
        // create Reactive var, if not existing                                                               // 73
        if(template && !template._templateVar[key])                                                           // 74
            template._templateVar[key] = new ReactiveVar(value);                                              // 75
                                                                                                              // 76
                                                                                                              // 77
        // build the keyname                                                                                  // 78
        return {                                                                                              // 79
            key: key,                                                                                         // 80
            value: value,                                                                                     // 81
            template: template                                                                                // 82
        };                                                                                                    // 83
    },                                                                                                        // 84
                                                                                                              // 85
                                                                                                              // 86
    // PUBLIC                                                                                                 // 87
                                                                                                              // 88
    /**                                                                                                       // 89
    When get is called we use the ReactiveVar.get from the template instance.                                 // 90
                                                                                                              // 91
    @method get                                                                                               // 92
    @param {Object} template            the current template                                                  // 93
    @param {String} propertyName     The name of the property you want to get. Should consist of the `'myPropertyName'`
    @return {Mixed} The stored value.                                                                         // 95
    **/                                                                                                       // 96
    get: function (template, propertyName) {                                                                  // 97
        var values = TemplateVar._getTemplateInstance(template, propertyName);                                // 98
                                                                                                              // 99
        return values.template._templateVar[values.key].get();                                                // 100
    },                                                                                                        // 101
                                                                                                              // 102
                                                                                                              // 103
    /**                                                                                                       // 104
    When set is called every depending reactive function where `TemplateVar.get()` with the same key is called will rerun.
                                                                                                              // 106
    @method set                                                                                               // 107
    @param {Object} template            the current template                                                  // 108
    @param {String} propertyName     The name of the property you want to get. Should consist of the `'templateName->myPropertyName'`
    @param {String|Object} value     If the value is a string with `rerun`, then it will be rerun all dependent functions where get `TemplateInstance.get()` was called.
    @return undefined                                                                                         // 111
    **/                                                                                                       // 112
    set: function (template, propertyName, value) {                                                           // 113
        var values = TemplateVar._getTemplateInstance(template, propertyName, value);                         // 114
                                                                                                              // 115
        values.template._templateVar[values.key].set(values.value);                                           // 116
    }                                                                                                         // 117
                                                                                                              // 118
};                                                                                                            // 119
                                                                                                              // 120
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['frozeman:template-var'] = {
  TemplateVar: TemplateVar
};

})();
